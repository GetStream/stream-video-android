syntax = "proto3";

package stream.video.sfu.remote_control_v1;

import "google/protobuf/timestamp.proto";
import "video/sfu/models_v1/models.proto";

option go_package = "remote_control_v1_rpc";

// RemoteControlRPC is an internal RPC to control SFU from the Coordinator
// TODO: better naming ideas?
service RemoteControlRPC {
  // DisconnectUser closes all user network connections, essentially kicking a user from the call.
  // A disconnect should happen in a way that does not trigger automatic reconnection, and the client should
  // get appropriate message.
  rpc KickUser(KickUserRequest) returns (KickUserResponse);
  // MuteParticipants mutes all specified participants in a call.
  // Both audio and video could be muted via this endpoint.
  rpc MuteParticipants(MuteParticipantsRequest) returns (MuteParticipantsResponse);
  // GetCall returns a call information
  rpc GetCall(GetCallRequest) returns (GetCallResponse);
  // CreateCall creates a Call on SFU
  rpc CreateCall(CreateCallRequest) returns (CreateCallResponse);
  // EndCall finilizes the call, disconnecting all remaining participants
  rpc EndCall(EndCallRequest) returns (EndCallResponse);
}

// A request message for KickUser endpoint
message KickUserRequest {
  // App PK
  int64 app_pk = 1;
  // An ID of the user to disconnect
  string user_id = 2;
  // Call IDs to which this request applies.
  // If empty, should be treated as "all calls"
  repeated string call_ids = 3;
  // A message to display to a user when its disconnected
  string message = 4;
  // Optional. A timestamp which tells SFU to deny all tokens issued before this date
  google.protobuf.Timestamp not_before = 5;
}

// A response message for KickUser endpoint
message KickUserResponse {
}

// A request message for InvaludateUserToken endpoint
message InvalidateTokenRequest {
  // App PK
  int64 app_pk = 1;
  // An ID of the user to invalidate tokens for
  string user_id = 2;
  // Call IDs to which this request applies.
  // If empty, should be treated as "all calls"
  repeated string call_ids = 3;
  // A message to display to a user in the event of disconnect
  string message = 4;
  // A cut-off date for all the tokens
  google.protobuf.Timestamp not_before = 5;
}

// A response message for InvaludateUserToken endpoint
message InvalidateTokenResponse {
}

// A request message for MuteParticipants endpoint
message MuteParticipantsRequest {
  // App PK
  int64 app_pk = 1;
  // List of part
  repeated models_v1.Participant participants = 2;
}

// A message that tells which participant to mute
message MuteParticipantInput {
  // User ID to mute
  string user_id = 1;
  // Session ID to mute
  // If empty, all sessions of provided user ID should be muted
  optional string session_id = 2;
  // Whether to mute video
  optional bool mute_audio = 3;
  // Whether to mute audio
  optional bool mute_video = 4;
}

// A response message for MuteParticipants endpoint
message MuteParticipantsResponse {
}

// A request message for GetCall endpoint
message GetCallRequest {
  // App PK
  int64 app_pk = 1;
  // A call ID
  string id = 2;
  // Whether to include state information in the response
  bool with_state = 3;
}

// A response message for GetCall endpoint
message GetCallResponse {
  // Call model
  models_v1.Call call = 1;
  // Call state
  models_v1.CallState state = 2;
}

// A request message for CreateCall endpoint
message CreateCallRequest {
  // App PK
  int64 app_pk = 1;
  // Call ID
  string id = 2;
  // List of SFUs that are used for this call
  repeated string cascading_sfus_hostnames = 3;
  // The token the SFU can use to participate in the gossip protocol
  string gossip_rpc_auth_token = 4;
}

// A response message for CreateCall endpoint
message CreateCallResponse {
  // A model of created call
  models_v1.Call call = 1;
}

// A request message for EndCall endpoint
message EndCallRequest {
  // App PK
  int64 app_pk = 1;
  // Call ID
  string id = 2;
  // A message to display to disconnected participants
  string message = 3;
}

// A response message for EndCall endpoint
message EndCallResponse {
  // A model of a call
  models_v1.Call call = 1;
  // TODO: return some call stats?
}
