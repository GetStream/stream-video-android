syntax = "proto3";

package stream.video.sfu.signal;

import "video/sfu/models/models.proto";

option go_package = "sfu_signal_rpc";
option java_multiple_files = true;
option java_outer_classname = "SfuSignalV1";
option csharp_namespace = "Stream.Video.v1.Sfu";

service SignalServer {

  // SetPublisher sends the WebRTC offer for the peer connection used to publish A/V
  rpc SetPublisher(SetPublisherRequest) returns (SetPublisherResponse);

  // answer is sent by the client to the SFU after receiving a subscriber_offer.
  rpc SendAnswer(SendAnswerRequest) returns (SendAnswerResponse);

  // SendICECandidate sends an ICE candidate to the client
  rpc IceTrickle(models.ICETrickle) returns (ICETrickleResponse);

  // UpdateSubscribers is used to notify the SFU about the list of video subscriptions
  // TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user
  rpc UpdateSubscriptions(UpdateSubscriptionsRequest) returns (UpdateSubscriptionsResponse);

  rpc UpdateMuteState(UpdateMuteStateRequest) returns (UpdateMuteStateResponse);
}


message UpdateMuteStateRequest{
  string session_id = 1;
  oneof mute {
    AudioMuteChanged  audio_mute_changed = 2;
    VideoMuteChanged  video_mute_changed = 3;
  }
}

message UpdateMuteStateResponse{

}

message AudioMuteChanged {
  bool muted = 1;
}

message VideoMuteChanged {
  bool muted = 2;
}

message UpdateSubscriptionsRequest {
  string session_id = 2;
  repeated TrackSubscriptionDetails tracks = 3;
}

message TrackSubscriptionDetails {
  string user_id = 1;
  string session_id = 2;
  stream.video.sfu.models.TrackType track_type = 3;
  stream.video.sfu.models.VideoDimension dimension = 4;
}

message SendAnswerRequest {
  stream.video.sfu.models.PeerType peer_type = 1;
  string sdp = 2;
  string session_id = 4;
}

message SendAnswerResponse {

}

message ICETrickleResponse{

}

message UpdateSubscriptionsResponse {
}

message SetPublisherRequest {
  // sdp offer
  string sdp = 1;
  string session_id = 3;
  repeated models.TrackInfo tracks = 5;
}

message SetPublisherResponse {
  // sdp answer
  string sdp = 1;
  string session_id = 3;
  bool ice_restart = 4;
}
