// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/sfu/signal_rpc/signal.proto

package sfu_signal_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	sfu_models "github.com/GetStream/video-proto/protobuf/video/sfu/models"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = sfu_models.TrackType(0)
)

// Validate checks the field values on UpdateMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMuteStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMuteStateRequestMultiError, or nil if none found.
func (m *UpdateMuteStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMuteStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	switch m.Mute.(type) {

	case *UpdateMuteStateRequest_AudioMuteChanged:

		if all {
			switch v := interface{}(m.GetAudioMuteChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "AudioMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "AudioMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAudioMuteChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMuteStateRequestValidationError{
					field:  "AudioMuteChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateMuteStateRequest_VideoMuteChanged:

		if all {
			switch v := interface{}(m.GetVideoMuteChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "VideoMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "VideoMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVideoMuteChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMuteStateRequestValidationError{
					field:  "VideoMuteChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateMuteStateRequestMultiError(errors)
	}

	return nil
}

// UpdateMuteStateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMuteStateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMuteStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMuteStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMuteStateRequestMultiError) AllErrors() []error { return m }

// UpdateMuteStateRequestValidationError is the validation error returned by
// UpdateMuteStateRequest.Validate if the designated constraints aren't met.
type UpdateMuteStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMuteStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMuteStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMuteStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMuteStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMuteStateRequestValidationError) ErrorName() string {
	return "UpdateMuteStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMuteStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMuteStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMuteStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMuteStateRequestValidationError{}

// Validate checks the field values on UpdateMuteStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMuteStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMuteStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMuteStateResponseMultiError, or nil if none found.
func (m *UpdateMuteStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMuteStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMuteStateResponseMultiError(errors)
	}

	return nil
}

// UpdateMuteStateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMuteStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMuteStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMuteStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMuteStateResponseMultiError) AllErrors() []error { return m }

// UpdateMuteStateResponseValidationError is the validation error returned by
// UpdateMuteStateResponse.Validate if the designated constraints aren't met.
type UpdateMuteStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMuteStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMuteStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMuteStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMuteStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMuteStateResponseValidationError) ErrorName() string {
	return "UpdateMuteStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMuteStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMuteStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMuteStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMuteStateResponseValidationError{}

// Validate checks the field values on AudioMuteChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioMuteChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioMuteChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioMuteChangedMultiError, or nil if none found.
func (m *AudioMuteChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioMuteChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Muted

	if len(errors) > 0 {
		return AudioMuteChangedMultiError(errors)
	}

	return nil
}

// AudioMuteChangedMultiError is an error wrapping multiple validation errors
// returned by AudioMuteChanged.ValidateAll() if the designated constraints
// aren't met.
type AudioMuteChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioMuteChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioMuteChangedMultiError) AllErrors() []error { return m }

// AudioMuteChangedValidationError is the validation error returned by
// AudioMuteChanged.Validate if the designated constraints aren't met.
type AudioMuteChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioMuteChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioMuteChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioMuteChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioMuteChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioMuteChangedValidationError) ErrorName() string { return "AudioMuteChangedValidationError" }

// Error satisfies the builtin error interface
func (e AudioMuteChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioMuteChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioMuteChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioMuteChangedValidationError{}

// Validate checks the field values on VideoMuteChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoMuteChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMuteChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoMuteChangedMultiError, or nil if none found.
func (m *VideoMuteChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMuteChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Muted

	if len(errors) > 0 {
		return VideoMuteChangedMultiError(errors)
	}

	return nil
}

// VideoMuteChangedMultiError is an error wrapping multiple validation errors
// returned by VideoMuteChanged.ValidateAll() if the designated constraints
// aren't met.
type VideoMuteChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMuteChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMuteChangedMultiError) AllErrors() []error { return m }

// VideoMuteChangedValidationError is the validation error returned by
// VideoMuteChanged.Validate if the designated constraints aren't met.
type VideoMuteChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMuteChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMuteChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMuteChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMuteChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMuteChangedValidationError) ErrorName() string { return "VideoMuteChangedValidationError" }

// Error satisfies the builtin error interface
func (e VideoMuteChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMuteChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMuteChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMuteChangedValidationError{}

// Validate checks the field values on UpdateSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionsRequestMultiError, or nil if none found.
func (m *UpdateSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	for idx, item := range m.GetTracks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSubscriptionsRequestValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSubscriptionsRequestValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSubscriptionsRequestValidationError{
					field:  fmt.Sprintf("Tracks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateSubscriptionsRequestMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionsRequestMultiError) AllErrors() []error { return m }

// UpdateSubscriptionsRequestValidationError is the validation error returned
// by UpdateSubscriptionsRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionsRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionsRequestValidationError{}

// Validate checks the field values on TrackSubscriptionDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrackSubscriptionDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackSubscriptionDetails with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrackSubscriptionDetailsMultiError, or nil if none found.
func (m *TrackSubscriptionDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackSubscriptionDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	// no validation rules for TrackType

	if all {
		switch v := interface{}(m.GetDimension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrackSubscriptionDetailsValidationError{
					field:  "Dimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrackSubscriptionDetailsValidationError{
					field:  "Dimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDimension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrackSubscriptionDetailsValidationError{
				field:  "Dimension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TrackSubscriptionDetailsMultiError(errors)
	}

	return nil
}

// TrackSubscriptionDetailsMultiError is an error wrapping multiple validation
// errors returned by TrackSubscriptionDetails.ValidateAll() if the designated
// constraints aren't met.
type TrackSubscriptionDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackSubscriptionDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackSubscriptionDetailsMultiError) AllErrors() []error { return m }

// TrackSubscriptionDetailsValidationError is the validation error returned by
// TrackSubscriptionDetails.Validate if the designated constraints aren't met.
type TrackSubscriptionDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackSubscriptionDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackSubscriptionDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackSubscriptionDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackSubscriptionDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackSubscriptionDetailsValidationError) ErrorName() string {
	return "TrackSubscriptionDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e TrackSubscriptionDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackSubscriptionDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackSubscriptionDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackSubscriptionDetailsValidationError{}

// Validate checks the field values on SendAnswerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendAnswerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendAnswerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendAnswerRequestMultiError, or nil if none found.
func (m *SendAnswerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendAnswerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PeerType

	// no validation rules for Sdp

	// no validation rules for SessionId

	if len(errors) > 0 {
		return SendAnswerRequestMultiError(errors)
	}

	return nil
}

// SendAnswerRequestMultiError is an error wrapping multiple validation errors
// returned by SendAnswerRequest.ValidateAll() if the designated constraints
// aren't met.
type SendAnswerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendAnswerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendAnswerRequestMultiError) AllErrors() []error { return m }

// SendAnswerRequestValidationError is the validation error returned by
// SendAnswerRequest.Validate if the designated constraints aren't met.
type SendAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendAnswerRequestValidationError) ErrorName() string {
	return "SendAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendAnswerRequestValidationError{}

// Validate checks the field values on SendAnswerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendAnswerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendAnswerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendAnswerResponseMultiError, or nil if none found.
func (m *SendAnswerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendAnswerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendAnswerResponseMultiError(errors)
	}

	return nil
}

// SendAnswerResponseMultiError is an error wrapping multiple validation errors
// returned by SendAnswerResponse.ValidateAll() if the designated constraints
// aren't met.
type SendAnswerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendAnswerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendAnswerResponseMultiError) AllErrors() []error { return m }

// SendAnswerResponseValidationError is the validation error returned by
// SendAnswerResponse.Validate if the designated constraints aren't met.
type SendAnswerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendAnswerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendAnswerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendAnswerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendAnswerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendAnswerResponseValidationError) ErrorName() string {
	return "SendAnswerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendAnswerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendAnswerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendAnswerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendAnswerResponseValidationError{}

// Validate checks the field values on ICETrickleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ICETrickleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ICETrickleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ICETrickleResponseMultiError, or nil if none found.
func (m *ICETrickleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ICETrickleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ICETrickleResponseMultiError(errors)
	}

	return nil
}

// ICETrickleResponseMultiError is an error wrapping multiple validation errors
// returned by ICETrickleResponse.ValidateAll() if the designated constraints
// aren't met.
type ICETrickleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ICETrickleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ICETrickleResponseMultiError) AllErrors() []error { return m }

// ICETrickleResponseValidationError is the validation error returned by
// ICETrickleResponse.Validate if the designated constraints aren't met.
type ICETrickleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ICETrickleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ICETrickleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ICETrickleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ICETrickleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ICETrickleResponseValidationError) ErrorName() string {
	return "ICETrickleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ICETrickleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sICETrickleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ICETrickleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ICETrickleResponseValidationError{}

// Validate checks the field values on UpdateSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionsResponseMultiError, or nil if none found.
func (m *UpdateSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionsResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionsResponseMultiError) AllErrors() []error { return m }

// UpdateSubscriptionsResponseValidationError is the validation error returned
// by UpdateSubscriptionsResponse.Validate if the designated constraints
// aren't met.
type UpdateSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionsResponseValidationError) ErrorName() string {
	return "UpdateSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionsResponseValidationError{}

// Validate checks the field values on SetPublisherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPublisherRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPublisherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPublisherRequestMultiError, or nil if none found.
func (m *SetPublisherRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPublisherRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sdp

	// no validation rules for SessionId

	for idx, item := range m.GetTracks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetPublisherRequestValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetPublisherRequestValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetPublisherRequestValidationError{
					field:  fmt.Sprintf("Tracks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetPublisherRequestMultiError(errors)
	}

	return nil
}

// SetPublisherRequestMultiError is an error wrapping multiple validation
// errors returned by SetPublisherRequest.ValidateAll() if the designated
// constraints aren't met.
type SetPublisherRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPublisherRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPublisherRequestMultiError) AllErrors() []error { return m }

// SetPublisherRequestValidationError is the validation error returned by
// SetPublisherRequest.Validate if the designated constraints aren't met.
type SetPublisherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPublisherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPublisherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPublisherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPublisherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPublisherRequestValidationError) ErrorName() string {
	return "SetPublisherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetPublisherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPublisherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPublisherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPublisherRequestValidationError{}

// Validate checks the field values on SetPublisherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPublisherResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPublisherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPublisherResponseMultiError, or nil if none found.
func (m *SetPublisherResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPublisherResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sdp

	// no validation rules for SessionId

	// no validation rules for IceRestart

	if len(errors) > 0 {
		return SetPublisherResponseMultiError(errors)
	}

	return nil
}

// SetPublisherResponseMultiError is an error wrapping multiple validation
// errors returned by SetPublisherResponse.ValidateAll() if the designated
// constraints aren't met.
type SetPublisherResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPublisherResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPublisherResponseMultiError) AllErrors() []error { return m }

// SetPublisherResponseValidationError is the validation error returned by
// SetPublisherResponse.Validate if the designated constraints aren't met.
type SetPublisherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPublisherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPublisherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPublisherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPublisherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPublisherResponseValidationError) ErrorName() string {
	return "SetPublisherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetPublisherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPublisherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPublisherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPublisherResponseValidationError{}
