// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: video/sfu/event_v1/events.proto

package event_v1

import (
	models_v1 "github.com/GetStream/video-proto/protobuf/video/sfu/models_v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoLayerSetting_Priority int32

const (
	VideoLayerSetting_PRIORITY_HIGH_UNSPECIFIED VideoLayerSetting_Priority = 0
	VideoLayerSetting_PRIORITY_LOW              VideoLayerSetting_Priority = 1
	VideoLayerSetting_PRIORITY_MEDIUM           VideoLayerSetting_Priority = 2
	VideoLayerSetting_PRIORITY_VERY_LOW         VideoLayerSetting_Priority = 3
)

// Enum value maps for VideoLayerSetting_Priority.
var (
	VideoLayerSetting_Priority_name = map[int32]string{
		0: "PRIORITY_HIGH_UNSPECIFIED",
		1: "PRIORITY_LOW",
		2: "PRIORITY_MEDIUM",
		3: "PRIORITY_VERY_LOW",
	}
	VideoLayerSetting_Priority_value = map[string]int32{
		"PRIORITY_HIGH_UNSPECIFIED": 0,
		"PRIORITY_LOW":              1,
		"PRIORITY_MEDIUM":           2,
		"PRIORITY_VERY_LOW":         3,
	}
)

func (x VideoLayerSetting_Priority) Enum() *VideoLayerSetting_Priority {
	p := new(VideoLayerSetting_Priority)
	*p = x
	return p
}

func (x VideoLayerSetting_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoLayerSetting_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_event_v1_events_proto_enumTypes[0].Descriptor()
}

func (VideoLayerSetting_Priority) Type() protoreflect.EnumType {
	return &file_video_sfu_event_v1_events_proto_enumTypes[0]
}

func (x VideoLayerSetting_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoLayerSetting_Priority.Descriptor instead.
func (VideoLayerSetting_Priority) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{16, 0}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventPayload:
	//
	//	*Event_SubscriberOffer
	//	*Event_ConnectionQualityChanged
	//	*Event_AudioLevelChanged
	//	*Event_SubscriberCandidate
	//	*Event_PublisherCandidate
	//	*Event_ChangePublishQuality
	//	*Event_MuteStateChanged
	//	*Event_VideoQualityChanged
	//	*Event_ParticipantConnected
	//	*Event_ParticipantDisconnected
	//	*Event_DominantSpeakerChanged
	//	*Event_LocalDeviceChange
	EventPayload isEvent_EventPayload `protobuf_oneof:"event_payload"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetEventPayload() isEvent_EventPayload {
	if m != nil {
		return m.EventPayload
	}
	return nil
}

func (x *Event) GetSubscriberOffer() *SubscriberOffer {
	if x, ok := x.GetEventPayload().(*Event_SubscriberOffer); ok {
		return x.SubscriberOffer
	}
	return nil
}

func (x *Event) GetConnectionQualityChanged() *ConnectionQualityChanged {
	if x, ok := x.GetEventPayload().(*Event_ConnectionQualityChanged); ok {
		return x.ConnectionQualityChanged
	}
	return nil
}

func (x *Event) GetAudioLevelChanged() *AudioLevelChanged {
	if x, ok := x.GetEventPayload().(*Event_AudioLevelChanged); ok {
		return x.AudioLevelChanged
	}
	return nil
}

func (x *Event) GetSubscriberCandidate() *ICECandidateTrickle {
	if x, ok := x.GetEventPayload().(*Event_SubscriberCandidate); ok {
		return x.SubscriberCandidate
	}
	return nil
}

func (x *Event) GetPublisherCandidate() *ICECandidateTrickle {
	if x, ok := x.GetEventPayload().(*Event_PublisherCandidate); ok {
		return x.PublisherCandidate
	}
	return nil
}

func (x *Event) GetChangePublishQuality() *ChangePublishQuality {
	if x, ok := x.GetEventPayload().(*Event_ChangePublishQuality); ok {
		return x.ChangePublishQuality
	}
	return nil
}

func (x *Event) GetMuteStateChanged() *MuteStateChanged {
	if x, ok := x.GetEventPayload().(*Event_MuteStateChanged); ok {
		return x.MuteStateChanged
	}
	return nil
}

func (x *Event) GetVideoQualityChanged() *VideoQualityChanged {
	if x, ok := x.GetEventPayload().(*Event_VideoQualityChanged); ok {
		return x.VideoQualityChanged
	}
	return nil
}

func (x *Event) GetParticipantConnected() *ParticipantConnected {
	if x, ok := x.GetEventPayload().(*Event_ParticipantConnected); ok {
		return x.ParticipantConnected
	}
	return nil
}

func (x *Event) GetParticipantDisconnected() *ParticipantDisconnected {
	if x, ok := x.GetEventPayload().(*Event_ParticipantDisconnected); ok {
		return x.ParticipantDisconnected
	}
	return nil
}

func (x *Event) GetDominantSpeakerChanged() *DominantSpeakerChanged {
	if x, ok := x.GetEventPayload().(*Event_DominantSpeakerChanged); ok {
		return x.DominantSpeakerChanged
	}
	return nil
}

func (x *Event) GetLocalDeviceChange() *LocalDeviceChanged {
	if x, ok := x.GetEventPayload().(*Event_LocalDeviceChange); ok {
		return x.LocalDeviceChange
	}
	return nil
}

type isEvent_EventPayload interface {
	isEvent_EventPayload()
}

type Event_SubscriberOffer struct {
	SubscriberOffer *SubscriberOffer `protobuf:"bytes,1,opt,name=subscriber_offer,json=subscriberOffer,proto3,oneof"`
}

type Event_ConnectionQualityChanged struct {
	ConnectionQualityChanged *ConnectionQualityChanged `protobuf:"bytes,2,opt,name=connection_quality_changed,json=connectionQualityChanged,proto3,oneof"`
}

type Event_AudioLevelChanged struct {
	AudioLevelChanged *AudioLevelChanged `protobuf:"bytes,3,opt,name=audio_level_changed,json=audioLevelChanged,proto3,oneof"`
}

type Event_SubscriberCandidate struct {
	SubscriberCandidate *ICECandidateTrickle `protobuf:"bytes,4,opt,name=subscriber_candidate,json=subscriberCandidate,proto3,oneof"`
}

type Event_PublisherCandidate struct {
	PublisherCandidate *ICECandidateTrickle `protobuf:"bytes,5,opt,name=publisher_candidate,json=publisherCandidate,proto3,oneof"`
}

type Event_ChangePublishQuality struct {
	ChangePublishQuality *ChangePublishQuality `protobuf:"bytes,6,opt,name=change_publish_quality,json=changePublishQuality,proto3,oneof"`
}

type Event_MuteStateChanged struct {
	MuteStateChanged *MuteStateChanged `protobuf:"bytes,7,opt,name=mute_state_changed,json=muteStateChanged,proto3,oneof"`
}

type Event_VideoQualityChanged struct {
	VideoQualityChanged *VideoQualityChanged `protobuf:"bytes,8,opt,name=video_quality_changed,json=videoQualityChanged,proto3,oneof"`
}

type Event_ParticipantConnected struct {
	ParticipantConnected *ParticipantConnected `protobuf:"bytes,9,opt,name=participant_connected,json=participantConnected,proto3,oneof"`
}

type Event_ParticipantDisconnected struct {
	ParticipantDisconnected *ParticipantDisconnected `protobuf:"bytes,10,opt,name=participant_disconnected,json=participantDisconnected,proto3,oneof"`
}

type Event_DominantSpeakerChanged struct {
	DominantSpeakerChanged *DominantSpeakerChanged `protobuf:"bytes,11,opt,name=dominant_speaker_changed,json=dominantSpeakerChanged,proto3,oneof"`
}

type Event_LocalDeviceChange struct {
	LocalDeviceChange *LocalDeviceChanged `protobuf:"bytes,12,opt,name=local_device_change,json=localDeviceChange,proto3,oneof"`
}

func (*Event_SubscriberOffer) isEvent_EventPayload() {}

func (*Event_ConnectionQualityChanged) isEvent_EventPayload() {}

func (*Event_AudioLevelChanged) isEvent_EventPayload() {}

func (*Event_SubscriberCandidate) isEvent_EventPayload() {}

func (*Event_PublisherCandidate) isEvent_EventPayload() {}

func (*Event_ChangePublishQuality) isEvent_EventPayload() {}

func (*Event_MuteStateChanged) isEvent_EventPayload() {}

func (*Event_VideoQualityChanged) isEvent_EventPayload() {}

func (*Event_ParticipantConnected) isEvent_EventPayload() {}

func (*Event_ParticipantDisconnected) isEvent_EventPayload() {}

func (*Event_DominantSpeakerChanged) isEvent_EventPayload() {}

func (*Event_LocalDeviceChange) isEvent_EventPayload() {}

// ParticipantConnected is fired when a user joins a call
type ParticipantConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call        *models_v1.Call        `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	Participant *models_v1.Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantConnected) Reset() {
	*x = ParticipantConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantConnected) ProtoMessage() {}

func (x *ParticipantConnected) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantConnected.ProtoReflect.Descriptor instead.
func (*ParticipantConnected) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipantConnected) GetCall() *models_v1.Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *ParticipantConnected) GetParticipant() *models_v1.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// ParticipantDisconnected is fired when a user leaves a call
type ParticipantDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call        *models_v1.Call        `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	Participant *models_v1.Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantDisconnected) Reset() {
	*x = ParticipantDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantDisconnected) ProtoMessage() {}

func (x *ParticipantDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantDisconnected.ProtoReflect.Descriptor instead.
func (*ParticipantDisconnected) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *ParticipantDisconnected) GetCall() *models_v1.Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *ParticipantDisconnected) GetParticipant() *models_v1.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type MuteStateChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participant *models_v1.Participant `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	AudioMuted  bool                   `protobuf:"varint,2,opt,name=audio_muted,json=audioMuted,proto3" json:"audio_muted,omitempty"`
	VideoMuted  bool                   `protobuf:"varint,3,opt,name=video_muted,json=videoMuted,proto3" json:"video_muted,omitempty"`
}

func (x *MuteStateChanged) Reset() {
	*x = MuteStateChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteStateChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteStateChanged) ProtoMessage() {}

func (x *MuteStateChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteStateChanged.ProtoReflect.Descriptor instead.
func (*MuteStateChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *MuteStateChanged) GetParticipant() *models_v1.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *MuteStateChanged) GetAudioMuted() bool {
	if x != nil {
		return x.AudioMuted
	}
	return false
}

func (x *MuteStateChanged) GetVideoMuted() bool {
	if x != nil {
		return x.VideoMuted
	}
	return false
}

// TODO batch these messages
type VideoQualityChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamQualities []*models_v1.StreamQuality `protobuf:"bytes,1,rep,name=stream_qualities,json=streamQualities,proto3" json:"stream_qualities,omitempty"`
}

func (x *VideoQualityChanged) Reset() {
	*x = VideoQualityChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoQualityChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoQualityChanged) ProtoMessage() {}

func (x *VideoQualityChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoQualityChanged.ProtoReflect.Descriptor instead.
func (*VideoQualityChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *VideoQualityChanged) GetStreamQualities() []*models_v1.StreamQuality {
	if x != nil {
		return x.StreamQualities
	}
	return nil
}

// SubscriberOffer is sent when the SFU adds tracks to a subscription
// this usually happens when a user joins a call and starts sending video
type SubscriberOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *SubscriberOffer) Reset() {
	*x = SubscriberOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberOffer) ProtoMessage() {}

func (x *SubscriberOffer) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberOffer.ProtoReflect.Descriptor instead.
func (*SubscriberOffer) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriberOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type LocalDeviceChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LocalDeviceChanged) Reset() {
	*x = LocalDeviceChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalDeviceChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDeviceChanged) ProtoMessage() {}

func (x *LocalDeviceChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDeviceChanged.ProtoReflect.Descriptor instead.
func (*LocalDeviceChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *LocalDeviceChanged) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// ICECandidateTrickle is about the ICE nonsense stuff
type ICECandidateTrickle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (x *ICECandidateTrickle) Reset() {
	*x = ICECandidateTrickle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICECandidateTrickle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICECandidateTrickle) ProtoMessage() {}

func (x *ICECandidateTrickle) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICECandidateTrickle.ProtoReflect.Descriptor instead.
func (*ICECandidateTrickle) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *ICECandidateTrickle) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

// ConnectionQuality is sent to inform about connection quality changes
// eg. thierry's connection is not good -> render a red icon Zoom style
type ConnectionQualityChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string                      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ConnectionQuality models_v1.ConnectionQuality `protobuf:"varint,2,opt,name=connection_quality,json=connectionQuality,proto3,enum=stream.video.sfu.models_v1.ConnectionQuality" json:"connection_quality,omitempty"`
}

func (x *ConnectionQualityChanged) Reset() {
	*x = ConnectionQualityChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionQualityChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionQualityChanged) ProtoMessage() {}

func (x *ConnectionQualityChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionQualityChanged.ProtoReflect.Descriptor instead.
func (*ConnectionQualityChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectionQualityChanged) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConnectionQualityChanged) GetConnectionQuality() models_v1.ConnectionQuality {
	if x != nil {
		return x.ConnectionQuality
	}
	return models_v1.ConnectionQuality(0)
}

// DominantSpeakerChanged is sent by the SFU to notify when there is a new dominant speaker in the call
type DominantSpeakerChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DominantSpeakerChanged) Reset() {
	*x = DominantSpeakerChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DominantSpeakerChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DominantSpeakerChanged) ProtoMessage() {}

func (x *DominantSpeakerChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DominantSpeakerChanged.ProtoReflect.Descriptor instead.
func (*DominantSpeakerChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{9}
}

func (x *DominantSpeakerChanged) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// AudioLevelChanged is sent by the SFU to notify about audio levels by user
type AudioLevelChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioLevels []*AudioLevel `protobuf:"bytes,1,rep,name=audio_levels,json=audioLevels,proto3" json:"audio_levels,omitempty"`
}

func (x *AudioLevelChanged) Reset() {
	*x = AudioLevelChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLevelChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLevelChanged) ProtoMessage() {}

func (x *AudioLevelChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLevelChanged.ProtoReflect.Descriptor instead.
func (*AudioLevelChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{10}
}

func (x *AudioLevelChanged) GetAudioLevels() []*AudioLevel {
	if x != nil {
		return x.AudioLevels
	}
	return nil
}

type AudioLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 0.0 means complete silence, 1.0 loudest
	Level float32 `protobuf:"fixed32,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AudioLevel) Reset() {
	*x = AudioLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLevel) ProtoMessage() {}

func (x *AudioLevel) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLevel.ProtoReflect.Descriptor instead.
func (*AudioLevel) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{11}
}

func (x *AudioLevel) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AudioLevel) GetLevel() float32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AudioLayerSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AudioLayerSetting) Reset() {
	*x = AudioLayerSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLayerSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLayerSetting) ProtoMessage() {}

func (x *AudioLayerSetting) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLayerSetting.ProtoReflect.Descriptor instead.
func (*AudioLayerSetting) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{12}
}

type AudioMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelCount int32 `protobuf:"varint,1,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
}

func (x *AudioMediaRequest) Reset() {
	*x = AudioMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMediaRequest) ProtoMessage() {}

func (x *AudioMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMediaRequest.ProtoReflect.Descriptor instead.
func (*AudioMediaRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{13}
}

func (x *AudioMediaRequest) GetChannelCount() int32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

type AudioSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaRequest *AudioMediaRequest   `protobuf:"bytes,1,opt,name=media_request,json=mediaRequest,proto3" json:"media_request,omitempty"`
	Codec        *models_v1.Codec     `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	Layers       []*AudioLayerSetting `protobuf:"bytes,3,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *AudioSender) Reset() {
	*x = AudioSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSender) ProtoMessage() {}

func (x *AudioSender) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSender.ProtoReflect.Descriptor instead.
func (*AudioSender) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{14}
}

func (x *AudioSender) GetMediaRequest() *AudioMediaRequest {
	if x != nil {
		return x.MediaRequest
	}
	return nil
}

func (x *AudioSender) GetCodec() *models_v1.Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *AudioSender) GetLayers() []*AudioLayerSetting {
	if x != nil {
		return x.Layers
	}
	return nil
}

type VideoMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdealHeight    int32 `protobuf:"varint,1,opt,name=ideal_height,json=idealHeight,proto3" json:"ideal_height,omitempty"`
	IdealWidth     int32 `protobuf:"varint,2,opt,name=ideal_width,json=idealWidth,proto3" json:"ideal_width,omitempty"`
	IdealFrameRate int32 `protobuf:"varint,3,opt,name=ideal_frame_rate,json=idealFrameRate,proto3" json:"ideal_frame_rate,omitempty"`
}

func (x *VideoMediaRequest) Reset() {
	*x = VideoMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMediaRequest) ProtoMessage() {}

func (x *VideoMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMediaRequest.ProtoReflect.Descriptor instead.
func (*VideoMediaRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{15}
}

func (x *VideoMediaRequest) GetIdealHeight() int32 {
	if x != nil {
		return x.IdealHeight
	}
	return 0
}

func (x *VideoMediaRequest) GetIdealWidth() int32 {
	if x != nil {
		return x.IdealWidth
	}
	return 0
}

func (x *VideoMediaRequest) GetIdealFrameRate() int32 {
	if x != nil {
		return x.IdealFrameRate
	}
	return 0
}

type VideoLayerSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Active                bool                       `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	MaxBitrate            int32                      `protobuf:"varint,3,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate,omitempty"`
	ScaleResolutionDownBy float32                    `protobuf:"fixed32,4,opt,name=scale_resolution_down_by,json=scaleResolutionDownBy,proto3" json:"scale_resolution_down_by,omitempty"`
	Priority              VideoLayerSetting_Priority `protobuf:"varint,5,opt,name=priority,proto3,enum=stream.video.sfu.event_v1.VideoLayerSetting_Priority" json:"priority,omitempty"`
	Codec                 *models_v1.Codec           `protobuf:"bytes,6,opt,name=codec,proto3" json:"codec,omitempty"`
}

func (x *VideoLayerSetting) Reset() {
	*x = VideoLayerSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoLayerSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoLayerSetting) ProtoMessage() {}

func (x *VideoLayerSetting) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoLayerSetting.ProtoReflect.Descriptor instead.
func (*VideoLayerSetting) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{16}
}

func (x *VideoLayerSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoLayerSetting) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VideoLayerSetting) GetMaxBitrate() int32 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *VideoLayerSetting) GetScaleResolutionDownBy() float32 {
	if x != nil {
		return x.ScaleResolutionDownBy
	}
	return 0
}

func (x *VideoLayerSetting) GetPriority() VideoLayerSetting_Priority {
	if x != nil {
		return x.Priority
	}
	return VideoLayerSetting_PRIORITY_HIGH_UNSPECIFIED
}

func (x *VideoLayerSetting) GetCodec() *models_v1.Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

type VideoSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaRequest *VideoMediaRequest   `protobuf:"bytes,1,opt,name=media_request,json=mediaRequest,proto3" json:"media_request,omitempty"`
	Codec        *models_v1.Codec     `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	Layers       []*VideoLayerSetting `protobuf:"bytes,3,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *VideoSender) Reset() {
	*x = VideoSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSender) ProtoMessage() {}

func (x *VideoSender) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSender.ProtoReflect.Descriptor instead.
func (*VideoSender) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{17}
}

func (x *VideoSender) GetMediaRequest() *VideoMediaRequest {
	if x != nil {
		return x.MediaRequest
	}
	return nil
}

func (x *VideoSender) GetCodec() *models_v1.Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *VideoSender) GetLayers() []*VideoLayerSetting {
	if x != nil {
		return x.Layers
	}
	return nil
}

// sent to users when they need to change the quality of their video
type ChangePublishQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioSenders []*AudioSender `protobuf:"bytes,1,rep,name=audio_senders,json=audioSenders,proto3" json:"audio_senders,omitempty"`
	VideoSenders []*VideoSender `protobuf:"bytes,2,rep,name=video_senders,json=videoSenders,proto3" json:"video_senders,omitempty"`
}

func (x *ChangePublishQuality) Reset() {
	*x = ChangePublishQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_v1_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePublishQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePublishQuality) ProtoMessage() {}

func (x *ChangePublishQuality) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_v1_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePublishQuality.ProtoReflect.Descriptor instead.
func (*ChangePublishQuality) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_v1_events_proto_rawDescGZIP(), []int{18}
}

func (x *ChangePublishQuality) GetAudioSenders() []*AudioSender {
	if x != nil {
		return x.AudioSenders
	}
	return nil
}

func (x *ChangePublishQuality) GetVideoSenders() []*VideoSender {
	if x != nil {
		return x.VideoSenders
	}
	return nil
}

var File_video_sfu_event_v1_events_proto protoreflect.FileDescriptor

var file_video_sfu_event_v1_events_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x1a, 0x20, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3,
	0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x73, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x63, 0x6b, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x49, 0x43, 0x45, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x67,
	0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x12, 0x6d, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x10, 0x6d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x6f, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x18, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x64, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x5f, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73,
	0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x12, 0x49, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x10,
	0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x22, 0x6b, 0x0a,
	0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x0f, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22,
	0x28, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x13, 0x49, 0x43, 0x45,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0x31, 0x0a, 0x16, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x22, 0x3b, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x38, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x06,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x61,
	0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x69, 0x64, 0x65, 0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e,
	0x42, 0x79, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x22, 0x67,
	0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x4b, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x5a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_sfu_event_v1_events_proto_rawDescOnce sync.Once
	file_video_sfu_event_v1_events_proto_rawDescData = file_video_sfu_event_v1_events_proto_rawDesc
)

func file_video_sfu_event_v1_events_proto_rawDescGZIP() []byte {
	file_video_sfu_event_v1_events_proto_rawDescOnce.Do(func() {
		file_video_sfu_event_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_sfu_event_v1_events_proto_rawDescData)
	})
	return file_video_sfu_event_v1_events_proto_rawDescData
}

var file_video_sfu_event_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_video_sfu_event_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_video_sfu_event_v1_events_proto_goTypes = []interface{}{
	(VideoLayerSetting_Priority)(0),  // 0: stream.video.sfu.event_v1.VideoLayerSetting.Priority
	(*Event)(nil),                    // 1: stream.video.sfu.event_v1.Event
	(*ParticipantConnected)(nil),     // 2: stream.video.sfu.event_v1.ParticipantConnected
	(*ParticipantDisconnected)(nil),  // 3: stream.video.sfu.event_v1.ParticipantDisconnected
	(*MuteStateChanged)(nil),         // 4: stream.video.sfu.event_v1.MuteStateChanged
	(*VideoQualityChanged)(nil),      // 5: stream.video.sfu.event_v1.VideoQualityChanged
	(*SubscriberOffer)(nil),          // 6: stream.video.sfu.event_v1.SubscriberOffer
	(*LocalDeviceChanged)(nil),       // 7: stream.video.sfu.event_v1.LocalDeviceChanged
	(*ICECandidateTrickle)(nil),      // 8: stream.video.sfu.event_v1.ICECandidateTrickle
	(*ConnectionQualityChanged)(nil), // 9: stream.video.sfu.event_v1.ConnectionQualityChanged
	(*DominantSpeakerChanged)(nil),   // 10: stream.video.sfu.event_v1.DominantSpeakerChanged
	(*AudioLevelChanged)(nil),        // 11: stream.video.sfu.event_v1.AudioLevelChanged
	(*AudioLevel)(nil),               // 12: stream.video.sfu.event_v1.AudioLevel
	(*AudioLayerSetting)(nil),        // 13: stream.video.sfu.event_v1.AudioLayerSetting
	(*AudioMediaRequest)(nil),        // 14: stream.video.sfu.event_v1.AudioMediaRequest
	(*AudioSender)(nil),              // 15: stream.video.sfu.event_v1.AudioSender
	(*VideoMediaRequest)(nil),        // 16: stream.video.sfu.event_v1.VideoMediaRequest
	(*VideoLayerSetting)(nil),        // 17: stream.video.sfu.event_v1.VideoLayerSetting
	(*VideoSender)(nil),              // 18: stream.video.sfu.event_v1.VideoSender
	(*ChangePublishQuality)(nil),     // 19: stream.video.sfu.event_v1.ChangePublishQuality
	(*models_v1.Call)(nil),           // 20: stream.video.sfu.models_v1.Call
	(*models_v1.Participant)(nil),    // 21: stream.video.sfu.models_v1.Participant
	(*models_v1.StreamQuality)(nil),  // 22: stream.video.sfu.models_v1.StreamQuality
	(models_v1.ConnectionQuality)(0), // 23: stream.video.sfu.models_v1.ConnectionQuality
	(*models_v1.Codec)(nil),          // 24: stream.video.sfu.models_v1.Codec
}
var file_video_sfu_event_v1_events_proto_depIdxs = []int32{
	6,  // 0: stream.video.sfu.event_v1.Event.subscriber_offer:type_name -> stream.video.sfu.event_v1.SubscriberOffer
	9,  // 1: stream.video.sfu.event_v1.Event.connection_quality_changed:type_name -> stream.video.sfu.event_v1.ConnectionQualityChanged
	11, // 2: stream.video.sfu.event_v1.Event.audio_level_changed:type_name -> stream.video.sfu.event_v1.AudioLevelChanged
	8,  // 3: stream.video.sfu.event_v1.Event.subscriber_candidate:type_name -> stream.video.sfu.event_v1.ICECandidateTrickle
	8,  // 4: stream.video.sfu.event_v1.Event.publisher_candidate:type_name -> stream.video.sfu.event_v1.ICECandidateTrickle
	19, // 5: stream.video.sfu.event_v1.Event.change_publish_quality:type_name -> stream.video.sfu.event_v1.ChangePublishQuality
	4,  // 6: stream.video.sfu.event_v1.Event.mute_state_changed:type_name -> stream.video.sfu.event_v1.MuteStateChanged
	5,  // 7: stream.video.sfu.event_v1.Event.video_quality_changed:type_name -> stream.video.sfu.event_v1.VideoQualityChanged
	2,  // 8: stream.video.sfu.event_v1.Event.participant_connected:type_name -> stream.video.sfu.event_v1.ParticipantConnected
	3,  // 9: stream.video.sfu.event_v1.Event.participant_disconnected:type_name -> stream.video.sfu.event_v1.ParticipantDisconnected
	10, // 10: stream.video.sfu.event_v1.Event.dominant_speaker_changed:type_name -> stream.video.sfu.event_v1.DominantSpeakerChanged
	7,  // 11: stream.video.sfu.event_v1.Event.local_device_change:type_name -> stream.video.sfu.event_v1.LocalDeviceChanged
	20, // 12: stream.video.sfu.event_v1.ParticipantConnected.call:type_name -> stream.video.sfu.models_v1.Call
	21, // 13: stream.video.sfu.event_v1.ParticipantConnected.participant:type_name -> stream.video.sfu.models_v1.Participant
	20, // 14: stream.video.sfu.event_v1.ParticipantDisconnected.call:type_name -> stream.video.sfu.models_v1.Call
	21, // 15: stream.video.sfu.event_v1.ParticipantDisconnected.participant:type_name -> stream.video.sfu.models_v1.Participant
	21, // 16: stream.video.sfu.event_v1.MuteStateChanged.participant:type_name -> stream.video.sfu.models_v1.Participant
	22, // 17: stream.video.sfu.event_v1.VideoQualityChanged.stream_qualities:type_name -> stream.video.sfu.models_v1.StreamQuality
	23, // 18: stream.video.sfu.event_v1.ConnectionQualityChanged.connection_quality:type_name -> stream.video.sfu.models_v1.ConnectionQuality
	12, // 19: stream.video.sfu.event_v1.AudioLevelChanged.audio_levels:type_name -> stream.video.sfu.event_v1.AudioLevel
	14, // 20: stream.video.sfu.event_v1.AudioSender.media_request:type_name -> stream.video.sfu.event_v1.AudioMediaRequest
	24, // 21: stream.video.sfu.event_v1.AudioSender.codec:type_name -> stream.video.sfu.models_v1.Codec
	13, // 22: stream.video.sfu.event_v1.AudioSender.layers:type_name -> stream.video.sfu.event_v1.AudioLayerSetting
	0,  // 23: stream.video.sfu.event_v1.VideoLayerSetting.priority:type_name -> stream.video.sfu.event_v1.VideoLayerSetting.Priority
	24, // 24: stream.video.sfu.event_v1.VideoLayerSetting.codec:type_name -> stream.video.sfu.models_v1.Codec
	16, // 25: stream.video.sfu.event_v1.VideoSender.media_request:type_name -> stream.video.sfu.event_v1.VideoMediaRequest
	24, // 26: stream.video.sfu.event_v1.VideoSender.codec:type_name -> stream.video.sfu.models_v1.Codec
	17, // 27: stream.video.sfu.event_v1.VideoSender.layers:type_name -> stream.video.sfu.event_v1.VideoLayerSetting
	15, // 28: stream.video.sfu.event_v1.ChangePublishQuality.audio_senders:type_name -> stream.video.sfu.event_v1.AudioSender
	18, // 29: stream.video.sfu.event_v1.ChangePublishQuality.video_senders:type_name -> stream.video.sfu.event_v1.VideoSender
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_video_sfu_event_v1_events_proto_init() }
func file_video_sfu_event_v1_events_proto_init() {
	if File_video_sfu_event_v1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_sfu_event_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteStateChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoQualityChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalDeviceChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICECandidateTrickle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionQualityChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DominantSpeakerChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLevelChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLayerSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoLayerSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_v1_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePublishQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_sfu_event_v1_events_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_SubscriberOffer)(nil),
		(*Event_ConnectionQualityChanged)(nil),
		(*Event_AudioLevelChanged)(nil),
		(*Event_SubscriberCandidate)(nil),
		(*Event_PublisherCandidate)(nil),
		(*Event_ChangePublishQuality)(nil),
		(*Event_MuteStateChanged)(nil),
		(*Event_VideoQualityChanged)(nil),
		(*Event_ParticipantConnected)(nil),
		(*Event_ParticipantDisconnected)(nil),
		(*Event_DominantSpeakerChanged)(nil),
		(*Event_LocalDeviceChange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_sfu_event_v1_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_sfu_event_v1_events_proto_goTypes,
		DependencyIndexes: file_video_sfu_event_v1_events_proto_depIdxs,
		EnumInfos:         file_video_sfu_event_v1_events_proto_enumTypes,
		MessageInfos:      file_video_sfu_event_v1_events_proto_msgTypes,
	}.Build()
	File_video_sfu_event_v1_events_proto = out.File
	file_video_sfu_event_v1_events_proto_rawDesc = nil
	file_video_sfu_event_v1_events_proto_goTypes = nil
	file_video_sfu_event_v1_events_proto_depIdxs = nil
}
