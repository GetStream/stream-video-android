// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/sfu/cascading_rpc/gossip.proto

package sfu_gossip_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Subscription with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscriptionMultiError, or
// nil if none found.
func (m *Subscription) ValidateAll() error {
	return m.validate(true)
}

func (m *Subscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublisherId

	// no validation rules for Rid

	// no validation rules for Coded

	if len(errors) > 0 {
		return SubscriptionMultiError(errors)
	}

	return nil
}

// SubscriptionMultiError is an error wrapping multiple validation errors
// returned by Subscription.ValidateAll() if the designated constraints aren't met.
type SubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionMultiError) AllErrors() []error { return m }

// SubscriptionValidationError is the validation error returned by
// Subscription.Validate if the designated constraints aren't met.
type SubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionValidationError) ErrorName() string { return "SubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionValidationError{}

// Validate checks the field values on Participant with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Participant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Participant with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParticipantMultiError, or
// nil if none found.
func (m *Participant) ValidateAll() error {
	return m.validate(true)
}

func (m *Participant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	for idx, item := range m.GetSubscriptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParticipantValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParticipantValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParticipantValidationError{
					field:  fmt.Sprintf("Subscriptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParticipantMultiError(errors)
	}

	return nil
}

// ParticipantMultiError is an error wrapping multiple validation errors
// returned by Participant.ValidateAll() if the designated constraints aren't met.
type ParticipantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantMultiError) AllErrors() []error { return m }

// ParticipantValidationError is the validation error returned by
// Participant.Validate if the designated constraints aren't met.
type ParticipantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantValidationError) ErrorName() string { return "ParticipantValidationError" }

// Error satisfies the builtin error interface
func (e ParticipantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantValidationError{}

// Validate checks the field values on CallState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallStateMultiError, or nil
// if none found.
func (m *CallState) ValidateAll() error {
	return m.validate(true)
}

func (m *CallState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CallStateValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CallStateValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallStateValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Sequence

	if len(errors) > 0 {
		return CallStateMultiError(errors)
	}

	return nil
}

// CallStateMultiError is an error wrapping multiple validation errors returned
// by CallState.ValidateAll() if the designated constraints aren't met.
type CallStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallStateMultiError) AllErrors() []error { return m }

// CallStateValidationError is the validation error returned by
// CallState.Validate if the designated constraints aren't met.
type CallStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallStateValidationError) ErrorName() string { return "CallStateValidationError" }

// Error satisfies the builtin error interface
func (e CallStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallStateValidationError{}

// Validate checks the field values on JoinCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinCallRequestMultiError, or nil if none found.
func (m *JoinCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if all {
		switch v := interface{}(m.GetLocalState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinCallRequestValidationError{
					field:  "LocalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinCallRequestValidationError{
					field:  "LocalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinCallRequestValidationError{
				field:  "LocalState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinCallRequestMultiError(errors)
	}

	return nil
}

// JoinCallRequestMultiError is an error wrapping multiple validation errors
// returned by JoinCallRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinCallRequestMultiError) AllErrors() []error { return m }

// JoinCallRequestValidationError is the validation error returned by
// JoinCallRequest.Validate if the designated constraints aren't met.
type JoinCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinCallRequestValidationError) ErrorName() string { return "JoinCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinCallRequestValidationError{}

// Validate checks the field values on JoinCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinCallResponseMultiError, or nil if none found.
func (m *JoinCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocalState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "LocalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "LocalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinCallResponseValidationError{
				field:  "LocalState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinCallResponseMultiError(errors)
	}

	return nil
}

// JoinCallResponseMultiError is an error wrapping multiple validation errors
// returned by JoinCallResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinCallResponseMultiError) AllErrors() []error { return m }

// JoinCallResponseValidationError is the validation error returned by
// JoinCallResponse.Validate if the designated constraints aren't met.
type JoinCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinCallResponseValidationError) ErrorName() string { return "JoinCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinCallResponseValidationError{}

// Validate checks the field values on GetCallStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallStateRequestMultiError, or nil if none found.
func (m *GetCallStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCallStateRequestMultiError(errors)
	}

	return nil
}

// GetCallStateRequestMultiError is an error wrapping multiple validation
// errors returned by GetCallStateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCallStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallStateRequestMultiError) AllErrors() []error { return m }

// GetCallStateRequestValidationError is the validation error returned by
// GetCallStateRequest.Validate if the designated constraints aren't met.
type GetCallStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallStateRequestValidationError) ErrorName() string {
	return "GetCallStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallStateRequestValidationError{}

// Validate checks the field values on GetCallStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallStateResponseMultiError, or nil if none found.
func (m *GetCallStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocalState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallStateResponseValidationError{
					field:  "LocalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallStateResponseValidationError{
					field:  "LocalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallStateResponseValidationError{
				field:  "LocalState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallStateResponseMultiError(errors)
	}

	return nil
}

// GetCallStateResponseMultiError is an error wrapping multiple validation
// errors returned by GetCallStateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCallStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallStateResponseMultiError) AllErrors() []error { return m }

// GetCallStateResponseValidationError is the validation error returned by
// GetCallStateResponse.Validate if the designated constraints aren't met.
type GetCallStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallStateResponseValidationError) ErrorName() string {
	return "GetCallStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallStateResponseValidationError{}

// Validate checks the field values on AudioMuteChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioMuteChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioMuteChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioMuteChangedMultiError, or nil if none found.
func (m *AudioMuteChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioMuteChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AudioMuteChangedMultiError(errors)
	}

	return nil
}

// AudioMuteChangedMultiError is an error wrapping multiple validation errors
// returned by AudioMuteChanged.ValidateAll() if the designated constraints
// aren't met.
type AudioMuteChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioMuteChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioMuteChangedMultiError) AllErrors() []error { return m }

// AudioMuteChangedValidationError is the validation error returned by
// AudioMuteChanged.Validate if the designated constraints aren't met.
type AudioMuteChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioMuteChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioMuteChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioMuteChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioMuteChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioMuteChangedValidationError) ErrorName() string { return "AudioMuteChangedValidationError" }

// Error satisfies the builtin error interface
func (e AudioMuteChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioMuteChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioMuteChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioMuteChangedValidationError{}

// Validate checks the field values on Healthcheck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Healthcheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Healthcheck with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthcheckMultiError, or
// nil if none found.
func (m *Healthcheck) ValidateAll() error {
	return m.validate(true)
}

func (m *Healthcheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthcheckMultiError(errors)
	}

	return nil
}

// HealthcheckMultiError is an error wrapping multiple validation errors
// returned by Healthcheck.ValidateAll() if the designated constraints aren't met.
type HealthcheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthcheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthcheckMultiError) AllErrors() []error { return m }

// HealthcheckValidationError is the validation error returned by
// Healthcheck.Validate if the designated constraints aren't met.
type HealthcheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthcheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthcheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthcheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthcheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthcheckValidationError) ErrorName() string { return "HealthcheckValidationError" }

// Error satisfies the builtin error interface
func (e HealthcheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthcheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthcheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthcheckValidationError{}

// Validate checks the field values on VideoMuteChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoMuteChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMuteChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoMuteChangedMultiError, or nil if none found.
func (m *VideoMuteChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMuteChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VideoMuteChangedMultiError(errors)
	}

	return nil
}

// VideoMuteChangedMultiError is an error wrapping multiple validation errors
// returned by VideoMuteChanged.ValidateAll() if the designated constraints
// aren't met.
type VideoMuteChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMuteChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMuteChangedMultiError) AllErrors() []error { return m }

// VideoMuteChangedValidationError is the validation error returned by
// VideoMuteChanged.Validate if the designated constraints aren't met.
type VideoMuteChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMuteChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMuteChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMuteChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMuteChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMuteChangedValidationError) ErrorName() string { return "VideoMuteChangedValidationError" }

// Error satisfies the builtin error interface
func (e VideoMuteChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMuteChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMuteChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMuteChangedValidationError{}

// Validate checks the field values on SendEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEventRequestMultiError, or nil if none found.
func (m *SendEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	// no validation rules for Sequence

	switch m.Event.(type) {

	case *SendEventRequest_HealthCheck:

		if all {
			switch v := interface{}(m.GetHealthCheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendEventRequestValidationError{
						field:  "HealthCheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendEventRequestValidationError{
						field:  "HealthCheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendEventRequestValidationError{
					field:  "HealthCheck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendEventRequest_AudioMuteChanged:

		if all {
			switch v := interface{}(m.GetAudioMuteChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendEventRequestValidationError{
						field:  "AudioMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendEventRequestValidationError{
						field:  "AudioMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAudioMuteChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendEventRequestValidationError{
					field:  "AudioMuteChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendEventRequest_VideoMuteChanged:

		if all {
			switch v := interface{}(m.GetVideoMuteChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendEventRequestValidationError{
						field:  "VideoMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendEventRequestValidationError{
						field:  "VideoMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVideoMuteChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendEventRequestValidationError{
					field:  "VideoMuteChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendEventRequestMultiError(errors)
	}

	return nil
}

// SendEventRequestMultiError is an error wrapping multiple validation errors
// returned by SendEventRequest.ValidateAll() if the designated constraints
// aren't met.
type SendEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEventRequestMultiError) AllErrors() []error { return m }

// SendEventRequestValidationError is the validation error returned by
// SendEventRequest.Validate if the designated constraints aren't met.
type SendEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEventRequestValidationError) ErrorName() string { return "SendEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEventRequestValidationError{}

// Validate checks the field values on SendEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEventResponseMultiError, or nil if none found.
func (m *SendEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEventResponseMultiError(errors)
	}

	return nil
}

// SendEventResponseMultiError is an error wrapping multiple validation errors
// returned by SendEventResponse.ValidateAll() if the designated constraints
// aren't met.
type SendEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEventResponseMultiError) AllErrors() []error { return m }

// SendEventResponseValidationError is the validation error returned by
// SendEventResponse.Validate if the designated constraints aren't met.
type SendEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEventResponseValidationError) ErrorName() string {
	return "SendEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEventResponseValidationError{}
