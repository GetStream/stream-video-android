syntax = "proto3";

package stream.video.sfu.gossip;

option go_package = "sfu_gossip_rpc";

message Subscription {
  string publisher_id = 1;
  string rid = 2;
  string coded = 3;
}

message Participant {
  string user_id = 1;
  repeated Subscription subscriptions = 2;
}

message CallState {
  repeated Participant participants = 1;
  int64 sequence = 2;
}

message JoinCallRequest {
  string call_cid = 1;
  CallState local_state = 2;
}

message JoinCallResponse {
  repeated string sfu_addresses = 1;
  CallState local_state = 2;
}

message GetCallStateRequest {
}

message GetCallStateResponse {
  CallState local_state = 1;
}

message AudioMuteChanged {
}

message VideoMuteChanged {
}

message SendEventRequest {
  // sequence is specific to the local state of the SFU sending the event
  // receivers can use this to detect out of order delivery or lost messages
  // when that happens
  string call_cid = 1;
  int64 sequence = 2;
  oneof event {
    AudioMuteChanged audio_mute_changed = 3;
    VideoMuteChanged video_mute_changed = 4;
      // add participant (marcelo joins the call)
      // remove participant (marcelo leaves the call)
      // add publisher track (marcelo starts audio or video track)
      // remove publisher track (marcelo stops audio or video track)
      // add subscription (marcelo subscribes to tommaso high-quality track)
      // remove subscription (marcelo unsubscribes from tommaso)
      // change subscription (marcelo changes the subscription to Tommaso from high to medium)
      // audio levels - TODO: this does not change anything, its just a user event we want to forward to all clients
      // dominant speaker changed - TODO: this one is tricky because you need to analyze all audio levels from all clients,
      // perhaps sharing audio levels is enough
  }
}

message SendEventResponse {
}

// GossipRPC is used by SFUs to synchronize state for cascading
service GossipRPC {
  // JoinCall is called by an SFU that is joining an existing call
  rpc JoinCall(JoinCallRequest) returns (JoinCallResponse);

  // Every time there is a change to local state, SendEvent is used to broadcast
  // the change as a change event to all other SFU in the same call
  rpc SendEvent(SendEventRequest) returns (SendEventResponse);

  // Requests the full
  rpc GetCallState(GetCallStateRequest) returns (GetCallStateResponse);
}
