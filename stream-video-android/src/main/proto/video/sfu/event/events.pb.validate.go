// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/sfu/event/events.proto

package sfu_events

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	sfu_models "github.com/GetStream/video-proto/protobuf/video/sfu/models"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = sfu_models.PeerType(0)
)

// Validate checks the field values on SfuEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SfuEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SfuEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SfuEventMultiError, or nil
// if none found.
func (m *SfuEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *SfuEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EventPayload.(type) {

	case *SfuEvent_SubscriberOffer:

		if all {
			switch v := interface{}(m.GetSubscriberOffer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "SubscriberOffer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "SubscriberOffer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubscriberOffer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "SubscriberOffer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_PublisherAnswer:

		if all {
			switch v := interface{}(m.GetPublisherAnswer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "PublisherAnswer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "PublisherAnswer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPublisherAnswer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "PublisherAnswer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ConnectionQualityChanged:

		if all {
			switch v := interface{}(m.GetConnectionQualityChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ConnectionQualityChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ConnectionQualityChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConnectionQualityChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ConnectionQualityChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_AudioLevelChanged:

		if all {
			switch v := interface{}(m.GetAudioLevelChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "AudioLevelChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "AudioLevelChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAudioLevelChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "AudioLevelChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_IceTrickle:

		if all {
			switch v := interface{}(m.GetIceTrickle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "IceTrickle",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "IceTrickle",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIceTrickle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "IceTrickle",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ChangePublishQuality:

		if all {
			switch v := interface{}(m.GetChangePublishQuality()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ChangePublishQuality",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ChangePublishQuality",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChangePublishQuality()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ChangePublishQuality",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ParticipantJoined:

		if all {
			switch v := interface{}(m.GetParticipantJoined()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantJoined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantJoined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantJoined()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ParticipantJoined",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ParticipantLeft:

		if all {
			switch v := interface{}(m.GetParticipantLeft()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantLeft",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantLeft",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantLeft()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ParticipantLeft",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_DominantSpeakerChanged:

		if all {
			switch v := interface{}(m.GetDominantSpeakerChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "DominantSpeakerChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "DominantSpeakerChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDominantSpeakerChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "DominantSpeakerChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_JoinResponse:

		if all {
			switch v := interface{}(m.GetJoinResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "JoinResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "JoinResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJoinResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "JoinResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_HealthCheckResponse:

		if all {
			switch v := interface{}(m.GetHealthCheckResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "HealthCheckResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "HealthCheckResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_TrackPublished:

		if all {
			switch v := interface{}(m.GetTrackPublished()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "TrackPublished",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "TrackPublished",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrackPublished()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "TrackPublished",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_TrackUnpublished:

		if all {
			switch v := interface{}(m.GetTrackUnpublished()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "TrackUnpublished",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "TrackUnpublished",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrackUnpublished()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "TrackUnpublished",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SfuEventMultiError(errors)
	}

	return nil
}

// SfuEventMultiError is an error wrapping multiple validation errors returned
// by SfuEvent.ValidateAll() if the designated constraints aren't met.
type SfuEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SfuEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SfuEventMultiError) AllErrors() []error { return m }

// SfuEventValidationError is the validation error returned by
// SfuEvent.Validate if the designated constraints aren't met.
type SfuEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SfuEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SfuEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SfuEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SfuEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SfuEventValidationError) ErrorName() string { return "SfuEventValidationError" }

// Error satisfies the builtin error interface
func (e SfuEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSfuEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SfuEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SfuEventValidationError{}

// Validate checks the field values on ICETrickle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ICETrickle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ICETrickle with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ICETrickleMultiError, or
// nil if none found.
func (m *ICETrickle) ValidateAll() error {
	return m.validate(true)
}

func (m *ICETrickle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PeerType

	// no validation rules for IceCandidate

	if len(errors) > 0 {
		return ICETrickleMultiError(errors)
	}

	return nil
}

// ICETrickleMultiError is an error wrapping multiple validation errors
// returned by ICETrickle.ValidateAll() if the designated constraints aren't met.
type ICETrickleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ICETrickleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ICETrickleMultiError) AllErrors() []error { return m }

// ICETrickleValidationError is the validation error returned by
// ICETrickle.Validate if the designated constraints aren't met.
type ICETrickleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ICETrickleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ICETrickleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ICETrickleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ICETrickleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ICETrickleValidationError) ErrorName() string { return "ICETrickleValidationError" }

// Error satisfies the builtin error interface
func (e ICETrickleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sICETrickle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ICETrickleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ICETrickleValidationError{}

// Validate checks the field values on SfuRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SfuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SfuRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SfuRequestMultiError, or
// nil if none found.
func (m *SfuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SfuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.RequestPayload.(type) {

	case *SfuRequest_JoinRequest:

		if all {
			switch v := interface{}(m.GetJoinRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuRequestValidationError{
						field:  "JoinRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuRequestValidationError{
						field:  "JoinRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJoinRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuRequestValidationError{
					field:  "JoinRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuRequest_HealthCheckRequest:

		if all {
			switch v := interface{}(m.GetHealthCheckRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuRequestValidationError{
					field:  "HealthCheckRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SfuRequestMultiError(errors)
	}

	return nil
}

// SfuRequestMultiError is an error wrapping multiple validation errors
// returned by SfuRequest.ValidateAll() if the designated constraints aren't met.
type SfuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SfuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SfuRequestMultiError) AllErrors() []error { return m }

// SfuRequestValidationError is the validation error returned by
// SfuRequest.Validate if the designated constraints aren't met.
type SfuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SfuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SfuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SfuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SfuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SfuRequestValidationError) ErrorName() string { return "SfuRequestValidationError" }

// Error satisfies the builtin error interface
func (e SfuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSfuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SfuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SfuRequestValidationError{}

// Validate checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckRequestMultiError, or nil if none found.
func (m *HealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckRequestMultiError(errors)
	}

	return nil
}

// HealthCheckRequestMultiError is an error wrapping multiple validation errors
// returned by HealthCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckRequestMultiError) AllErrors() []error { return m }

// HealthCheckRequestValidationError is the validation error returned by
// HealthCheckRequest.Validate if the designated constraints aren't met.
type HealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckRequestValidationError) ErrorName() string {
	return "HealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckRequestValidationError{}

// Validate checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthCheckResponseMultiError, or nil if none found.
func (m *HealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthCheckResponseMultiError(errors)
	}

	return nil
}

// HealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by HealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckResponseMultiError) AllErrors() []error { return m }

// HealthCheckResponseValidationError is the validation error returned by
// HealthCheckResponse.Validate if the designated constraints aren't met.
type HealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckResponseValidationError) ErrorName() string {
	return "HealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckResponseValidationError{}

// Validate checks the field values on TrackPublished with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrackPublished) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackPublished with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrackPublishedMultiError,
// or nil if none found.
func (m *TrackPublished) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackPublished) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	// no validation rules for Type

	if len(errors) > 0 {
		return TrackPublishedMultiError(errors)
	}

	return nil
}

// TrackPublishedMultiError is an error wrapping multiple validation errors
// returned by TrackPublished.ValidateAll() if the designated constraints
// aren't met.
type TrackPublishedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackPublishedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackPublishedMultiError) AllErrors() []error { return m }

// TrackPublishedValidationError is the validation error returned by
// TrackPublished.Validate if the designated constraints aren't met.
type TrackPublishedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackPublishedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackPublishedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackPublishedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackPublishedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackPublishedValidationError) ErrorName() string { return "TrackPublishedValidationError" }

// Error satisfies the builtin error interface
func (e TrackPublishedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackPublished.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackPublishedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackPublishedValidationError{}

// Validate checks the field values on TrackUnpublished with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrackUnpublished) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrackUnpublished with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrackUnpublishedMultiError, or nil if none found.
func (m *TrackUnpublished) ValidateAll() error {
	return m.validate(true)
}

func (m *TrackUnpublished) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	// no validation rules for Type

	if len(errors) > 0 {
		return TrackUnpublishedMultiError(errors)
	}

	return nil
}

// TrackUnpublishedMultiError is an error wrapping multiple validation errors
// returned by TrackUnpublished.ValidateAll() if the designated constraints
// aren't met.
type TrackUnpublishedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrackUnpublishedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrackUnpublishedMultiError) AllErrors() []error { return m }

// TrackUnpublishedValidationError is the validation error returned by
// TrackUnpublished.Validate if the designated constraints aren't met.
type TrackUnpublishedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrackUnpublishedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrackUnpublishedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrackUnpublishedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrackUnpublishedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrackUnpublishedValidationError) ErrorName() string { return "TrackUnpublishedValidationError" }

// Error satisfies the builtin error interface
func (e TrackUnpublishedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrackUnpublished.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrackUnpublishedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrackUnpublishedValidationError{}

// Validate checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinRequestMultiError, or
// nil if none found.
func (m *JoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for SessionId

	// no validation rules for SubscriberSdp

	if len(errors) > 0 {
		return JoinRequestMultiError(errors)
	}

	return nil
}

// JoinRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRequest.ValidateAll() if the designated constraints aren't met.
type JoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRequestMultiError) AllErrors() []error { return m }

// JoinRequestValidationError is the validation error returned by
// JoinRequest.Validate if the designated constraints aren't met.
type JoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestValidationError) ErrorName() string { return "JoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestValidationError{}

// Validate checks the field values on JoinResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinResponseMultiError, or
// nil if none found.
func (m *JoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCallState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinResponseValidationError{
				field:  "CallState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinResponseMultiError(errors)
	}

	return nil
}

// JoinResponseMultiError is an error wrapping multiple validation errors
// returned by JoinResponse.ValidateAll() if the designated constraints aren't met.
type JoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinResponseMultiError) AllErrors() []error { return m }

// JoinResponseValidationError is the validation error returned by
// JoinResponse.Validate if the designated constraints aren't met.
type JoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinResponseValidationError) ErrorName() string { return "JoinResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinResponseValidationError{}

// Validate checks the field values on ParticipantJoined with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParticipantJoined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantJoined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantJoinedMultiError, or nil if none found.
func (m *ParticipantJoined) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantJoined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantJoinedValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantJoinedMultiError(errors)
	}

	return nil
}

// ParticipantJoinedMultiError is an error wrapping multiple validation errors
// returned by ParticipantJoined.ValidateAll() if the designated constraints
// aren't met.
type ParticipantJoinedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantJoinedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantJoinedMultiError) AllErrors() []error { return m }

// ParticipantJoinedValidationError is the validation error returned by
// ParticipantJoined.Validate if the designated constraints aren't met.
type ParticipantJoinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantJoinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantJoinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantJoinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantJoinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantJoinedValidationError) ErrorName() string {
	return "ParticipantJoinedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantJoinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantJoined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantJoinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantJoinedValidationError{}

// Validate checks the field values on ParticipantLeft with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParticipantLeft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantLeft with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantLeftMultiError, or nil if none found.
func (m *ParticipantLeft) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantLeft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantLeftValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantLeftMultiError(errors)
	}

	return nil
}

// ParticipantLeftMultiError is an error wrapping multiple validation errors
// returned by ParticipantLeft.ValidateAll() if the designated constraints
// aren't met.
type ParticipantLeftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantLeftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantLeftMultiError) AllErrors() []error { return m }

// ParticipantLeftValidationError is the validation error returned by
// ParticipantLeft.Validate if the designated constraints aren't met.
type ParticipantLeftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantLeftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantLeftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantLeftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantLeftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantLeftValidationError) ErrorName() string { return "ParticipantLeftValidationError" }

// Error satisfies the builtin error interface
func (e ParticipantLeftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantLeft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantLeftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantLeftValidationError{}

// Validate checks the field values on SubscriberOffer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscriberOffer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriberOffer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriberOfferMultiError, or nil if none found.
func (m *SubscriberOffer) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriberOffer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IceRestart

	// no validation rules for Sdp

	if len(errors) > 0 {
		return SubscriberOfferMultiError(errors)
	}

	return nil
}

// SubscriberOfferMultiError is an error wrapping multiple validation errors
// returned by SubscriberOffer.ValidateAll() if the designated constraints
// aren't met.
type SubscriberOfferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriberOfferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriberOfferMultiError) AllErrors() []error { return m }

// SubscriberOfferValidationError is the validation error returned by
// SubscriberOffer.Validate if the designated constraints aren't met.
type SubscriberOfferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriberOfferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriberOfferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriberOfferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriberOfferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriberOfferValidationError) ErrorName() string { return "SubscriberOfferValidationError" }

// Error satisfies the builtin error interface
func (e SubscriberOfferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriberOffer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriberOfferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriberOfferValidationError{}

// Validate checks the field values on PublisherAnswer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublisherAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublisherAnswer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublisherAnswerMultiError, or nil if none found.
func (m *PublisherAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *PublisherAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sdp

	if len(errors) > 0 {
		return PublisherAnswerMultiError(errors)
	}

	return nil
}

// PublisherAnswerMultiError is an error wrapping multiple validation errors
// returned by PublisherAnswer.ValidateAll() if the designated constraints
// aren't met.
type PublisherAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherAnswerMultiError) AllErrors() []error { return m }

// PublisherAnswerValidationError is the validation error returned by
// PublisherAnswer.Validate if the designated constraints aren't met.
type PublisherAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherAnswerValidationError) ErrorName() string { return "PublisherAnswerValidationError" }

// Error satisfies the builtin error interface
func (e PublisherAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisherAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherAnswerValidationError{}

// Validate checks the field values on ConnectionQualityChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectionQualityChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionQualityChanged with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionQualityChangedMultiError, or nil if none found.
func (m *ConnectionQualityChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionQualityChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	// no validation rules for ConnectionQuality

	if len(errors) > 0 {
		return ConnectionQualityChangedMultiError(errors)
	}

	return nil
}

// ConnectionQualityChangedMultiError is an error wrapping multiple validation
// errors returned by ConnectionQualityChanged.ValidateAll() if the designated
// constraints aren't met.
type ConnectionQualityChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionQualityChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionQualityChangedMultiError) AllErrors() []error { return m }

// ConnectionQualityChangedValidationError is the validation error returned by
// ConnectionQualityChanged.Validate if the designated constraints aren't met.
type ConnectionQualityChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionQualityChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionQualityChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionQualityChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionQualityChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionQualityChangedValidationError) ErrorName() string {
	return "ConnectionQualityChangedValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionQualityChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionQualityChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionQualityChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionQualityChangedValidationError{}

// Validate checks the field values on DominantSpeakerChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DominantSpeakerChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DominantSpeakerChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DominantSpeakerChangedMultiError, or nil if none found.
func (m *DominantSpeakerChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *DominantSpeakerChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	if len(errors) > 0 {
		return DominantSpeakerChangedMultiError(errors)
	}

	return nil
}

// DominantSpeakerChangedMultiError is an error wrapping multiple validation
// errors returned by DominantSpeakerChanged.ValidateAll() if the designated
// constraints aren't met.
type DominantSpeakerChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DominantSpeakerChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DominantSpeakerChangedMultiError) AllErrors() []error { return m }

// DominantSpeakerChangedValidationError is the validation error returned by
// DominantSpeakerChanged.Validate if the designated constraints aren't met.
type DominantSpeakerChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DominantSpeakerChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DominantSpeakerChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DominantSpeakerChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DominantSpeakerChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DominantSpeakerChangedValidationError) ErrorName() string {
	return "DominantSpeakerChangedValidationError"
}

// Error satisfies the builtin error interface
func (e DominantSpeakerChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDominantSpeakerChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DominantSpeakerChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DominantSpeakerChangedValidationError{}

// Validate checks the field values on AudioLevel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AudioLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioLevel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AudioLevelMultiError, or
// nil if none found.
func (m *AudioLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	// no validation rules for Level

	if len(errors) > 0 {
		return AudioLevelMultiError(errors)
	}

	return nil
}

// AudioLevelMultiError is an error wrapping multiple validation errors
// returned by AudioLevel.ValidateAll() if the designated constraints aren't met.
type AudioLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioLevelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioLevelMultiError) AllErrors() []error { return m }

// AudioLevelValidationError is the validation error returned by
// AudioLevel.Validate if the designated constraints aren't met.
type AudioLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioLevelValidationError) ErrorName() string { return "AudioLevelValidationError" }

// Error satisfies the builtin error interface
func (e AudioLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioLevelValidationError{}

// Validate checks the field values on AudioLevelChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioLevelChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioLevelChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioLevelChangedMultiError, or nil if none found.
func (m *AudioLevelChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioLevelChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAudioLevels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AudioLevelChangedValidationError{
						field:  fmt.Sprintf("AudioLevels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AudioLevelChangedValidationError{
						field:  fmt.Sprintf("AudioLevels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AudioLevelChangedValidationError{
					field:  fmt.Sprintf("AudioLevels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AudioLevelChangedMultiError(errors)
	}

	return nil
}

// AudioLevelChangedMultiError is an error wrapping multiple validation errors
// returned by AudioLevelChanged.ValidateAll() if the designated constraints
// aren't met.
type AudioLevelChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioLevelChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioLevelChangedMultiError) AllErrors() []error { return m }

// AudioLevelChangedValidationError is the validation error returned by
// AudioLevelChanged.Validate if the designated constraints aren't met.
type AudioLevelChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioLevelChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioLevelChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioLevelChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioLevelChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioLevelChangedValidationError) ErrorName() string {
	return "AudioLevelChangedValidationError"
}

// Error satisfies the builtin error interface
func (e AudioLevelChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioLevelChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioLevelChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioLevelChangedValidationError{}

// Validate checks the field values on AudioMediaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioMediaRequestMultiError, or nil if none found.
func (m *AudioMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelCount

	if len(errors) > 0 {
		return AudioMediaRequestMultiError(errors)
	}

	return nil
}

// AudioMediaRequestMultiError is an error wrapping multiple validation errors
// returned by AudioMediaRequest.ValidateAll() if the designated constraints
// aren't met.
type AudioMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioMediaRequestMultiError) AllErrors() []error { return m }

// AudioMediaRequestValidationError is the validation error returned by
// AudioMediaRequest.Validate if the designated constraints aren't met.
type AudioMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioMediaRequestValidationError) ErrorName() string {
	return "AudioMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AudioMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioMediaRequestValidationError{}

// Validate checks the field values on AudioSender with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AudioSender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioSender with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AudioSenderMultiError, or
// nil if none found.
func (m *AudioSender) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioSender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMediaRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMediaRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AudioSenderValidationError{
				field:  "MediaRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCodec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCodec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AudioSenderValidationError{
				field:  "Codec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AudioSenderMultiError(errors)
	}

	return nil
}

// AudioSenderMultiError is an error wrapping multiple validation errors
// returned by AudioSender.ValidateAll() if the designated constraints aren't met.
type AudioSenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioSenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioSenderMultiError) AllErrors() []error { return m }

// AudioSenderValidationError is the validation error returned by
// AudioSender.Validate if the designated constraints aren't met.
type AudioSenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioSenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioSenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioSenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioSenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioSenderValidationError) ErrorName() string { return "AudioSenderValidationError" }

// Error satisfies the builtin error interface
func (e AudioSenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioSenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioSenderValidationError{}

// Validate checks the field values on VideoMediaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoMediaRequestMultiError, or nil if none found.
func (m *VideoMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdealHeight

	// no validation rules for IdealWidth

	// no validation rules for IdealFrameRate

	if len(errors) > 0 {
		return VideoMediaRequestMultiError(errors)
	}

	return nil
}

// VideoMediaRequestMultiError is an error wrapping multiple validation errors
// returned by VideoMediaRequest.ValidateAll() if the designated constraints
// aren't met.
type VideoMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMediaRequestMultiError) AllErrors() []error { return m }

// VideoMediaRequestValidationError is the validation error returned by
// VideoMediaRequest.Validate if the designated constraints aren't met.
type VideoMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMediaRequestValidationError) ErrorName() string {
	return "VideoMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VideoMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMediaRequestValidationError{}

// Validate checks the field values on VideoLayerSetting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoLayerSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoLayerSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoLayerSettingMultiError, or nil if none found.
func (m *VideoLayerSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoLayerSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Active

	// no validation rules for MaxBitrate

	// no validation rules for ScaleResolutionDownBy

	// no validation rules for Priority

	if all {
		switch v := interface{}(m.GetCodec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoLayerSettingValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoLayerSettingValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCodec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoLayerSettingValidationError{
				field:  "Codec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VideoLayerSettingMultiError(errors)
	}

	return nil
}

// VideoLayerSettingMultiError is an error wrapping multiple validation errors
// returned by VideoLayerSetting.ValidateAll() if the designated constraints
// aren't met.
type VideoLayerSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoLayerSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoLayerSettingMultiError) AllErrors() []error { return m }

// VideoLayerSettingValidationError is the validation error returned by
// VideoLayerSetting.Validate if the designated constraints aren't met.
type VideoLayerSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoLayerSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoLayerSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoLayerSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoLayerSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoLayerSettingValidationError) ErrorName() string {
	return "VideoLayerSettingValidationError"
}

// Error satisfies the builtin error interface
func (e VideoLayerSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoLayerSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoLayerSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoLayerSettingValidationError{}

// Validate checks the field values on VideoSender with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoSender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoSender with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoSenderMultiError, or
// nil if none found.
func (m *VideoSender) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoSender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMediaRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMediaRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoSenderValidationError{
				field:  "MediaRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCodec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCodec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoSenderValidationError{
				field:  "Codec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoSenderValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoSenderValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoSenderValidationError{
					field:  fmt.Sprintf("Layers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VideoSenderMultiError(errors)
	}

	return nil
}

// VideoSenderMultiError is an error wrapping multiple validation errors
// returned by VideoSender.ValidateAll() if the designated constraints aren't met.
type VideoSenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoSenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoSenderMultiError) AllErrors() []error { return m }

// VideoSenderValidationError is the validation error returned by
// VideoSender.Validate if the designated constraints aren't met.
type VideoSenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoSenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoSenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoSenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoSenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoSenderValidationError) ErrorName() string { return "VideoSenderValidationError" }

// Error satisfies the builtin error interface
func (e VideoSenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoSenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoSenderValidationError{}

// Validate checks the field values on ChangePublishQuality with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePublishQuality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePublishQuality with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePublishQualityMultiError, or nil if none found.
func (m *ChangePublishQuality) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePublishQuality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAudioSenders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("AudioSenders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("AudioSenders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangePublishQualityValidationError{
					field:  fmt.Sprintf("AudioSenders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVideoSenders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("VideoSenders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("VideoSenders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangePublishQualityValidationError{
					field:  fmt.Sprintf("VideoSenders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangePublishQualityMultiError(errors)
	}

	return nil
}

// ChangePublishQualityMultiError is an error wrapping multiple validation
// errors returned by ChangePublishQuality.ValidateAll() if the designated
// constraints aren't met.
type ChangePublishQualityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePublishQualityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePublishQualityMultiError) AllErrors() []error { return m }

// ChangePublishQualityValidationError is the validation error returned by
// ChangePublishQuality.Validate if the designated constraints aren't met.
type ChangePublishQualityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePublishQualityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePublishQualityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePublishQualityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePublishQualityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePublishQualityValidationError) ErrorName() string {
	return "ChangePublishQualityValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePublishQualityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePublishQuality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePublishQualityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePublishQualityValidationError{}
