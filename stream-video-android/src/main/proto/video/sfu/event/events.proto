syntax = "proto3";

package stream.video.sfu.event;

import "video/sfu/models/models.proto";

option go_package = "sfu_events";
option java_multiple_files = true;
option java_outer_classname = "SfuEventsV1";
option csharp_namespace = "Stream.Video.v1.Sfu";

// SFUEvent is a message that is sent from the SFU to the client.
message SfuEvent {
  oneof event_payload {
    SubscriberOffer subscriber_offer = 1;
    PublisherAnswer publisher_answer = 2;
    ConnectionQualityChanged connection_quality_changed = 3;
    AudioLevelChanged audio_level_changed = 4;
    models.ICETrickle ice_trickle = 5;
    ChangePublishQuality change_publish_quality = 6;
    LocalDeviceChange local_device_change = 7;
    MuteStateChanged mute_state_changed = 8;
    VideoQualityChanged video_quality_changed = 9;
    ParticipantJoined participant_joined = 10;
    ParticipantLeft participant_left = 11;
    DominantSpeakerChanged dominant_speaker_changed = 12;
    JoinResponse join_response = 13;
    HealthCheckResponse health_check_response = 14;
    CallEnded call_ended = 15;
  }
}

// SfuRequest is a message that is sent from the client to the SFU.
message SfuRequest {
  oneof request_payload {
    JoinRequest join_request = 1;
    HealthCheckRequest health_check_request = 2;
  }
}

message HealthCheckRequest {
  string session_id = 1;
}

message HealthCheckResponse {
  string session_id = 1;
}

message JoinRequest {
  string token = 1;
  string session_id = 2;
  bool publish = 3;
  models.CodecSettings codec_settings = 4;
  // TODO: we should know if this is going to be
  // - publishing and subscribing, or just subscribing for future routing
}

message JoinResponse {
  models.CallState call_state = 1;
  string own_session_id = 2;
  // TODO: include full list of participants with track and audio info
}

// ParticipantJoined is fired when a user joins a call
message ParticipantJoined {
  models.Call call = 1;
  models.Participant participant = 2;
}

// ParticipantJoined is fired when a user leaves a call
message ParticipantLeft {
  models.Call call = 1;
  models.Participant participant = 2;
}

message MuteStateChanged{
  string user_id = 1;
  bool audio_muted = 2;
  bool video_muted = 3;
}

message VideoQualityChanged{
  repeated models.StreamQuality stream_qualities = 1;
}

// SubscriberOffer is sent when the SFU adds tracks to a subscription
// this usually happens when a user joins a call and starts sending video
message SubscriberOffer {
  string sdp = 1;
}

message PublisherAnswer {
  string sdp = 1;
}


message LocalDeviceChange {
  string type = 1;
}

// ICECandidateTrickle is about the ICE nonsense stuff
message ICECandidateTrickle {
  string candidate = 1;
}

// ConnectionQuality is sent to inform about connection quality changes
// eg. thierry's connection is not good -> render a red icon Zoom style
message ConnectionQualityChanged {
  string user_id = 1;
  models.ConnectionQuality connection_quality = 2;
}

// DominantSpeakerChanged is sent by the SFU to notify when there is a new dominant speaker in the call
message DominantSpeakerChanged {
  string user_id = 1;
}

// AudioLevelChanged is sent by the SFU to notify about audio levels by user
message AudioLevelChanged {
  repeated AudioLevel audio_levels = 1;
}

message CallEnded {
  string message = 1;
}

message AudioLevel{
  string user_id = 1;
  // 0.0 means complete silence, 1.0 loudest
  float level = 2;
}

message AudioLayerSetting {

}

message AudioMediaRequest {
  int32 channel_count = 1;
}

message AudioSender {
  AudioMediaRequest media_request = 1;
  models.Codec codec = 2;
  repeated AudioLayerSetting layers = 3;
}

message VideoMediaRequest {
  int32 ideal_height = 1;
  int32 ideal_width = 2;
  int32 ideal_frame_rate = 3;

}


message VideoLayerSetting {
  string name = 1;
  bool active = 2;
  int32 max_bitrate = 3;
  float scale_resolution_down_by = 4;
  enum Priority {
    PRIORITY_HIGH_UNSPECIFIED = 0;
    PRIORITY_LOW = 1;
    PRIORITY_MEDIUM = 2;
    PRIORITY_VERY_LOW = 3;
  }
  Priority priority = 5;
  models.Codec codec = 6;
}

message VideoSender {
  VideoMediaRequest media_request = 1;
  models.Codec codec = 2;
  repeated VideoLayerSetting layers = 3;
}

// sent to users when they need to change the quality of their video
message ChangePublishQuality {
  repeated AudioSender audio_senders = 1;
  repeated VideoSender video_senders = 2;
}
