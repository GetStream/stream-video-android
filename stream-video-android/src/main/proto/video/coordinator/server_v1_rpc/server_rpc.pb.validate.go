// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/server_v1_rpc/server_rpc.proto

package server_v1_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppRequestMultiError, or
// nil if none found.
func (m *GetAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppRequestMultiError(errors)
	}

	return nil
}

// GetAppRequestMultiError is an error wrapping multiple validation errors
// returned by GetAppRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppRequestMultiError) AllErrors() []error { return m }

// GetAppRequestValidationError is the validation error returned by
// GetAppRequest.Validate if the designated constraints aren't met.
type GetAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppRequestValidationError) ErrorName() string { return "GetAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppRequestValidationError{}

// Validate checks the field values on GetAppResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAppResponseMultiError,
// or nil if none found.
func (m *GetAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAppResponseMultiError(errors)
	}

	return nil
}

// GetAppResponseMultiError is an error wrapping multiple validation errors
// returned by GetAppResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppResponseMultiError) AllErrors() []error { return m }

// GetAppResponseValidationError is the validation error returned by
// GetAppResponse.Validate if the designated constraints aren't met.
type GetAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppResponseValidationError) ErrorName() string { return "GetAppResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppResponseValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppRequestMultiError, or nil if none found.
func (m *UpdateAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppRequestValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppRequestValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppRequestValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAppRequestMultiError(errors)
	}

	return nil
}

// UpdateAppRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAppRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppRequestMultiError) AllErrors() []error { return m }

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on UpdateAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppResponseMultiError, or nil if none found.
func (m *UpdateAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppResponseValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAppResponseMultiError(errors)
	}

	return nil
}

// UpdateAppResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateAppResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppResponseMultiError) AllErrors() []error { return m }

// UpdateAppResponseValidationError is the validation error returned by
// UpdateAppResponse.Validate if the designated constraints aren't met.
type UpdateAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppResponseValidationError) ErrorName() string {
	return "UpdateAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppResponseValidationError{}

// Validate checks the field values on PushProviderInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushProviderInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushProviderInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushProviderInputMultiError, or nil if none found.
func (m *PushProviderInput) ValidateAll() error {
	return m.validate(true)
}

func (m *PushProviderInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch m.Credentials.(type) {

	case *PushProviderInput_Apn:

		if all {
			switch v := interface{}(m.GetApn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Apn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Apn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderInputValidationError{
					field:  "Apn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushProviderInput_Firebase:

		if all {
			switch v := interface{}(m.GetFirebase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Firebase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Firebase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFirebase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderInputValidationError{
					field:  "Firebase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushProviderInput_Huawei:

		if all {
			switch v := interface{}(m.GetHuawei()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Huawei",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Huawei",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHuawei()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderInputValidationError{
					field:  "Huawei",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushProviderInput_Xiaomi:

		if all {
			switch v := interface{}(m.GetXiaomi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Xiaomi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderInputValidationError{
						field:  "Xiaomi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetXiaomi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderInputValidationError{
					field:  "Xiaomi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PushProviderInputMultiError(errors)
	}

	return nil
}

// PushProviderInputMultiError is an error wrapping multiple validation errors
// returned by PushProviderInput.ValidateAll() if the designated constraints
// aren't met.
type PushProviderInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushProviderInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushProviderInputMultiError) AllErrors() []error { return m }

// PushProviderInputValidationError is the validation error returned by
// PushProviderInput.Validate if the designated constraints aren't met.
type PushProviderInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushProviderInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushProviderInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushProviderInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushProviderInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushProviderInputValidationError) ErrorName() string {
	return "PushProviderInputValidationError"
}

// Error satisfies the builtin error interface
func (e PushProviderInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushProviderInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushProviderInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushProviderInputValidationError{}

// Validate checks the field values on CreatePushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushProviderRequestMultiError, or nil if none found.
func (m *CreatePushProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePushProviderRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePushProviderRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePushProviderRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePushProviderRequestMultiError(errors)
	}

	return nil
}

// CreatePushProviderRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePushProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePushProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushProviderRequestMultiError) AllErrors() []error { return m }

// CreatePushProviderRequestValidationError is the validation error returned by
// CreatePushProviderRequest.Validate if the designated constraints aren't met.
type CreatePushProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushProviderRequestValidationError) ErrorName() string {
	return "CreatePushProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushProviderRequestValidationError{}

// Validate checks the field values on CreatePushProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushProviderResponseMultiError, or nil if none found.
func (m *CreatePushProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePushProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePushProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePushProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePushProviderResponseMultiError(errors)
	}

	return nil
}

// CreatePushProviderResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePushProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePushProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushProviderResponseMultiError) AllErrors() []error { return m }

// CreatePushProviderResponseValidationError is the validation error returned
// by CreatePushProviderResponse.Validate if the designated constraints aren't met.
type CreatePushProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushProviderResponseValidationError) ErrorName() string {
	return "CreatePushProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushProviderResponseValidationError{}

// Validate checks the field values on GetPushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushProviderRequestMultiError, or nil if none found.
func (m *GetPushProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPushProviderRequestMultiError(errors)
	}

	return nil
}

// GetPushProviderRequestMultiError is an error wrapping multiple validation
// errors returned by GetPushProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPushProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushProviderRequestMultiError) AllErrors() []error { return m }

// GetPushProviderRequestValidationError is the validation error returned by
// GetPushProviderRequest.Validate if the designated constraints aren't met.
type GetPushProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushProviderRequestValidationError) ErrorName() string {
	return "GetPushProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushProviderRequestValidationError{}

// Validate checks the field values on GetPushProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushProviderResponseMultiError, or nil if none found.
func (m *GetPushProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPushProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPushProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPushProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPushProviderResponseMultiError(errors)
	}

	return nil
}

// GetPushProviderResponseMultiError is an error wrapping multiple validation
// errors returned by GetPushProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPushProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushProviderResponseMultiError) AllErrors() []error { return m }

// GetPushProviderResponseValidationError is the validation error returned by
// GetPushProviderResponse.Validate if the designated constraints aren't met.
type GetPushProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushProviderResponseValidationError) ErrorName() string {
	return "GetPushProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushProviderResponseValidationError{}

// Validate checks the field values on QueryPushProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPushProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPushProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPushProvidersRequestMultiError, or nil if none found.
func (m *QueryPushProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPushProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryPushProvidersRequestMultiError(errors)
	}

	return nil
}

// QueryPushProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by QueryPushProvidersRequest.ValidateAll() if the
// designated constraints aren't met.
type QueryPushProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPushProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPushProvidersRequestMultiError) AllErrors() []error { return m }

// QueryPushProvidersRequestValidationError is the validation error returned by
// QueryPushProvidersRequest.Validate if the designated constraints aren't met.
type QueryPushProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPushProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPushProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPushProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPushProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPushProvidersRequestValidationError) ErrorName() string {
	return "QueryPushProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPushProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPushProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPushProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPushProvidersRequestValidationError{}

// Validate checks the field values on QueryPushProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPushProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPushProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPushProvidersResponseMultiError, or nil if none found.
func (m *QueryPushProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPushProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryPushProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryPushProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryPushProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryPushProvidersResponseMultiError(errors)
	}

	return nil
}

// QueryPushProvidersResponseMultiError is an error wrapping multiple
// validation errors returned by QueryPushProvidersResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryPushProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPushProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPushProvidersResponseMultiError) AllErrors() []error { return m }

// QueryPushProvidersResponseValidationError is the validation error returned
// by QueryPushProvidersResponse.Validate if the designated constraints aren't met.
type QueryPushProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPushProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPushProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPushProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPushProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPushProvidersResponseValidationError) ErrorName() string {
	return "QueryPushProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPushProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPushProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPushProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPushProvidersResponseValidationError{}

// Validate checks the field values on UpdatePushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushProviderRequestMultiError, or nil if none found.
func (m *UpdatePushProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePushProviderRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePushProviderRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePushProviderRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePushProviderRequestMultiError(errors)
	}

	return nil
}

// UpdatePushProviderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePushProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePushProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushProviderRequestMultiError) AllErrors() []error { return m }

// UpdatePushProviderRequestValidationError is the validation error returned by
// UpdatePushProviderRequest.Validate if the designated constraints aren't met.
type UpdatePushProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushProviderRequestValidationError) ErrorName() string {
	return "UpdatePushProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushProviderRequestValidationError{}

// Validate checks the field values on UpdatePushProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushProviderResponseMultiError, or nil if none found.
func (m *UpdatePushProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePushProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePushProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePushProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePushProviderResponseMultiError(errors)
	}

	return nil
}

// UpdatePushProviderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePushProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePushProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushProviderResponseMultiError) AllErrors() []error { return m }

// UpdatePushProviderResponseValidationError is the validation error returned
// by UpdatePushProviderResponse.Validate if the designated constraints aren't met.
type UpdatePushProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushProviderResponseValidationError) ErrorName() string {
	return "UpdatePushProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushProviderResponseValidationError{}

// Validate checks the field values on DeletePushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushProviderRequestMultiError, or nil if none found.
func (m *DeletePushProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePushProviderRequestMultiError(errors)
	}

	return nil
}

// DeletePushProviderRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePushProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type DeletePushProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushProviderRequestMultiError) AllErrors() []error { return m }

// DeletePushProviderRequestValidationError is the validation error returned by
// DeletePushProviderRequest.Validate if the designated constraints aren't met.
type DeletePushProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushProviderRequestValidationError) ErrorName() string {
	return "DeletePushProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushProviderRequestValidationError{}

// Validate checks the field values on DeletePushProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushProviderResponseMultiError, or nil if none found.
func (m *DeletePushProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePushProviderResponseMultiError(errors)
	}

	return nil
}

// DeletePushProviderResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePushProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type DeletePushProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushProviderResponseMultiError) AllErrors() []error { return m }

// DeletePushProviderResponseValidationError is the validation error returned
// by DeletePushProviderResponse.Validate if the designated constraints aren't met.
type DeletePushProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushProviderResponseValidationError) ErrorName() string {
	return "DeletePushProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushProviderResponseValidationError{}

// Validate checks the field values on DeleteCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallTypeRequestMultiError, or nil if none found.
func (m *DeleteCallTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteCallTypeRequestMultiError(errors)
	}

	return nil
}

// DeleteCallTypeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCallTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCallTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallTypeRequestMultiError) AllErrors() []error { return m }

// DeleteCallTypeRequestValidationError is the validation error returned by
// DeleteCallTypeRequest.Validate if the designated constraints aren't met.
type DeleteCallTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallTypeRequestValidationError) ErrorName() string {
	return "DeleteCallTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallTypeRequestValidationError{}

// Validate checks the field values on DeleteCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallTypeResponseMultiError, or nil if none found.
func (m *DeleteCallTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCallTypeResponseMultiError(errors)
	}

	return nil
}

// DeleteCallTypeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCallTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCallTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallTypeResponseMultiError) AllErrors() []error { return m }

// DeleteCallTypeResponseValidationError is the validation error returned by
// DeleteCallTypeResponse.Validate if the designated constraints aren't met.
type DeleteCallTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallTypeResponseValidationError) ErrorName() string {
	return "DeleteCallTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallTypeResponseValidationError{}

// Validate checks the field values on CreateCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCallTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallTypeRequestMultiError, or nil if none found.
func (m *CreateCallTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallTypeRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallTypeRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallTypeRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCallTypeRequestMultiError(errors)
	}

	return nil
}

// CreateCallTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCallTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCallTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallTypeRequestMultiError) AllErrors() []error { return m }

// CreateCallTypeRequestValidationError is the validation error returned by
// CreateCallTypeRequest.Validate if the designated constraints aren't met.
type CreateCallTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallTypeRequestValidationError) ErrorName() string {
	return "CreateCallTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallTypeRequestValidationError{}

// Validate checks the field values on CreateCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCallTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallTypeResponseMultiError, or nil if none found.
func (m *CreateCallTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCallType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallTypeResponseValidationError{
				field:  "CallType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCallTypeResponseMultiError(errors)
	}

	return nil
}

// CreateCallTypeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCallTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCallTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallTypeResponseMultiError) AllErrors() []error { return m }

// CreateCallTypeResponseValidationError is the validation error returned by
// CreateCallTypeResponse.Validate if the designated constraints aren't met.
type CreateCallTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallTypeResponseValidationError) ErrorName() string {
	return "CreateCallTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallTypeResponseValidationError{}

// Validate checks the field values on GetCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallTypeRequestMultiError, or nil if none found.
func (m *GetCallTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetCallTypeRequestMultiError(errors)
	}

	return nil
}

// GetCallTypeRequestMultiError is an error wrapping multiple validation errors
// returned by GetCallTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCallTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallTypeRequestMultiError) AllErrors() []error { return m }

// GetCallTypeRequestValidationError is the validation error returned by
// GetCallTypeRequest.Validate if the designated constraints aren't met.
type GetCallTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallTypeRequestValidationError) ErrorName() string {
	return "GetCallTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallTypeRequestValidationError{}

// Validate checks the field values on GetCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallTypeResponseMultiError, or nil if none found.
func (m *GetCallTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCallType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallTypeResponseValidationError{
				field:  "CallType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallTypeResponseMultiError(errors)
	}

	return nil
}

// GetCallTypeResponseMultiError is an error wrapping multiple validation
// errors returned by GetCallTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCallTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallTypeResponseMultiError) AllErrors() []error { return m }

// GetCallTypeResponseValidationError is the validation error returned by
// GetCallTypeResponse.Validate if the designated constraints aren't met.
type GetCallTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallTypeResponseValidationError) ErrorName() string {
	return "GetCallTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallTypeResponseValidationError{}

// Validate checks the field values on QueryCallTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCallTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCallTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCallTypesRequestMultiError, or nil if none found.
func (m *QueryCallTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCallTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryCallTypesRequestMultiError(errors)
	}

	return nil
}

// QueryCallTypesRequestMultiError is an error wrapping multiple validation
// errors returned by QueryCallTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryCallTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCallTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCallTypesRequestMultiError) AllErrors() []error { return m }

// QueryCallTypesRequestValidationError is the validation error returned by
// QueryCallTypesRequest.Validate if the designated constraints aren't met.
type QueryCallTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCallTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCallTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCallTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCallTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCallTypesRequestValidationError) ErrorName() string {
	return "QueryCallTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCallTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCallTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCallTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCallTypesRequestValidationError{}

// Validate checks the field values on QueryCallTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCallTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCallTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCallTypesResponseMultiError, or nil if none found.
func (m *QueryCallTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCallTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCallTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryCallTypesResponseValidationError{
						field:  fmt.Sprintf("CallTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryCallTypesResponseValidationError{
						field:  fmt.Sprintf("CallTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryCallTypesResponseValidationError{
					field:  fmt.Sprintf("CallTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryCallTypesResponseMultiError(errors)
	}

	return nil
}

// QueryCallTypesResponseMultiError is an error wrapping multiple validation
// errors returned by QueryCallTypesResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryCallTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCallTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCallTypesResponseMultiError) AllErrors() []error { return m }

// QueryCallTypesResponseValidationError is the validation error returned by
// QueryCallTypesResponse.Validate if the designated constraints aren't met.
type QueryCallTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCallTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCallTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCallTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCallTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCallTypesResponseValidationError) ErrorName() string {
	return "QueryCallTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCallTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCallTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCallTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCallTypesResponseValidationError{}

// Validate checks the field values on UpdateCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallTypeRequestMultiError, or nil if none found.
func (m *UpdateCallTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCallTypeRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCallTypeRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCallTypeRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCallTypeRequestMultiError(errors)
	}

	return nil
}

// UpdateCallTypeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCallTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCallTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallTypeRequestMultiError) AllErrors() []error { return m }

// UpdateCallTypeRequestValidationError is the validation error returned by
// UpdateCallTypeRequest.Validate if the designated constraints aren't met.
type UpdateCallTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallTypeRequestValidationError) ErrorName() string {
	return "UpdateCallTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallTypeRequestValidationError{}

// Validate checks the field values on UpdateCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallTypeResponseMultiError, or nil if none found.
func (m *UpdateCallTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCallType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCallTypeResponseValidationError{
				field:  "CallType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCallTypeResponseMultiError(errors)
	}

	return nil
}

// UpdateCallTypeResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCallTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCallTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallTypeResponseMultiError) AllErrors() []error { return m }

// UpdateCallTypeResponseValidationError is the validation error returned by
// UpdateCallTypeResponse.Validate if the designated constraints aren't met.
type UpdateCallTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallTypeResponseValidationError) ErrorName() string {
	return "UpdateCallTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallTypeResponseValidationError{}

// Validate checks the field values on CreateCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallRequestMultiError, or nil if none found.
func (m *CreateCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for CustomJson

	if all {
		switch v := interface{}(m.GetHlsBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "HlsBroadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "HlsBroadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHlsBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "HlsBroadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRtmp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRtmp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Rtmp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecording()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Recording",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Recording",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecording()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Recording",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Notify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCallRequestMultiError(errors)
	}

	return nil
}

// CreateCallRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCallRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallRequestMultiError) AllErrors() []error { return m }

// CreateCallRequestValidationError is the validation error returned by
// CreateCallRequest.Validate if the designated constraints aren't met.
type CreateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallRequestValidationError) ErrorName() string {
	return "CreateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallRequestValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	// no validation rules for CustomJson

	// no validation rules for Name

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateOrUpdateUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateUsersRequestMultiError, or nil if none found.
func (m *CreateOrUpdateUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrUpdateUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrUpdateUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrUpdateUsersRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for FullUpdate

	if len(errors) > 0 {
		return CreateOrUpdateUsersRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateUsersRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateUsersRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateUsersRequestValidationError is the validation error returned
// by CreateOrUpdateUsersRequest.Validate if the designated constraints aren't met.
type CreateOrUpdateUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateUsersRequestValidationError) ErrorName() string {
	return "CreateOrUpdateUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateUsersRequestValidationError{}

// Validate checks the field values on CreateOrUpdateUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateUsersResponseMultiError, or nil if none found.
func (m *CreateOrUpdateUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrUpdateUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrUpdateUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrUpdateUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrUpdateUsersResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateUsersResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateUsersResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateUsersResponseValidationError is the validation error returned
// by CreateOrUpdateUsersResponse.Validate if the designated constraints
// aren't met.
type CreateOrUpdateUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateUsersResponseValidationError) ErrorName() string {
	return "CreateOrUpdateUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateUsersResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DeleteCallHistory

	// no validation rules for DeleteRecordings

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on ExportUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExportUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserRequestMultiError, or nil if none found.
func (m *ExportUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ExportUserRequestMultiError(errors)
	}

	return nil
}

// ExportUserRequestMultiError is an error wrapping multiple validation errors
// returned by ExportUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ExportUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserRequestMultiError) AllErrors() []error { return m }

// ExportUserRequestValidationError is the validation error returned by
// ExportUserRequest.Validate if the designated constraints aren't met.
type ExportUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserRequestValidationError) ErrorName() string {
	return "ExportUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserRequestValidationError{}

// Validate checks the field values on ExportUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserResponseMultiError, or nil if none found.
func (m *ExportUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExportUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportUserResponseValidationError{
					field:  "ExportUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportUserResponseValidationError{
					field:  "ExportUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExportUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportUserResponseValidationError{
				field:  "ExportUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportUserResponseMultiError(errors)
	}

	return nil
}

// ExportUserResponseMultiError is an error wrapping multiple validation errors
// returned by ExportUserResponse.ValidateAll() if the designated constraints
// aren't met.
type ExportUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserResponseMultiError) AllErrors() []error { return m }

// ExportUserResponseValidationError is the validation error returned by
// ExportUserResponse.Validate if the designated constraints aren't met.
type ExportUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserResponseValidationError) ErrorName() string {
	return "ExportUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserResponseValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on UserCapability with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserCapability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCapability with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserCapabilityMultiError,
// or nil if none found.
func (m *UserCapability) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCapability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for Description

	if len(errors) > 0 {
		return UserCapabilityMultiError(errors)
	}

	return nil
}

// UserCapabilityMultiError is an error wrapping multiple validation errors
// returned by UserCapability.ValidateAll() if the designated constraints
// aren't met.
type UserCapabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCapabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCapabilityMultiError) AllErrors() []error { return m }

// UserCapabilityValidationError is the validation error returned by
// UserCapability.Validate if the designated constraints aren't met.
type UserCapabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCapabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCapabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCapabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCapabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCapabilityValidationError) ErrorName() string { return "UserCapabilityValidationError" }

// Error satisfies the builtin error interface
func (e UserCapabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCapability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCapabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCapabilityValidationError{}

// Validate checks the field values on StartBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBroadcastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBroadcastRequestMultiError, or nil if none found.
func (m *StartBroadcastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBroadcastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallId

	// no validation rules for CallType

	// no validation rules for HlsBroadcast

	if all {
		switch v := interface{}(m.GetRtmp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBroadcastRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBroadcastRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRtmp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBroadcastRequestValidationError{
				field:  "Rtmp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartBroadcastRequestMultiError(errors)
	}

	return nil
}

// StartBroadcastRequestMultiError is an error wrapping multiple validation
// errors returned by StartBroadcastRequest.ValidateAll() if the designated
// constraints aren't met.
type StartBroadcastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBroadcastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBroadcastRequestMultiError) AllErrors() []error { return m }

// StartBroadcastRequestValidationError is the validation error returned by
// StartBroadcastRequest.Validate if the designated constraints aren't met.
type StartBroadcastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBroadcastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBroadcastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBroadcastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBroadcastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBroadcastRequestValidationError) ErrorName() string {
	return "StartBroadcastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartBroadcastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBroadcastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBroadcastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBroadcastRequestValidationError{}

// Validate checks the field values on StartBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBroadcastResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBroadcastResponseMultiError, or nil if none found.
func (m *StartBroadcastResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBroadcastResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBroadcastResponseValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBroadcastResponseValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBroadcastResponseValidationError{
				field:  "Broadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartBroadcastResponseMultiError(errors)
	}

	return nil
}

// StartBroadcastResponseMultiError is an error wrapping multiple validation
// errors returned by StartBroadcastResponse.ValidateAll() if the designated
// constraints aren't met.
type StartBroadcastResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBroadcastResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBroadcastResponseMultiError) AllErrors() []error { return m }

// StartBroadcastResponseValidationError is the validation error returned by
// StartBroadcastResponse.Validate if the designated constraints aren't met.
type StartBroadcastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBroadcastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBroadcastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBroadcastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBroadcastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBroadcastResponseValidationError) ErrorName() string {
	return "StartBroadcastResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartBroadcastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBroadcastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBroadcastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBroadcastResponseValidationError{}

// Validate checks the field values on StopBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBroadcastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBroadcastRequestMultiError, or nil if none found.
func (m *StopBroadcastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBroadcastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopBroadcastRequestMultiError(errors)
	}

	return nil
}

// StopBroadcastRequestMultiError is an error wrapping multiple validation
// errors returned by StopBroadcastRequest.ValidateAll() if the designated
// constraints aren't met.
type StopBroadcastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBroadcastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBroadcastRequestMultiError) AllErrors() []error { return m }

// StopBroadcastRequestValidationError is the validation error returned by
// StopBroadcastRequest.Validate if the designated constraints aren't met.
type StopBroadcastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBroadcastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBroadcastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBroadcastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBroadcastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBroadcastRequestValidationError) ErrorName() string {
	return "StopBroadcastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopBroadcastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBroadcastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBroadcastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBroadcastRequestValidationError{}

// Validate checks the field values on StopBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBroadcastResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBroadcastResponseMultiError, or nil if none found.
func (m *StopBroadcastResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBroadcastResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopBroadcastResponseMultiError(errors)
	}

	return nil
}

// StopBroadcastResponseMultiError is an error wrapping multiple validation
// errors returned by StopBroadcastResponse.ValidateAll() if the designated
// constraints aren't met.
type StopBroadcastResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBroadcastResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBroadcastResponseMultiError) AllErrors() []error { return m }

// StopBroadcastResponseValidationError is the validation error returned by
// StopBroadcastResponse.Validate if the designated constraints aren't met.
type StopBroadcastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBroadcastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBroadcastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBroadcastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBroadcastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBroadcastResponseValidationError) ErrorName() string {
	return "StopBroadcastResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopBroadcastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBroadcastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBroadcastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBroadcastResponseValidationError{}

// Validate checks the field values on StoreLatencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreLatencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreLatencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreLatencyRequestMultiError, or nil if none found.
func (m *StoreLatencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreLatencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StoreLatencyRequestMultiError(errors)
	}

	return nil
}

// StoreLatencyRequestMultiError is an error wrapping multiple validation
// errors returned by StoreLatencyRequest.ValidateAll() if the designated
// constraints aren't met.
type StoreLatencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreLatencyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreLatencyRequestMultiError) AllErrors() []error { return m }

// StoreLatencyRequestValidationError is the validation error returned by
// StoreLatencyRequest.Validate if the designated constraints aren't met.
type StoreLatencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreLatencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreLatencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreLatencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreLatencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreLatencyRequestValidationError) ErrorName() string {
	return "StoreLatencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StoreLatencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreLatencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreLatencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreLatencyRequestValidationError{}

// Validate checks the field values on StoreLatencyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreLatencyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreLatencyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreLatencyResponseMultiError, or nil if none found.
func (m *StoreLatencyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreLatencyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StoreLatencyResponseMultiError(errors)
	}

	return nil
}

// StoreLatencyResponseMultiError is an error wrapping multiple validation
// errors returned by StoreLatencyResponse.ValidateAll() if the designated
// constraints aren't met.
type StoreLatencyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreLatencyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreLatencyResponseMultiError) AllErrors() []error { return m }

// StoreLatencyResponseValidationError is the validation error returned by
// StoreLatencyResponse.Validate if the designated constraints aren't met.
type StoreLatencyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreLatencyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreLatencyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreLatencyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreLatencyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreLatencyResponseValidationError) ErrorName() string {
	return "StoreLatencyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StoreLatencyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreLatencyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreLatencyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreLatencyResponseValidationError{}

// Validate checks the field values on StartRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartRecordingRequestMultiError, or nil if none found.
func (m *StartRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return StartRecordingRequestMultiError(errors)
	}

	return nil
}

// StartRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StartRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type StartRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecordingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecordingRequestMultiError) AllErrors() []error { return m }

// StartRecordingRequestValidationError is the validation error returned by
// StartRecordingRequest.Validate if the designated constraints aren't met.
type StartRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecordingRequestValidationError) ErrorName() string {
	return "StartRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecordingRequestValidationError{}

// Validate checks the field values on StartRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartRecordingResponseMultiError, or nil if none found.
func (m *StartRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartRecordingResponseMultiError(errors)
	}

	return nil
}

// StartRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by StartRecordingResponse.ValidateAll() if the designated
// constraints aren't met.
type StartRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecordingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecordingResponseMultiError) AllErrors() []error { return m }

// StartRecordingResponseValidationError is the validation error returned by
// StartRecordingResponse.Validate if the designated constraints aren't met.
type StartRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecordingResponseValidationError) ErrorName() string {
	return "StartRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecordingResponseValidationError{}

// Validate checks the field values on StopRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopRecordingRequestMultiError, or nil if none found.
func (m *StopRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return StopRecordingRequestMultiError(errors)
	}

	return nil
}

// StopRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StopRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type StopRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopRecordingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopRecordingRequestMultiError) AllErrors() []error { return m }

// StopRecordingRequestValidationError is the validation error returned by
// StopRecordingRequest.Validate if the designated constraints aren't met.
type StopRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRecordingRequestValidationError) ErrorName() string {
	return "StopRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRecordingRequestValidationError{}

// Validate checks the field values on StopRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopRecordingResponseMultiError, or nil if none found.
func (m *StopRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for S3FileUrl

	if len(errors) > 0 {
		return StopRecordingResponseMultiError(errors)
	}

	return nil
}

// StopRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by StopRecordingResponse.ValidateAll() if the designated
// constraints aren't met.
type StopRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopRecordingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopRecordingResponseMultiError) AllErrors() []error { return m }

// StopRecordingResponseValidationError is the validation error returned by
// StopRecordingResponse.Validate if the designated constraints aren't met.
type StopRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRecordingResponseValidationError) ErrorName() string {
	return "StopRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRecordingResponseValidationError{}

// Validate checks the field values on GetRecordingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordingsRequestMultiError, or nil if none found.
func (m *GetRecordingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRecordingsRequestMultiError(errors)
	}

	return nil
}

// GetRecordingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetRecordingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRecordingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordingsRequestMultiError) AllErrors() []error { return m }

// GetRecordingsRequestValidationError is the validation error returned by
// GetRecordingsRequest.Validate if the designated constraints aren't met.
type GetRecordingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordingsRequestValidationError) ErrorName() string {
	return "GetRecordingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordingsRequestValidationError{}

// Validate checks the field values on GetRecordingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordingsResponseMultiError, or nil if none found.
func (m *GetRecordingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecordings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRecordingsResponseValidationError{
						field:  fmt.Sprintf("Recordings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRecordingsResponseValidationError{
						field:  fmt.Sprintf("Recordings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRecordingsResponseValidationError{
					field:  fmt.Sprintf("Recordings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRecordingsResponseMultiError(errors)
	}

	return nil
}

// GetRecordingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetRecordingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRecordingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordingsResponseMultiError) AllErrors() []error { return m }

// GetRecordingsResponseValidationError is the validation error returned by
// GetRecordingsResponse.Validate if the designated constraints aren't met.
type GetRecordingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordingsResponseValidationError) ErrorName() string {
	return "GetRecordingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordingsResponseValidationError{}

// Validate checks the field values on DeleteRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRecordingRequestMultiError, or nil if none found.
func (m *DeleteRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRecordingRequestMultiError(errors)
	}

	return nil
}

// DeleteRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRecordingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRecordingRequestMultiError) AllErrors() []error { return m }

// DeleteRecordingRequestValidationError is the validation error returned by
// DeleteRecordingRequest.Validate if the designated constraints aren't met.
type DeleteRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRecordingRequestValidationError) ErrorName() string {
	return "DeleteRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRecordingRequestValidationError{}

// Validate checks the field values on DeleteRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRecordingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRecordingResponseMultiError, or nil if none found.
func (m *DeleteRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRecordingResponseMultiError(errors)
	}

	return nil
}

// DeleteRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRecordingResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRecordingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRecordingResponseMultiError) AllErrors() []error { return m }

// DeleteRecordingResponseValidationError is the validation error returned by
// DeleteRecordingResponse.Validate if the designated constraints aren't met.
type DeleteRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRecordingResponseValidationError) ErrorName() string {
	return "DeleteRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRecordingResponseValidationError{}

// Validate checks the field values on QueryCallTimelineEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCallTimelineEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCallTimelineEventsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryCallTimelineEventsRequestMultiError, or nil if none found.
func (m *QueryCallTimelineEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCallTimelineEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCallTimelineEventsRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCallTimelineEventsRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCallTimelineEventsRequestValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCallTimelineEventsRequestValidationError{
					field:  "Since",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCallTimelineEventsRequestValidationError{
					field:  "Since",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCallTimelineEventsRequestValidationError{
				field:  "Since",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCallTimelineEventsRequestMultiError(errors)
	}

	return nil
}

// QueryCallTimelineEventsRequestMultiError is an error wrapping multiple
// validation errors returned by QueryCallTimelineEventsRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryCallTimelineEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCallTimelineEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCallTimelineEventsRequestMultiError) AllErrors() []error { return m }

// QueryCallTimelineEventsRequestValidationError is the validation error
// returned by QueryCallTimelineEventsRequest.Validate if the designated
// constraints aren't met.
type QueryCallTimelineEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCallTimelineEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCallTimelineEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCallTimelineEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCallTimelineEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCallTimelineEventsRequestValidationError) ErrorName() string {
	return "QueryCallTimelineEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCallTimelineEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCallTimelineEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCallTimelineEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCallTimelineEventsRequestValidationError{}

// Validate checks the field values on QueryCallTimelineEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCallTimelineEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCallTimelineEventsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryCallTimelineEventsResponseMultiError, or nil if none found.
func (m *QueryCallTimelineEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCallTimelineEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCallTimelineEventsResponseValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCallTimelineEventsResponseValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCallTimelineEventsResponseValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCallTimelineEventsResponseValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCallTimelineEventsResponseValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCallTimelineEventsResponseValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCallTimelineEventsResponseValidationError{
					field:  "Next",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCallTimelineEventsResponseValidationError{
					field:  "Next",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCallTimelineEventsResponseValidationError{
				field:  "Next",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParticipantEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryCallTimelineEventsResponseValidationError{
						field:  fmt.Sprintf("ParticipantEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryCallTimelineEventsResponseValidationError{
						field:  fmt.Sprintf("ParticipantEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryCallTimelineEventsResponseValidationError{
					field:  fmt.Sprintf("ParticipantEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryCallTimelineEventsResponseMultiError(errors)
	}

	return nil
}

// QueryCallTimelineEventsResponseMultiError is an error wrapping multiple
// validation errors returned by QueryCallTimelineEventsResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryCallTimelineEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCallTimelineEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCallTimelineEventsResponseMultiError) AllErrors() []error { return m }

// QueryCallTimelineEventsResponseValidationError is the validation error
// returned by QueryCallTimelineEventsResponse.Validate if the designated
// constraints aren't met.
type QueryCallTimelineEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCallTimelineEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCallTimelineEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCallTimelineEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCallTimelineEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCallTimelineEventsResponseValidationError) ErrorName() string {
	return "QueryCallTimelineEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCallTimelineEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCallTimelineEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCallTimelineEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCallTimelineEventsResponseValidationError{}
