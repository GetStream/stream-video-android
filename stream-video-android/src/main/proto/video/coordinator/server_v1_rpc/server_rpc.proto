syntax = "proto3";

package stream.video.coordinator.server_v1_rpc;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";
import "video/coordinator/app_v1/app.proto";
import "video/coordinator/broadcast_v1/broadcast.proto";
import "video/coordinator/call_v1/call.proto";
import "video/coordinator/permissions/permissions.proto";
import "video/coordinator/push_v1/push.proto";
import "video/coordinator/recording_v1/recording.proto";
import "video/coordinator/server_v1_rpc/envelopes.proto";
import "video/coordinator/stat_v1/stat.proto";
import "video/coordinator/user_v1/user.proto";

option go_package = "server_v1_rpc";

service ServerRPC {
  // get application settings
  rpc GetApp(GetAppRequest) returns (GetAppResponse);
  // update application settings
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse);

  rpc CreateCallType(CreateCallTypeRequest) returns (CreateCallTypeResponse);
  rpc GetCallType(GetCallTypeRequest) returns (GetCallTypeResponse);
  rpc QueryCallTypes(QueryCallTypesRequest) returns (QueryCallTypesResponse);
  rpc UpdateCallType(UpdateCallTypeRequest) returns (UpdateCallTypeResponse);
  rpc DeleteCallType(DeleteCallTypeRequest) returns (DeleteCallTypeResponse);

  // adds a new push provider
  rpc CreatePushProvider(CreatePushProviderRequest) returns (CreatePushProviderResponse);
  rpc GetPushProvider(GetPushProviderRequest) returns (GetPushProviderResponse);
  rpc QueryPushProviders(QueryPushProvidersRequest) returns (QueryPushProvidersResponse);
  // updates a push provider
  rpc UpdatePushProvider(UpdatePushProviderRequest) returns (UpdatePushProviderResponse);
  // deletes an existing push provider
  rpc DeletePushProvider(DeletePushProviderRequest) returns (DeletePushProviderResponse);

  // starts broadcast to HLS and/or RTMP, replaces existing settings if broadcasting is already started
  rpc StartBroadcast(StartBroadcastRequest) returns (StartBroadcastResponse);
  // stops broadcasting to HLS and/or RTMP
  rpc StopBroadcast(StopBroadcastRequest) returns (StopBroadcastResponse);

  rpc StartRecording(StartRecordingRequest) returns (StartRecordingResponse);
  rpc StopRecording(StopRecordingRequest) returns (StopRecordingResponse);
  rpc GetRecordings(GetRecordingsRequest) returns (GetRecordingsResponse);
  rpc DeleteRecording(DeleteRecordingRequest) returns (DeleteRecordingResponse);

  rpc QuerySessions(QuerySessionsRequest) returns (QuerySessionsResponse);
  rpc QuerySessionTimelineEvents(QuerySessionTimelineEventsRequest) returns (QuerySessionTimelineEventsResponse);

  //  rpc CreateOrUpdateCalls(CreateOrUpdateCallsRequest) returns (CreateOrUpdateCallsResponse);
  //  rpc CreateOrUpdateUsers(CreateOrUpdateUsersRequest) returns (CreateOrUpdateUsersResponse);

  // User & GDPR endpoints, delete user
  // we need to review the API contract based on Chat
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ExportUser(ExportUserRequest) returns (ExportUserResponse);

  // This requires having some sort of user/team level concept

  // endpoints needed to build a good dashboard experience
  // - listing calls and filtering based on their attributes
  // - listing users and filtering based on their attributes

  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse);
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse);
  rpc QueryRoles(QueryRolesRequest) returns (QueryRolesResponse);

  rpc QueryScopes(QueryScopesRequest) returns (QueryScopesResponse);
  rpc UpdateScope(UpdateScopeRequest) returns (UpdateScopeResponse);
  rpc ResetScope(ResetScopeRequest) returns (ResetScopeResponse);

  rpc QueryActions(QueryActionsRequest) returns (QueryActionsResponse);
  rpc QueryPermissions(QueryPermissionsRequest) returns (QueryPermissionsResponse);
}


message GetAppRequest {
}

message GetAppResponse {
  app_v1.App app = 1;
}

message UpdateAppRequest {
  app_v1.WebhookSettings webhook = 1;
}

message UpdateAppResponse {
  app_v1.App app = 1;
}

message PushProviderInput {
  string id = 1;
  oneof credentials {
    push_v1.ApnCredentials apn = 2;
    push_v1.FirebaseCredentials firebase = 3;
    push_v1.HuaweiCredentials huawei = 4;
    push_v1.XiaomiCredentials xiaomi = 5;
  }
}

message CreatePushProviderRequest {
  PushProviderInput input = 1;
}

message CreatePushProviderResponse {
  push_v1.PushProvider provider = 1;
}

message GetPushProviderRequest {
  string id = 1;
}

message GetPushProviderResponse {
  push_v1.PushProvider provider = 1;
}

message QueryPushProvidersRequest {
}

message QueryPushProvidersResponse {
  repeated push_v1.PushProvider providers = 1;
}

message UpdatePushProviderRequest {
  PushProviderInput input = 1;
}

message UpdatePushProviderResponse {
  push_v1.PushProvider provider = 1;
}

message DeletePushProviderRequest {
  string id = 1;
}

message DeletePushProviderResponse {
}

message DeleteCallTypeRequest {
  // the name of the call type
  string name = 1;
}

message DeleteCallTypeResponse {
}

message CreateCallTypeRequest {
  // the name of the call type, must be unique for the application
  string name = 1;

  call_v1.CallSettings settings = 2;
}

message CreateCallTypeResponse {
  // the call type updated
  call_v1.CallType call_type = 1;
}

message GetCallTypeRequest {
  string name = 1;
}

message GetCallTypeResponse {
  // the call type updated
  call_v1.CallType call_type = 1;
}

message QueryCallTypesRequest {
}

message QueryCallTypesResponse {
  repeated call_v1.CallType call_types = 1;
}

message UpdateCallTypeRequest {
  // the name of the call type, must be unique for the application
  string name = 1;

  call_v1.CallSettings settings = 2;
}

message UpdateCallTypeResponse {
  // the call type updated
  call_v1.CallType call_type = 1;
}

message CreateCallRequest {
  // The call type.
  // Required.
  string type = 1;

  // The call id, if not provided a unique value will be generated based on UUID v4.
  // Required.
  string id = 2;

  // Call custom data.
  bytes custom_json = 3;

  // The list of participant ids.
  repeated string participant_ids = 4;

  // HLS broadcast, overrides the default call type setting if provided.
  google.protobuf.BoolValue hls_broadcast = 6;

  // Request video to be forwarded to a list of RTMP servers.
  broadcast_v1.RTMPOptions rtmp = 7;

  // The recording option, overrides the default call type setting if provided.
  google.protobuf.BoolValue recording = 8;

  // The ring option, overrides the default call type setting if provided.
  google.protobuf.BoolValue notify = 9;
}
message CreateUserRequest {
  user_v1.UserInput user = 1;
}
// CreateOrUpdateUsersRequest runs a partial update or create on the list of users
// specify replace = true to do a hard update instead of partial update.
message CreateOrUpdateUsersRequest {
  repeated user_v1.UserInput users = 1;

  // Full update (defaults to false and does a partial update).
  bool full_update = 2;
}

message CreateOrUpdateUsersResponse {
  repeated user_v1.User users = 1;
}

message DeleteUserRequest {
  string id = 1;
  bool delete_call_history = 2;
  bool delete_recordings = 3;
}

// TODO: do we support both soft and hard delete
message ExportUserRequest {
  string id = 1;
}

message ExportUserResponse {
  server_v1_rpc.ExportUserEnvelope export_user = 1;
}

message DeleteUserResponse {
  string id = 1;
}

message CreateUserResponse {
  user_v1.User user = 1;
}

message UserCapability {
  string action = 1;
  string description = 2;
}

message StartBroadcastRequest {
  // Call type and id.
  string call_type = 1;
  string call_id = 2;

  // Toggles HLS broadcasting on/off.
  bool hls_broadcast = 3;

  // Enables rtmp broadcasting.
  broadcast_v1.RTMPOptions rtmp = 5;
}

message StartBroadcastResponse {
  broadcast_v1.Broadcast broadcast = 1;
}

message StopBroadcastRequest {
  // Call type and id.
  string call_type = 1;
  string call_id = 2;
}

message StopBroadcastResponse {
}

message StoreLatencyRequest {
}

message StoreLatencyResponse {
}

message StartRecordingRequest {
  string call_type = 1;
  string call_id = 2;
}

message StartRecordingResponse {
}

message StopRecordingRequest {
  string call_type = 1;
  string call_id = 2;
}

message StopRecordingResponse {
  string s3_file_url = 1;
}

// TODO: how do we do filtering and pagination with proto?
// here we need to be able to filter, sort and limit by
// call id, call custom attribute, call creation time, call including a user, call by type
message GetRecordingsRequest {
}

message GetRecordingsResponse {
  repeated recording_v1.Recording recordings = 1;
}

message DeleteRecordingRequest {
}

message DeleteRecordingResponse {
}

// A request message for the QuerySessions endpoint
// Specifies a subset of events to request
message QuerySessionsRequest {
  // TODO filter sessions by more than app ID
  // TODO pagination
}

message QuerySessionsResponse {
  repeated stat_v1.Session sessions = 1;
}

// A request message for the QuerySessionTimelineEvents endpoint
// Specifies a subset of events to request
message QuerySessionTimelineEventsRequest {
  // The session id.
  string session_id = 1;
  // Limits event timespan of the response. Default: 10m, max: 30m
  google.protobuf.Duration duration = 2;
  // since which date to query events. Default: time of the first event of the call
  google.protobuf.Timestamp since = 3;
}

message QuerySessionTimelineEventsResponse {
  string session_id = 1 [(validate.rules).string.min_len = 1];
  // timeline inclusive start time
  google.protobuf.Timestamp start = 2;
  // timeline inclusive end time
  google.protobuf.Timestamp end = 3;
  // contains cursor to use to request the next page (optional)
  google.protobuf.Timestamp next = 4;
  // list of events for each participant from requested time period
  repeated stat_v1.CallParticipantTimeline participant_events = 5;
}

message CreateRoleRequest {
  string name = 1;
}

message CreateRoleResponse {
  permissions.Role role = 1;
}

message DeleteRoleRequest {
  string name = 1;
}

message DeleteRoleResponse {

}

message QueryRolesRequest {
}

message QueryRolesResponse {
  repeated permissions.Role roles = 1;
}

message QueryActionsRequest {

}

message QueryActionsResponse {
  repeated permissions.Action actions = 1;
}

message QueryPermissionsRequest {
}

message QueryPermissionsResponse {
  repeated permissions.Permission permissions = 1;
}

// A request message for UpdateScope endpoint
message UpdateScopeRequest {
  // ID of the scope that is being updated
  string scope_id = 1;
  // A list of grants to set
  // To "delete" a role from the scope, empty list of permissions should be provided for such role
  map<string, permissions.Grants> grants = 2;
}

// A request message for ResetScope endpoint
message ResetScopeRequest {
  // ID of the scope that is being reset
  string scope_id = 1;
  // A list of roles to reset to defaults in the scope
  repeated string roles = 2;
}

// A response message for ResetScope endpoint
message ResetScopeResponse {
  // An updated scope
  permissions.Scope scope = 1;
}

// A response message for UpdateScope endpoint
message UpdateScopeResponse {
  // An updated scope
  permissions.Scope scope = 1;
}

message QueryScopesRequest {
}

message QueryScopesResponse {
  map<string, permissions.Scope> scopes = 1;
}
