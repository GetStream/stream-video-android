// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/stat_v1/stat.proto

package stat_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ParticipantConnected with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantConnected) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantConnected with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantConnectedMultiError, or nil if none found.
func (m *ParticipantConnected) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantConnected) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ParticipantConnectedMultiError(errors)
	}

	return nil
}

// ParticipantConnectedMultiError is an error wrapping multiple validation
// errors returned by ParticipantConnected.ValidateAll() if the designated
// constraints aren't met.
type ParticipantConnectedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantConnectedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantConnectedMultiError) AllErrors() []error { return m }

// ParticipantConnectedValidationError is the validation error returned by
// ParticipantConnected.Validate if the designated constraints aren't met.
type ParticipantConnectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantConnectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantConnectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantConnectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantConnectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantConnectedValidationError) ErrorName() string {
	return "ParticipantConnectedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantConnectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantConnected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantConnectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantConnectedValidationError{}

// Validate checks the field values on ParticipantDisconnected with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantDisconnected) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantDisconnected with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantDisconnectedMultiError, or nil if none found.
func (m *ParticipantDisconnected) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantDisconnected) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ParticipantDisconnectedMultiError(errors)
	}

	return nil
}

// ParticipantDisconnectedMultiError is an error wrapping multiple validation
// errors returned by ParticipantDisconnected.ValidateAll() if the designated
// constraints aren't met.
type ParticipantDisconnectedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantDisconnectedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantDisconnectedMultiError) AllErrors() []error { return m }

// ParticipantDisconnectedValidationError is the validation error returned by
// ParticipantDisconnected.Validate if the designated constraints aren't met.
type ParticipantDisconnectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantDisconnectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantDisconnectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantDisconnectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantDisconnectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantDisconnectedValidationError) ErrorName() string {
	return "ParticipantDisconnectedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantDisconnectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantDisconnected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantDisconnectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantDisconnectedValidationError{}

// Validate checks the field values on Freeze with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Freeze) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Freeze with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FreezeMultiError, or nil if none found.
func (m *Freeze) ValidateAll() error {
	return m.validate(true)
}

func (m *Freeze) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaType

	if utf8.RuneCountInString(m.GetPeerId()) < 1 {
		err := FreezeValidationError{
			field:  "PeerId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FreezeValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FreezeValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FreezeValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FreezeMultiError(errors)
	}

	return nil
}

// FreezeMultiError is an error wrapping multiple validation errors returned by
// Freeze.ValidateAll() if the designated constraints aren't met.
type FreezeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreezeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreezeMultiError) AllErrors() []error { return m }

// FreezeValidationError is the validation error returned by Freeze.Validate if
// the designated constraints aren't met.
type FreezeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreezeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreezeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreezeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreezeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreezeValidationError) ErrorName() string { return "FreezeValidationError" }

// Error satisfies the builtin error interface
func (e FreezeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeze.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreezeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreezeValidationError{}

// Validate checks the field values on MediaStateChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MediaStateChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MediaStateChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MediaStateChangedMultiError, or nil if none found.
func (m *MediaStateChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *MediaStateChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaType

	// no validation rules for Change

	// no validation rules for Direction

	// no validation rules for Reason

	if len(errors) > 0 {
		return MediaStateChangedMultiError(errors)
	}

	return nil
}

// MediaStateChangedMultiError is an error wrapping multiple validation errors
// returned by MediaStateChanged.ValidateAll() if the designated constraints
// aren't met.
type MediaStateChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaStateChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaStateChangedMultiError) AllErrors() []error { return m }

// MediaStateChangedValidationError is the validation error returned by
// MediaStateChanged.Validate if the designated constraints aren't met.
type MediaStateChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaStateChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaStateChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaStateChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaStateChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaStateChangedValidationError) ErrorName() string {
	return "MediaStateChangedValidationError"
}

// Error satisfies the builtin error interface
func (e MediaStateChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaStateChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaStateChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaStateChangedValidationError{}

// Validate checks the field values on TimelineEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimelineEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimelineEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimelineEventMultiError, or
// nil if none found.
func (m *TimelineEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *TimelineEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimelineEventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimelineEventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimelineEventValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Event.(type) {

	case *TimelineEvent_ParticipantConnected:

		if all {
			switch v := interface{}(m.GetParticipantConnected()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "ParticipantConnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "ParticipantConnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantConnected()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimelineEventValidationError{
					field:  "ParticipantConnected",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TimelineEvent_ParticipantDisconnected:

		if all {
			switch v := interface{}(m.GetParticipantDisconnected()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "ParticipantDisconnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "ParticipantDisconnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantDisconnected()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimelineEventValidationError{
					field:  "ParticipantDisconnected",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TimelineEvent_MediaStateChanged:

		if all {
			switch v := interface{}(m.GetMediaStateChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "MediaStateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "MediaStateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMediaStateChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimelineEventValidationError{
					field:  "MediaStateChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TimelineEvent_Freeze:

		if all {
			switch v := interface{}(m.GetFreeze()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "Freeze",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimelineEventValidationError{
						field:  "Freeze",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFreeze()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimelineEventValidationError{
					field:  "Freeze",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TimelineEventMultiError(errors)
	}

	return nil
}

// TimelineEventMultiError is an error wrapping multiple validation errors
// returned by TimelineEvent.ValidateAll() if the designated constraints
// aren't met.
type TimelineEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimelineEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimelineEventMultiError) AllErrors() []error { return m }

// TimelineEventValidationError is the validation error returned by
// TimelineEvent.Validate if the designated constraints aren't met.
type TimelineEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimelineEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimelineEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimelineEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimelineEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimelineEventValidationError) ErrorName() string { return "TimelineEventValidationError" }

// Error satisfies the builtin error interface
func (e TimelineEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimelineEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimelineEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimelineEventValidationError{}

// Validate checks the field values on CallParticipantTimeline with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CallParticipantTimeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallParticipantTimeline with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallParticipantTimelineMultiError, or nil if none found.
func (m *CallParticipantTimeline) ValidateAll() error {
	return m.validate(true)
}

func (m *CallParticipantTimeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CallParticipantTimelineValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallParticipantTimelineValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallParticipantTimelineValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallParticipantTimelineValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallParticipantTimelineValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallParticipantTimelineValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallParticipantTimelineValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CallParticipantTimelineValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CallParticipantTimelineValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallParticipantTimelineValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CallParticipantTimelineMultiError(errors)
	}

	return nil
}

// CallParticipantTimelineMultiError is an error wrapping multiple validation
// errors returned by CallParticipantTimeline.ValidateAll() if the designated
// constraints aren't met.
type CallParticipantTimelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallParticipantTimelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallParticipantTimelineMultiError) AllErrors() []error { return m }

// CallParticipantTimelineValidationError is the validation error returned by
// CallParticipantTimeline.Validate if the designated constraints aren't met.
type CallParticipantTimelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallParticipantTimelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallParticipantTimelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallParticipantTimelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallParticipantTimelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallParticipantTimelineValidationError) ErrorName() string {
	return "CallParticipantTimelineValidationError"
}

// Error satisfies the builtin error interface
func (e CallParticipantTimelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallParticipantTimeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallParticipantTimelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallParticipantTimelineValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Session) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SessionMultiError, or nil if none found.
func (m *Session) ValidateAll() error {
	return m.validate(true)
}

func (m *Session) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) < 1 {
		err := SessionValidationError{
			field:  "SessionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CallId

	// no validation rules for CallType

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SessionMultiError(errors)
	}

	return nil
}

// SessionMultiError is an error wrapping multiple validation errors returned
// by Session.ValidateAll() if the designated constraints aren't met.
type SessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionMultiError) AllErrors() []error { return m }

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}
