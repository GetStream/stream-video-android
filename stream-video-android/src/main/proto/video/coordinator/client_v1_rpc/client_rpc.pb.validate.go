// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/client_v1_rpc/client_rpc.proto

package client_v1_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCallRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCallRequestMultiError,
// or nil if none found.
func (m *GetCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if len(errors) > 0 {
		return GetCallRequestMultiError(errors)
	}

	return nil
}

// GetCallRequestMultiError is an error wrapping multiple validation errors
// returned by GetCallRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallRequestMultiError) AllErrors() []error { return m }

// GetCallRequestValidationError is the validation error returned by
// GetCallRequest.Validate if the designated constraints aren't met.
type GetCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallRequestValidationError) ErrorName() string { return "GetCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallRequestValidationError{}

// Validate checks the field values on GetCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallResponseMultiError, or nil if none found.
func (m *GetCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallResponseMultiError(errors)
	}

	return nil
}

// GetCallResponseMultiError is an error wrapping multiple validation errors
// returned by GetCallResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallResponseMultiError) AllErrors() []error { return m }

// GetCallResponseValidationError is the validation error returned by
// GetCallResponse.Validate if the designated constraints aren't met.
type GetCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallResponseValidationError) ErrorName() string { return "GetCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallResponseValidationError{}

// Validate checks the field values on MemberInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberInputMultiError, or
// nil if none found.
func (m *MemberInput) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Role

	// no validation rules for CustomJson

	if all {
		switch v := interface{}(m.GetUserInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberInputValidationError{
					field:  "UserInput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberInputValidationError{
					field:  "UserInput",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberInputValidationError{
				field:  "UserInput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberInputMultiError(errors)
	}

	return nil
}

// MemberInputMultiError is an error wrapping multiple validation errors
// returned by MemberInput.ValidateAll() if the designated constraints aren't met.
type MemberInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberInputMultiError) AllErrors() []error { return m }

// MemberInputValidationError is the validation error returned by
// MemberInput.Validate if the designated constraints aren't met.
type MemberInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberInputValidationError) ErrorName() string { return "MemberInputValidationError" }

// Error satisfies the builtin error interface
func (e MemberInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberInputValidationError{}

// Validate checks the field values on UpsertCallMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertCallMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertCallMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertCallMembersRequestMultiError, or nil if none found.
func (m *UpsertCallMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertCallMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertCallMembersRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertCallMembersRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertCallMembersRequestValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Ring

	if len(errors) > 0 {
		return UpsertCallMembersRequestMultiError(errors)
	}

	return nil
}

// UpsertCallMembersRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertCallMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertCallMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertCallMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertCallMembersRequestMultiError) AllErrors() []error { return m }

// UpsertCallMembersRequestValidationError is the validation error returned by
// UpsertCallMembersRequest.Validate if the designated constraints aren't met.
type UpsertCallMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertCallMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertCallMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertCallMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertCallMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertCallMembersRequestValidationError) ErrorName() string {
	return "UpsertCallMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertCallMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertCallMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertCallMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertCallMembersRequestValidationError{}

// Validate checks the field values on UpsertCallMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertCallMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertCallMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertCallMembersResponseMultiError, or nil if none found.
func (m *UpsertCallMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertCallMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpsertCallMembersResponseMultiError(errors)
	}

	return nil
}

// UpsertCallMembersResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertCallMembersResponse.ValidateAll() if the
// designated constraints aren't met.
type UpsertCallMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertCallMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertCallMembersResponseMultiError) AllErrors() []error { return m }

// UpsertCallMembersResponseValidationError is the validation error returned by
// UpsertCallMembersResponse.Validate if the designated constraints aren't met.
type UpsertCallMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertCallMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertCallMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertCallMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertCallMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertCallMembersResponseValidationError) ErrorName() string {
	return "UpsertCallMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertCallMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertCallMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertCallMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertCallMembersResponseValidationError{}

// Validate checks the field values on DeleteCallMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallMembersRequestMultiError, or nil if none found.
func (m *DeleteCallMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if len(errors) > 0 {
		return DeleteCallMembersRequestMultiError(errors)
	}

	return nil
}

// DeleteCallMembersRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCallMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCallMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallMembersRequestMultiError) AllErrors() []error { return m }

// DeleteCallMembersRequestValidationError is the validation error returned by
// DeleteCallMembersRequest.Validate if the designated constraints aren't met.
type DeleteCallMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallMembersRequestValidationError) ErrorName() string {
	return "DeleteCallMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallMembersRequestValidationError{}

// Validate checks the field values on DeleteCallMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallMembersResponseMultiError, or nil if none found.
func (m *DeleteCallMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCallMembersResponseMultiError(errors)
	}

	return nil
}

// DeleteCallMembersResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCallMembersResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteCallMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallMembersResponseMultiError) AllErrors() []error { return m }

// DeleteCallMembersResponseValidationError is the validation error returned by
// DeleteCallMembersResponse.Validate if the designated constraints aren't met.
type DeleteCallMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallMembersResponseValidationError) ErrorName() string {
	return "DeleteCallMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallMembersResponseValidationError{}

// Validate checks the field values on CreateCallInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCallInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallInputMultiError, or nil if none found.
func (m *CreateCallInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallInputValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallInputValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallInputValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCallInputValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCallInputValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCallInputValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Ring != nil {
		// no validation rules for Ring
	}

	if len(errors) > 0 {
		return CreateCallInputMultiError(errors)
	}

	return nil
}

// CreateCallInputMultiError is an error wrapping multiple validation errors
// returned by CreateCallInput.ValidateAll() if the designated constraints
// aren't met.
type CreateCallInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallInputMultiError) AllErrors() []error { return m }

// CreateCallInputValidationError is the validation error returned by
// CreateCallInput.Validate if the designated constraints aren't met.
type CreateCallInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallInputValidationError) ErrorName() string { return "CreateCallInputValidationError" }

// Error satisfies the builtin error interface
func (e CreateCallInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallInputValidationError{}

// Validate checks the field values on CreateCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallRequestMultiError, or nil if none found.
func (m *CreateCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return CreateCallRequestMultiError(errors)
	}

	return nil
}

// CreateCallRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCallRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallRequestMultiError) AllErrors() []error { return m }

// CreateCallRequestValidationError is the validation error returned by
// CreateCallRequest.Validate if the designated constraints aren't met.
type CreateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallRequestValidationError) ErrorName() string {
	return "CreateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallRequestValidationError{}

// Validate checks the field values on GetOrCreateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrCreateCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrCreateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrCreateCallRequestMultiError, or nil if none found.
func (m *GetOrCreateCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrCreateCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrCreateCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrCreateCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrCreateCallRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrCreateCallRequestMultiError(errors)
	}

	return nil
}

// GetOrCreateCallRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrCreateCallRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrCreateCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrCreateCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrCreateCallRequestMultiError) AllErrors() []error { return m }

// GetOrCreateCallRequestValidationError is the validation error returned by
// GetOrCreateCallRequest.Validate if the designated constraints aren't met.
type GetOrCreateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrCreateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrCreateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrCreateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrCreateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrCreateCallRequestValidationError) ErrorName() string {
	return "GetOrCreateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrCreateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrCreateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrCreateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrCreateCallRequestValidationError{}

// Validate checks the field values on JoinCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinCallRequestMultiError, or nil if none found.
func (m *JoinCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinCallRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DatacenterId

	if len(errors) > 0 {
		return JoinCallRequestMultiError(errors)
	}

	return nil
}

// JoinCallRequestMultiError is an error wrapping multiple validation errors
// returned by JoinCallRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinCallRequestMultiError) AllErrors() []error { return m }

// JoinCallRequestValidationError is the validation error returned by
// JoinCallRequest.Validate if the designated constraints aren't met.
type JoinCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinCallRequestValidationError) ErrorName() string { return "JoinCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinCallRequestValidationError{}

// Validate checks the field values on JoinCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinCallResponseMultiError, or nil if none found.
func (m *JoinCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Created

	for idx, item := range m.GetEdges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JoinCallResponseValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JoinCallResponseValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JoinCallResponseValidationError{
					field:  fmt.Sprintf("Edges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JoinCallResponseMultiError(errors)
	}

	return nil
}

// JoinCallResponseMultiError is an error wrapping multiple validation errors
// returned by JoinCallResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinCallResponseMultiError) AllErrors() []error { return m }

// JoinCallResponseValidationError is the validation error returned by
// JoinCallResponse.Validate if the designated constraints aren't met.
type JoinCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinCallResponseValidationError) ErrorName() string { return "JoinCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinCallResponseValidationError{}

// Validate checks the field values on CallInput with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallInputMultiError, or nil
// if none found.
func (m *CallInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CallInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomJson

	if all {
		switch v := interface{}(m.GetSettingsOverrides()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallInputValidationError{
					field:  "SettingsOverrides",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallInputValidationError{
					field:  "SettingsOverrides",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettingsOverrides()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallInputValidationError{
				field:  "SettingsOverrides",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallInputMultiError(errors)
	}

	return nil
}

// CallInputMultiError is an error wrapping multiple validation errors returned
// by CallInput.ValidateAll() if the designated constraints aren't met.
type CallInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallInputMultiError) AllErrors() []error { return m }

// CallInputValidationError is the validation error returned by
// CallInput.Validate if the designated constraints aren't met.
type CallInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallInputValidationError) ErrorName() string { return "CallInputValidationError" }

// Error satisfies the builtin error interface
func (e CallInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallInputValidationError{}

// Validate checks the field values on GetOrCreateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrCreateCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrCreateCallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrCreateCallResponseMultiError, or nil if none found.
func (m *GetOrCreateCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrCreateCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrCreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrCreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrCreateCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Created

	if len(errors) > 0 {
		return GetOrCreateCallResponseMultiError(errors)
	}

	return nil
}

// GetOrCreateCallResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrCreateCallResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrCreateCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrCreateCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrCreateCallResponseMultiError) AllErrors() []error { return m }

// GetOrCreateCallResponseValidationError is the validation error returned by
// GetOrCreateCallResponse.Validate if the designated constraints aren't met.
type GetOrCreateCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrCreateCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrCreateCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrCreateCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrCreateCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrCreateCallResponseValidationError) ErrorName() string {
	return "GetOrCreateCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrCreateCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrCreateCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrCreateCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrCreateCallResponseValidationError{}

// Validate checks the field values on UpdateCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallRequestMultiError, or nil if none found.
func (m *UpdateCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCallRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCallRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCallRequestMultiError(errors)
	}

	return nil
}

// UpdateCallRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateCallRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallRequestMultiError) AllErrors() []error { return m }

// UpdateCallRequestValidationError is the validation error returned by
// UpdateCallRequest.Validate if the designated constraints aren't met.
type UpdateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallRequestValidationError) ErrorName() string {
	return "UpdateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallRequestValidationError{}

// Validate checks the field values on UpdateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallResponseMultiError, or nil if none found.
func (m *UpdateCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCallResponseMultiError(errors)
	}

	return nil
}

// UpdateCallResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateCallResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallResponseMultiError) AllErrors() []error { return m }

// UpdateCallResponseValidationError is the validation error returned by
// UpdateCallResponse.Validate if the designated constraints aren't met.
type UpdateCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallResponseValidationError) ErrorName() string {
	return "UpdateCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallResponseValidationError{}

// Validate checks the field values on RoleOverride with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleOverride) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleOverride with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleOverrideMultiError, or
// nil if none found.
func (m *RoleOverride) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleOverride) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RoleName != nil {
		// no validation rules for RoleName
	}

	if len(errors) > 0 {
		return RoleOverrideMultiError(errors)
	}

	return nil
}

// RoleOverrideMultiError is an error wrapping multiple validation errors
// returned by RoleOverride.ValidateAll() if the designated constraints aren't met.
type RoleOverrideMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleOverrideMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleOverrideMultiError) AllErrors() []error { return m }

// RoleOverrideValidationError is the validation error returned by
// RoleOverride.Validate if the designated constraints aren't met.
type RoleOverrideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleOverrideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleOverrideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleOverrideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleOverrideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleOverrideValidationError) ErrorName() string { return "RoleOverrideValidationError" }

// Error satisfies the builtin error interface
func (e RoleOverrideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleOverride.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleOverrideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleOverrideValidationError{}

// Validate checks the field values on PermissionGrantOverride with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionGrantOverride) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionGrantOverride with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionGrantOverrideMultiError, or nil if none found.
func (m *PermissionGrantOverride) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionGrantOverride) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PermissionGrantOverrideMultiError(errors)
	}

	return nil
}

// PermissionGrantOverrideMultiError is an error wrapping multiple validation
// errors returned by PermissionGrantOverride.ValidateAll() if the designated
// constraints aren't met.
type PermissionGrantOverrideMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionGrantOverrideMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionGrantOverrideMultiError) AllErrors() []error { return m }

// PermissionGrantOverrideValidationError is the validation error returned by
// PermissionGrantOverride.Validate if the designated constraints aren't met.
type PermissionGrantOverrideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionGrantOverrideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionGrantOverrideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionGrantOverrideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionGrantOverrideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionGrantOverrideValidationError) ErrorName() string {
	return "PermissionGrantOverrideValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionGrantOverrideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionGrantOverride.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionGrantOverrideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionGrantOverrideValidationError{}

// Validate checks the field values on UpdateCallPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallPermissionsRequestMultiError, or nil if none found.
func (m *UpdateCallPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	switch m.GrantInput.(type) {

	case *UpdateCallPermissionsRequest_RoleOverride:

		if all {
			switch v := interface{}(m.GetRoleOverride()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCallPermissionsRequestValidationError{
						field:  "RoleOverride",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCallPermissionsRequestValidationError{
						field:  "RoleOverride",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRoleOverride()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCallPermissionsRequestValidationError{
					field:  "RoleOverride",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateCallPermissionsRequest_PermissionOverride:

		if all {
			switch v := interface{}(m.GetPermissionOverride()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCallPermissionsRequestValidationError{
						field:  "PermissionOverride",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCallPermissionsRequestValidationError{
						field:  "PermissionOverride",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPermissionOverride()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCallPermissionsRequestValidationError{
					field:  "PermissionOverride",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateCallPermissionsRequestMultiError(errors)
	}

	return nil
}

// UpdateCallPermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCallPermissionsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCallPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallPermissionsRequestMultiError) AllErrors() []error { return m }

// UpdateCallPermissionsRequestValidationError is the validation error returned
// by UpdateCallPermissionsRequest.Validate if the designated constraints
// aren't met.
type UpdateCallPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallPermissionsRequestValidationError) ErrorName() string {
	return "UpdateCallPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallPermissionsRequestValidationError{}

// Validate checks the field values on UpdateCallPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallPermissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCallPermissionsResponseMultiError, or nil if none found.
func (m *UpdateCallPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCallPermissionsResponseMultiError(errors)
	}

	return nil
}

// UpdateCallPermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCallPermissionsResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateCallPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallPermissionsResponseMultiError) AllErrors() []error { return m }

// UpdateCallPermissionsResponseValidationError is the validation error
// returned by UpdateCallPermissionsResponse.Validate if the designated
// constraints aren't met.
type UpdateCallPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallPermissionsResponseValidationError) ErrorName() string {
	return "UpdateCallPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallPermissionsResponseValidationError{}

// Validate checks the field values on EndCallRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndCallRequestMultiError,
// or nil if none found.
func (m *EndCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if len(errors) > 0 {
		return EndCallRequestMultiError(errors)
	}

	return nil
}

// EndCallRequestMultiError is an error wrapping multiple validation errors
// returned by EndCallRequest.ValidateAll() if the designated constraints
// aren't met.
type EndCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndCallRequestMultiError) AllErrors() []error { return m }

// EndCallRequestValidationError is the validation error returned by
// EndCallRequest.Validate if the designated constraints aren't met.
type EndCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndCallRequestValidationError) ErrorName() string { return "EndCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e EndCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndCallRequestValidationError{}

// Validate checks the field values on EndCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EndCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndCallResponseMultiError, or nil if none found.
func (m *EndCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EndCallResponseMultiError(errors)
	}

	return nil
}

// EndCallResponseMultiError is an error wrapping multiple validation errors
// returned by EndCallResponse.ValidateAll() if the designated constraints
// aren't met.
type EndCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndCallResponseMultiError) AllErrors() []error { return m }

// EndCallResponseValidationError is the validation error returned by
// EndCallResponse.Validate if the designated constraints aren't met.
type EndCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndCallResponseValidationError) ErrorName() string { return "EndCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e EndCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndCallResponseValidationError{}

// Validate checks the field values on CreateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallResponseMultiError, or nil if none found.
func (m *CreateCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCallResponseMultiError(errors)
	}

	return nil
}

// CreateCallResponseMultiError is an error wrapping multiple validation errors
// returned by CreateCallResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallResponseMultiError) AllErrors() []error { return m }

// CreateCallResponseValidationError is the validation error returned by
// CreateCallResponse.Validate if the designated constraints aren't met.
type CreateCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallResponseValidationError) ErrorName() string {
	return "CreateCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallResponseValidationError{}

// Validate checks the field values on QueryCallsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryCallsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCallsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCallsRequestMultiError, or nil if none found.
func (m *QueryCallsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCallsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MqJson

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryCallsRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryCallsRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryCallsRequestValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return QueryCallsRequestMultiError(errors)
	}

	return nil
}

// QueryCallsRequestMultiError is an error wrapping multiple validation errors
// returned by QueryCallsRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryCallsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCallsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCallsRequestMultiError) AllErrors() []error { return m }

// QueryCallsRequestValidationError is the validation error returned by
// QueryCallsRequest.Validate if the designated constraints aren't met.
type QueryCallsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCallsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCallsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCallsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCallsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCallsRequestValidationError) ErrorName() string {
	return "QueryCallsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCallsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCallsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCallsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCallsRequestValidationError{}

// Validate checks the field values on QueryCallsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCallsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCallsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCallsResponseMultiError, or nil if none found.
func (m *QueryCallsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCallsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryCallsResponseValidationError{
					field:  "Calls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryCallsResponseValidationError{
					field:  "Calls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryCallsResponseValidationError{
				field:  "Calls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryCallsResponseMultiError(errors)
	}

	return nil
}

// QueryCallsResponseMultiError is an error wrapping multiple validation errors
// returned by QueryCallsResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryCallsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCallsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCallsResponseMultiError) AllErrors() []error { return m }

// QueryCallsResponseValidationError is the validation error returned by
// QueryCallsResponse.Validate if the designated constraints aren't met.
type QueryCallsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCallsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCallsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCallsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCallsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCallsResponseValidationError) ErrorName() string {
	return "QueryCallsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCallsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCallsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCallsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCallsResponseValidationError{}

// Validate checks the field values on QueryMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryMembersRequestMultiError, or nil if none found.
func (m *QueryMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MqJson

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryMembersRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryMembersRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryMembersRequestValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return QueryMembersRequestMultiError(errors)
	}

	return nil
}

// QueryMembersRequestMultiError is an error wrapping multiple validation
// errors returned by QueryMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMembersRequestMultiError) AllErrors() []error { return m }

// QueryMembersRequestValidationError is the validation error returned by
// QueryMembersRequest.Validate if the designated constraints aren't met.
type QueryMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMembersRequestValidationError) ErrorName() string {
	return "QueryMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMembersRequestValidationError{}

// Validate checks the field values on QueryMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryMembersResponseMultiError, or nil if none found.
func (m *QueryMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryMembersResponseValidationError{
					field:  "Members",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryMembersResponseValidationError{
					field:  "Members",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryMembersResponseValidationError{
				field:  "Members",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryMembersResponseMultiError(errors)
	}

	return nil
}

// QueryMembersResponseMultiError is an error wrapping multiple validation
// errors returned by QueryMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMembersResponseMultiError) AllErrors() []error { return m }

// QueryMembersResponseValidationError is the validation error returned by
// QueryMembersResponse.Validate if the designated constraints aren't met.
type QueryMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMembersResponseValidationError) ErrorName() string {
	return "QueryMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMembersResponseValidationError{}

// Validate checks the field values on QueryUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryUsersRequestMultiError, or nil if none found.
func (m *QueryUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MqJson

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryUsersRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryUsersRequestValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryUsersRequestValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return QueryUsersRequestMultiError(errors)
	}

	return nil
}

// QueryUsersRequestMultiError is an error wrapping multiple validation errors
// returned by QueryUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUsersRequestMultiError) AllErrors() []error { return m }

// QueryUsersRequestValidationError is the validation error returned by
// QueryUsersRequest.Validate if the designated constraints aren't met.
type QueryUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUsersRequestValidationError) ErrorName() string {
	return "QueryUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUsersRequestValidationError{}

// Validate checks the field values on QueryUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryUsersResponseMultiError, or nil if none found.
func (m *QueryUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryUsersResponseMultiError(errors)
	}

	return nil
}

// QueryUsersResponseMultiError is an error wrapping multiple validation errors
// returned by QueryUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUsersResponseMultiError) AllErrors() []error { return m }

// QueryUsersResponseValidationError is the validation error returned by
// QueryUsersResponse.Validate if the designated constraints aren't met.
type QueryUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUsersResponseValidationError) ErrorName() string {
	return "QueryUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUsersResponseValidationError{}

// Validate checks the field values on UpsertUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUsersRequestMultiError, or nil if none found.
func (m *UpsertUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertUsersRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertUsersRequestMultiError(errors)
	}

	return nil
}

// UpsertUsersRequestMultiError is an error wrapping multiple validation errors
// returned by UpsertUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type UpsertUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUsersRequestMultiError) AllErrors() []error { return m }

// UpsertUsersRequestValidationError is the validation error returned by
// UpsertUsersRequest.Validate if the designated constraints aren't met.
type UpsertUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUsersRequestValidationError) ErrorName() string {
	return "UpsertUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUsersRequestValidationError{}

// Validate checks the field values on UpsertUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUsersResponseMultiError, or nil if none found.
func (m *UpsertUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertUsersResponseMultiError(errors)
	}

	return nil
}

// UpsertUsersResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUsersResponseMultiError) AllErrors() []error { return m }

// UpsertUsersResponseValidationError is the validation error returned by
// UpsertUsersResponse.Validate if the designated constraints aren't met.
type UpsertUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUsersResponseValidationError) ErrorName() string {
	return "UpsertUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUsersResponseValidationError{}

// Validate checks the field values on GetCallEdgeServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallEdgeServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallEdgeServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallEdgeServerRequestMultiError, or nil if none found.
func (m *GetCallEdgeServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallEdgeServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if all {
		switch v := interface{}(m.GetMeasurements()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallEdgeServerRequestValidationError{
					field:  "Measurements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallEdgeServerRequestValidationError{
					field:  "Measurements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeasurements()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallEdgeServerRequestValidationError{
				field:  "Measurements",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallEdgeServerRequestMultiError(errors)
	}

	return nil
}

// GetCallEdgeServerRequestMultiError is an error wrapping multiple validation
// errors returned by GetCallEdgeServerRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCallEdgeServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallEdgeServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallEdgeServerRequestMultiError) AllErrors() []error { return m }

// GetCallEdgeServerRequestValidationError is the validation error returned by
// GetCallEdgeServerRequest.Validate if the designated constraints aren't met.
type GetCallEdgeServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallEdgeServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallEdgeServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallEdgeServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallEdgeServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallEdgeServerRequestValidationError) ErrorName() string {
	return "GetCallEdgeServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallEdgeServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallEdgeServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallEdgeServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallEdgeServerRequestValidationError{}

// Validate checks the field values on GetCallEdgeServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallEdgeServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallEdgeServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallEdgeServerResponseMultiError, or nil if none found.
func (m *GetCallEdgeServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallEdgeServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallEdgeServerResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallEdgeServerResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallEdgeServerResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCredentials()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallEdgeServerResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallEdgeServerResponseValidationError{
					field:  "Credentials",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredentials()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallEdgeServerResponseValidationError{
				field:  "Credentials",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallEdgeServerResponseMultiError(errors)
	}

	return nil
}

// GetCallEdgeServerResponseMultiError is an error wrapping multiple validation
// errors returned by GetCallEdgeServerResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCallEdgeServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallEdgeServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallEdgeServerResponseMultiError) AllErrors() []error { return m }

// GetCallEdgeServerResponseValidationError is the validation error returned by
// GetCallEdgeServerResponse.Validate if the designated constraints aren't met.
type GetCallEdgeServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallEdgeServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallEdgeServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallEdgeServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallEdgeServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallEdgeServerResponseValidationError) ErrorName() string {
	return "GetCallEdgeServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallEdgeServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallEdgeServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallEdgeServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallEdgeServerResponseValidationError{}

// Validate checks the field values on CreateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceRequestMultiError, or nil if none found.
func (m *CreateDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeviceRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeviceRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeviceRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeviceRequestMultiError(errors)
	}

	return nil
}

// CreateDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceRequestMultiError) AllErrors() []error { return m }

// CreateDeviceRequestValidationError is the validation error returned by
// CreateDeviceRequest.Validate if the designated constraints aren't met.
type CreateDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceRequestValidationError) ErrorName() string {
	return "CreateDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceRequestValidationError{}

// Validate checks the field values on CreateDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceResponseMultiError, or nil if none found.
func (m *CreateDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeviceResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeviceResponseMultiError(errors)
	}

	return nil
}

// CreateDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceResponseMultiError) AllErrors() []error { return m }

// CreateDeviceResponseValidationError is the validation error returned by
// CreateDeviceResponse.Validate if the designated constraints aren't met.
type CreateDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceResponseValidationError) ErrorName() string {
	return "CreateDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceResponseValidationError{}

// Validate checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceRequestMultiError, or nil if none found.
func (m *DeleteDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDeviceRequestMultiError(errors)
	}

	return nil
}

// DeleteDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceRequestMultiError) AllErrors() []error { return m }

// DeleteDeviceRequestValidationError is the validation error returned by
// DeleteDeviceRequest.Validate if the designated constraints aren't met.
type DeleteDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceRequestValidationError) ErrorName() string {
	return "DeleteDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceRequestValidationError{}

// Validate checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceResponseMultiError, or nil if none found.
func (m *DeleteDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeviceResponseMultiError(errors)
	}

	return nil
}

// DeleteDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceResponseMultiError) AllErrors() []error { return m }

// DeleteDeviceResponseValidationError is the validation error returned by
// DeleteDeviceResponse.Validate if the designated constraints aren't met.
type DeleteDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceResponseValidationError) ErrorName() string {
	return "DeleteDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceResponseValidationError{}

// Validate checks the field values on QueryDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDevicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDevicesRequestMultiError, or nil if none found.
func (m *QueryDevicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDevicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryDevicesRequestMultiError(errors)
	}

	return nil
}

// QueryDevicesRequestMultiError is an error wrapping multiple validation
// errors returned by QueryDevicesRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryDevicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDevicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDevicesRequestMultiError) AllErrors() []error { return m }

// QueryDevicesRequestValidationError is the validation error returned by
// QueryDevicesRequest.Validate if the designated constraints aren't met.
type QueryDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDevicesRequestValidationError) ErrorName() string {
	return "QueryDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDevicesRequestValidationError{}

// Validate checks the field values on QueryDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDevicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDevicesResponseMultiError, or nil if none found.
func (m *QueryDevicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDevicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDevicesResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryDevicesResponseMultiError(errors)
	}

	return nil
}

// QueryDevicesResponseMultiError is an error wrapping multiple validation
// errors returned by QueryDevicesResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryDevicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDevicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDevicesResponseMultiError) AllErrors() []error { return m }

// QueryDevicesResponseValidationError is the validation error returned by
// QueryDevicesResponse.Validate if the designated constraints aren't met.
type QueryDevicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDevicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDevicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDevicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDevicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDevicesResponseValidationError) ErrorName() string {
	return "QueryDevicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDevicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDevicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDevicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDevicesResponseValidationError{}

// Validate checks the field values on SendEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEventRequestMultiError, or nil if none found.
func (m *SendEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	// no validation rules for EventType

	if len(errors) > 0 {
		return SendEventRequestMultiError(errors)
	}

	return nil
}

// SendEventRequestMultiError is an error wrapping multiple validation errors
// returned by SendEventRequest.ValidateAll() if the designated constraints
// aren't met.
type SendEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEventRequestMultiError) AllErrors() []error { return m }

// SendEventRequestValidationError is the validation error returned by
// SendEventRequest.Validate if the designated constraints aren't met.
type SendEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEventRequestValidationError) ErrorName() string { return "SendEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEventRequestValidationError{}

// Validate checks the field values on SendEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEventResponseMultiError, or nil if none found.
func (m *SendEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEventResponseMultiError(errors)
	}

	return nil
}

// SendEventResponseMultiError is an error wrapping multiple validation errors
// returned by SendEventResponse.ValidateAll() if the designated constraints
// aren't met.
type SendEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEventResponseMultiError) AllErrors() []error { return m }

// SendEventResponseValidationError is the validation error returned by
// SendEventResponse.Validate if the designated constraints aren't met.
type SendEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEventResponseValidationError) ErrorName() string {
	return "SendEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEventResponseValidationError{}

// Validate checks the field values on SendCustomEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCustomEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCustomEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCustomEventRequestMultiError, or nil if none found.
func (m *SendCustomEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCustomEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	// no validation rules for Type

	// no validation rules for DataJson

	if len(errors) > 0 {
		return SendCustomEventRequestMultiError(errors)
	}

	return nil
}

// SendCustomEventRequestMultiError is an error wrapping multiple validation
// errors returned by SendCustomEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SendCustomEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCustomEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCustomEventRequestMultiError) AllErrors() []error { return m }

// SendCustomEventRequestValidationError is the validation error returned by
// SendCustomEventRequest.Validate if the designated constraints aren't met.
type SendCustomEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCustomEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCustomEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCustomEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCustomEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCustomEventRequestValidationError) ErrorName() string {
	return "SendCustomEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendCustomEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCustomEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCustomEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCustomEventRequestValidationError{}

// Validate checks the field values on SendCustomEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCustomEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCustomEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCustomEventResponseMultiError, or nil if none found.
func (m *SendCustomEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCustomEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendCustomEventResponseMultiError(errors)
	}

	return nil
}

// SendCustomEventResponseMultiError is an error wrapping multiple validation
// errors returned by SendCustomEventResponse.ValidateAll() if the designated
// constraints aren't met.
type SendCustomEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCustomEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCustomEventResponseMultiError) AllErrors() []error { return m }

// SendCustomEventResponseValidationError is the validation error returned by
// SendCustomEventResponse.Validate if the designated constraints aren't met.
type SendCustomEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCustomEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCustomEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCustomEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCustomEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCustomEventResponseValidationError) ErrorName() string {
	return "SendCustomEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendCustomEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCustomEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCustomEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCustomEventResponseValidationError{}

// Validate checks the field values on ReportCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCallStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCallStatsRequestMultiError, or nil if none found.
func (m *ReportCallStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCallStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	// no validation rules for StatsJson

	if len(errors) > 0 {
		return ReportCallStatsRequestMultiError(errors)
	}

	return nil
}

// ReportCallStatsRequestMultiError is an error wrapping multiple validation
// errors returned by ReportCallStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportCallStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCallStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCallStatsRequestMultiError) AllErrors() []error { return m }

// ReportCallStatsRequestValidationError is the validation error returned by
// ReportCallStatsRequest.Validate if the designated constraints aren't met.
type ReportCallStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCallStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCallStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCallStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCallStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCallStatsRequestValidationError) ErrorName() string {
	return "ReportCallStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCallStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCallStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCallStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCallStatsRequestValidationError{}

// Validate checks the field values on ReportCallStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCallStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCallStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCallStatsResponseMultiError, or nil if none found.
func (m *ReportCallStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCallStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportCallStatsResponseMultiError(errors)
	}

	return nil
}

// ReportCallStatsResponseMultiError is an error wrapping multiple validation
// errors returned by ReportCallStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportCallStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCallStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCallStatsResponseMultiError) AllErrors() []error { return m }

// ReportCallStatsResponseValidationError is the validation error returned by
// ReportCallStatsResponse.Validate if the designated constraints aren't met.
type ReportCallStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCallStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCallStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCallStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCallStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCallStatsResponseValidationError) ErrorName() string {
	return "ReportCallStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCallStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCallStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCallStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCallStatsResponseValidationError{}

// Validate checks the field values on ReportCallStatEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCallStatEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCallStatEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCallStatEventRequestMultiError, or nil if none found.
func (m *ReportCallStatEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCallStatEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportCallStatEventRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportCallStatEventRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportCallStatEventRequestValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Event.(type) {

	case *ReportCallStatEventRequest_ParticipantConnected:

		if all {
			switch v := interface{}(m.GetParticipantConnected()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportCallStatEventRequestValidationError{
						field:  "ParticipantConnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportCallStatEventRequestValidationError{
						field:  "ParticipantConnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantConnected()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportCallStatEventRequestValidationError{
					field:  "ParticipantConnected",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReportCallStatEventRequest_ParticipantDisconnected:

		if all {
			switch v := interface{}(m.GetParticipantDisconnected()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportCallStatEventRequestValidationError{
						field:  "ParticipantDisconnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportCallStatEventRequestValidationError{
						field:  "ParticipantDisconnected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantDisconnected()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportCallStatEventRequestValidationError{
					field:  "ParticipantDisconnected",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReportCallStatEventRequest_MediaStateChanged:

		if all {
			switch v := interface{}(m.GetMediaStateChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportCallStatEventRequestValidationError{
						field:  "MediaStateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportCallStatEventRequestValidationError{
						field:  "MediaStateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMediaStateChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportCallStatEventRequestValidationError{
					field:  "MediaStateChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportCallStatEventRequestMultiError(errors)
	}

	return nil
}

// ReportCallStatEventRequestMultiError is an error wrapping multiple
// validation errors returned by ReportCallStatEventRequest.ValidateAll() if
// the designated constraints aren't met.
type ReportCallStatEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCallStatEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCallStatEventRequestMultiError) AllErrors() []error { return m }

// ReportCallStatEventRequestValidationError is the validation error returned
// by ReportCallStatEventRequest.Validate if the designated constraints aren't met.
type ReportCallStatEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCallStatEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCallStatEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCallStatEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCallStatEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCallStatEventRequestValidationError) ErrorName() string {
	return "ReportCallStatEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCallStatEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCallStatEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCallStatEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCallStatEventRequestValidationError{}

// Validate checks the field values on ReportCallStatEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCallStatEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCallStatEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCallStatEventResponseMultiError, or nil if none found.
func (m *ReportCallStatEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCallStatEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportCallStatEventResponseMultiError(errors)
	}

	return nil
}

// ReportCallStatEventResponseMultiError is an error wrapping multiple
// validation errors returned by ReportCallStatEventResponse.ValidateAll() if
// the designated constraints aren't met.
type ReportCallStatEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCallStatEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCallStatEventResponseMultiError) AllErrors() []error { return m }

// ReportCallStatEventResponseValidationError is the validation error returned
// by ReportCallStatEventResponse.Validate if the designated constraints
// aren't met.
type ReportCallStatEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCallStatEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCallStatEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCallStatEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCallStatEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCallStatEventResponseValidationError) ErrorName() string {
	return "ReportCallStatEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCallStatEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCallStatEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCallStatEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCallStatEventResponseValidationError{}

// Validate checks the field values on GetCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallStatsRequestMultiError, or nil if none found.
func (m *GetCallStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	if len(errors) > 0 {
		return GetCallStatsRequestMultiError(errors)
	}

	return nil
}

// GetCallStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCallStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCallStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallStatsRequestMultiError) AllErrors() []error { return m }

// GetCallStatsRequestValidationError is the validation error returned by
// GetCallStatsRequest.Validate if the designated constraints aren't met.
type GetCallStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallStatsRequestValidationError) ErrorName() string {
	return "GetCallStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallStatsRequestValidationError{}

// Validate checks the field values on ReportIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportIssueRequestMultiError, or nil if none found.
func (m *ReportIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	// no validation rules for Description

	// no validation rules for CustomJson

	if len(errors) > 0 {
		return ReportIssueRequestMultiError(errors)
	}

	return nil
}

// ReportIssueRequestMultiError is an error wrapping multiple validation errors
// returned by ReportIssueRequest.ValidateAll() if the designated constraints
// aren't met.
type ReportIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportIssueRequestMultiError) AllErrors() []error { return m }

// ReportIssueRequestValidationError is the validation error returned by
// ReportIssueRequest.Validate if the designated constraints aren't met.
type ReportIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportIssueRequestValidationError) ErrorName() string {
	return "ReportIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportIssueRequestValidationError{}

// Validate checks the field values on ReportIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportIssueResponseMultiError, or nil if none found.
func (m *ReportIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportIssueResponseMultiError(errors)
	}

	return nil
}

// ReportIssueResponseMultiError is an error wrapping multiple validation
// errors returned by ReportIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportIssueResponseMultiError) AllErrors() []error { return m }

// ReportIssueResponseValidationError is the validation error returned by
// ReportIssueResponse.Validate if the designated constraints aren't met.
type ReportIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportIssueResponseValidationError) ErrorName() string {
	return "ReportIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportIssueResponseValidationError{}

// Validate checks the field values on ReviewCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReviewCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCallRequestMultiError, or nil if none found.
func (m *ReviewCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallCid

	// no validation rules for Stars

	// no validation rules for Description

	// no validation rules for CustomJson

	if len(errors) > 0 {
		return ReviewCallRequestMultiError(errors)
	}

	return nil
}

// ReviewCallRequestMultiError is an error wrapping multiple validation errors
// returned by ReviewCallRequest.ValidateAll() if the designated constraints
// aren't met.
type ReviewCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCallRequestMultiError) AllErrors() []error { return m }

// ReviewCallRequestValidationError is the validation error returned by
// ReviewCallRequest.Validate if the designated constraints aren't met.
type ReviewCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCallRequestValidationError) ErrorName() string {
	return "ReviewCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCallRequestValidationError{}

// Validate checks the field values on ReviewCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCallResponseMultiError, or nil if none found.
func (m *ReviewCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReviewCallResponseMultiError(errors)
	}

	return nil
}

// ReviewCallResponseMultiError is an error wrapping multiple validation errors
// returned by ReviewCallResponse.ValidateAll() if the designated constraints
// aren't met.
type ReviewCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCallResponseMultiError) AllErrors() []error { return m }

// ReviewCallResponseValidationError is the validation error returned by
// ReviewCallResponse.Validate if the designated constraints aren't met.
type ReviewCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCallResponseValidationError) ErrorName() string {
	return "ReviewCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCallResponseValidationError{}

// Validate checks the field values on StartBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBroadcastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBroadcastRequestMultiError, or nil if none found.
func (m *StartBroadcastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBroadcastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	// no validation rules for HlsBroadcast

	if all {
		switch v := interface{}(m.GetRtmp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBroadcastRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBroadcastRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRtmp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBroadcastRequestValidationError{
				field:  "Rtmp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartBroadcastRequestMultiError(errors)
	}

	return nil
}

// StartBroadcastRequestMultiError is an error wrapping multiple validation
// errors returned by StartBroadcastRequest.ValidateAll() if the designated
// constraints aren't met.
type StartBroadcastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBroadcastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBroadcastRequestMultiError) AllErrors() []error { return m }

// StartBroadcastRequestValidationError is the validation error returned by
// StartBroadcastRequest.Validate if the designated constraints aren't met.
type StartBroadcastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBroadcastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBroadcastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBroadcastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBroadcastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBroadcastRequestValidationError) ErrorName() string {
	return "StartBroadcastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartBroadcastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBroadcastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBroadcastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBroadcastRequestValidationError{}

// Validate checks the field values on StartBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBroadcastResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBroadcastResponseMultiError, or nil if none found.
func (m *StartBroadcastResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBroadcastResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBroadcastResponseValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBroadcastResponseValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBroadcastResponseValidationError{
				field:  "Broadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartBroadcastResponseMultiError(errors)
	}

	return nil
}

// StartBroadcastResponseMultiError is an error wrapping multiple validation
// errors returned by StartBroadcastResponse.ValidateAll() if the designated
// constraints aren't met.
type StartBroadcastResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBroadcastResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBroadcastResponseMultiError) AllErrors() []error { return m }

// StartBroadcastResponseValidationError is the validation error returned by
// StartBroadcastResponse.Validate if the designated constraints aren't met.
type StartBroadcastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBroadcastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBroadcastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBroadcastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBroadcastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBroadcastResponseValidationError) ErrorName() string {
	return "StartBroadcastResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartBroadcastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBroadcastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBroadcastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBroadcastResponseValidationError{}

// Validate checks the field values on StopBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBroadcastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBroadcastRequestMultiError, or nil if none found.
func (m *StopBroadcastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBroadcastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return StopBroadcastRequestMultiError(errors)
	}

	return nil
}

// StopBroadcastRequestMultiError is an error wrapping multiple validation
// errors returned by StopBroadcastRequest.ValidateAll() if the designated
// constraints aren't met.
type StopBroadcastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBroadcastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBroadcastRequestMultiError) AllErrors() []error { return m }

// StopBroadcastRequestValidationError is the validation error returned by
// StopBroadcastRequest.Validate if the designated constraints aren't met.
type StopBroadcastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBroadcastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBroadcastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBroadcastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBroadcastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBroadcastRequestValidationError) ErrorName() string {
	return "StopBroadcastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopBroadcastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBroadcastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBroadcastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBroadcastRequestValidationError{}

// Validate checks the field values on StopBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBroadcastResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBroadcastResponseMultiError, or nil if none found.
func (m *StopBroadcastResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBroadcastResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopBroadcastResponseMultiError(errors)
	}

	return nil
}

// StopBroadcastResponseMultiError is an error wrapping multiple validation
// errors returned by StopBroadcastResponse.ValidateAll() if the designated
// constraints aren't met.
type StopBroadcastResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBroadcastResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBroadcastResponseMultiError) AllErrors() []error { return m }

// StopBroadcastResponseValidationError is the validation error returned by
// StopBroadcastResponse.Validate if the designated constraints aren't met.
type StopBroadcastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBroadcastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBroadcastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBroadcastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBroadcastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBroadcastResponseValidationError) ErrorName() string {
	return "StopBroadcastResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopBroadcastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBroadcastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBroadcastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBroadcastResponseValidationError{}

// Validate checks the field values on StartRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartRecordingRequestMultiError, or nil if none found.
func (m *StartRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return StartRecordingRequestMultiError(errors)
	}

	return nil
}

// StartRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StartRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type StartRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecordingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecordingRequestMultiError) AllErrors() []error { return m }

// StartRecordingRequestValidationError is the validation error returned by
// StartRecordingRequest.Validate if the designated constraints aren't met.
type StartRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecordingRequestValidationError) ErrorName() string {
	return "StartRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecordingRequestValidationError{}

// Validate checks the field values on StartRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartRecordingResponseMultiError, or nil if none found.
func (m *StartRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartRecordingResponseMultiError(errors)
	}

	return nil
}

// StartRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by StartRecordingResponse.ValidateAll() if the designated
// constraints aren't met.
type StartRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecordingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecordingResponseMultiError) AllErrors() []error { return m }

// StartRecordingResponseValidationError is the validation error returned by
// StartRecordingResponse.Validate if the designated constraints aren't met.
type StartRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecordingResponseValidationError) ErrorName() string {
	return "StartRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecordingResponseValidationError{}

// Validate checks the field values on StopRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopRecordingRequestMultiError, or nil if none found.
func (m *StopRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return StopRecordingRequestMultiError(errors)
	}

	return nil
}

// StopRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StopRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type StopRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopRecordingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopRecordingRequestMultiError) AllErrors() []error { return m }

// StopRecordingRequestValidationError is the validation error returned by
// StopRecordingRequest.Validate if the designated constraints aren't met.
type StopRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRecordingRequestValidationError) ErrorName() string {
	return "StopRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRecordingRequestValidationError{}

// Validate checks the field values on StopRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopRecordingResponseMultiError, or nil if none found.
func (m *StopRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopRecordingResponseMultiError(errors)
	}

	return nil
}

// StopRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by StopRecordingResponse.ValidateAll() if the designated
// constraints aren't met.
type StopRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopRecordingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopRecordingResponseMultiError) AllErrors() []error { return m }

// StopRecordingResponseValidationError is the validation error returned by
// StopRecordingResponse.Validate if the designated constraints aren't met.
type StopRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRecordingResponseValidationError) ErrorName() string {
	return "StopRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRecordingResponseValidationError{}
