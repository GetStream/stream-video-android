// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/client_v1_rpc/websocket.proto

package client_v1_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WebsocketEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebsocketEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsocketEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebsocketEventMultiError,
// or nil if none found.
func (m *WebsocketEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsocketEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetUsers()))
		i := 0
		for key := range m.GetUsers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUsers()[key]
			_ = val

			// no validation rules for Users[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WebsocketEventValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WebsocketEventValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WebsocketEventValidationError{
						field:  fmt.Sprintf("Users[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	switch m.Event.(type) {

	case *WebsocketEvent_Healthcheck:

		if all {
			switch v := interface{}(m.GetHealthcheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "Healthcheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "Healthcheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallCreated:

		if all {
			switch v := interface{}(m.GetCallCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallUpdated:

		if all {
			switch v := interface{}(m.GetCallUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallDeleted:

		if all {
			switch v := interface{}(m.GetCallDeleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallMembersCreated:

		if all {
			switch v := interface{}(m.GetCallMembersCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallMembersCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallMembersCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallMembersCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallMembersCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallMembersUpdated:

		if all {
			switch v := interface{}(m.GetCallMembersUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallMembersUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallMembersUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallMembersUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallMembersUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallMembersDeleted:

		if all {
			switch v := interface{}(m.GetCallMembersDeleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallMembersDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallMembersDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallMembersDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallMembersDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallEnded:

		if all {
			switch v := interface{}(m.GetCallEnded()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallEnded",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallEnded",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallEnded()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallEnded",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallAccepted:

		if all {
			switch v := interface{}(m.GetCallAccepted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallAccepted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallAccepted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallAccepted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallAccepted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallRejected:

		if all {
			switch v := interface{}(m.GetCallRejected()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallRejected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallRejected",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallRejected()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallRejected",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallCancelled:

		if all {
			switch v := interface{}(m.GetCallCancelled()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallCancelled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallCancelled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallCancelled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallCancelled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_UserUpdated:

		if all {
			switch v := interface{}(m.GetUserUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "UserUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "UserUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "UserUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketEvent_CallCustom:

		if all {
			switch v := interface{}(m.GetCallCustom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallCustom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketEventValidationError{
						field:  "CallCustom",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallCustom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketEventValidationError{
					field:  "CallCustom",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WebsocketEventMultiError(errors)
	}

	return nil
}

// WebsocketEventMultiError is an error wrapping multiple validation errors
// returned by WebsocketEvent.ValidateAll() if the designated constraints
// aren't met.
type WebsocketEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsocketEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsocketEventMultiError) AllErrors() []error { return m }

// WebsocketEventValidationError is the validation error returned by
// WebsocketEvent.Validate if the designated constraints aren't met.
type WebsocketEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsocketEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsocketEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsocketEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsocketEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsocketEventValidationError) ErrorName() string { return "WebsocketEventValidationError" }

// Error satisfies the builtin error interface
func (e WebsocketEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsocketEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsocketEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsocketEventValidationError{}

// Validate checks the field values on WebsocketClientEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebsocketClientEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsocketClientEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebsocketClientEventMultiError, or nil if none found.
func (m *WebsocketClientEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsocketClientEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Event.(type) {

	case *WebsocketClientEvent_Healthcheck:

		if all {
			switch v := interface{}(m.GetHealthcheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketClientEventValidationError{
						field:  "Healthcheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketClientEventValidationError{
						field:  "Healthcheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketClientEventValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WebsocketClientEvent_AuthRequest:

		if all {
			switch v := interface{}(m.GetAuthRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebsocketClientEventValidationError{
						field:  "AuthRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebsocketClientEventValidationError{
						field:  "AuthRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebsocketClientEventValidationError{
					field:  "AuthRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WebsocketClientEventMultiError(errors)
	}

	return nil
}

// WebsocketClientEventMultiError is an error wrapping multiple validation
// errors returned by WebsocketClientEvent.ValidateAll() if the designated
// constraints aren't met.
type WebsocketClientEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsocketClientEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsocketClientEventMultiError) AllErrors() []error { return m }

// WebsocketClientEventValidationError is the validation error returned by
// WebsocketClientEvent.Validate if the designated constraints aren't met.
type WebsocketClientEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsocketClientEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsocketClientEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsocketClientEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsocketClientEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsocketClientEventValidationError) ErrorName() string {
	return "WebsocketClientEventValidationError"
}

// Error satisfies the builtin error interface
func (e WebsocketClientEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsocketClientEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsocketClientEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsocketClientEventValidationError{}

// Validate checks the field values on WebsocketAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebsocketAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsocketAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebsocketAuthRequestMultiError, or nil if none found.
func (m *WebsocketAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsocketAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiKey

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsocketAuthRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsocketAuthRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsocketAuthRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsocketAuthRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsocketAuthRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsocketAuthRequestValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebsocketAuthRequestMultiError(errors)
	}

	return nil
}

// WebsocketAuthRequestMultiError is an error wrapping multiple validation
// errors returned by WebsocketAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type WebsocketAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsocketAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsocketAuthRequestMultiError) AllErrors() []error { return m }

// WebsocketAuthRequestValidationError is the validation error returned by
// WebsocketAuthRequest.Validate if the designated constraints aren't met.
type WebsocketAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsocketAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsocketAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsocketAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsocketAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsocketAuthRequestValidationError) ErrorName() string {
	return "WebsocketAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WebsocketAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsocketAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsocketAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsocketAuthRequestValidationError{}

// Validate checks the field values on WebsocketHealthcheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WebsocketHealthcheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsocketHealthcheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebsocketHealthcheckMultiError, or nil if none found.
func (m *WebsocketHealthcheck) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsocketHealthcheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := WebsocketHealthcheckValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := WebsocketHealthcheckValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CallType

	// no validation rules for CallId

	// no validation rules for Video

	// no validation rules for Audio

	if len(errors) > 0 {
		return WebsocketHealthcheckMultiError(errors)
	}

	return nil
}

// WebsocketHealthcheckMultiError is an error wrapping multiple validation
// errors returned by WebsocketHealthcheck.ValidateAll() if the designated
// constraints aren't met.
type WebsocketHealthcheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsocketHealthcheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsocketHealthcheckMultiError) AllErrors() []error { return m }

// WebsocketHealthcheckValidationError is the validation error returned by
// WebsocketHealthcheck.Validate if the designated constraints aren't met.
type WebsocketHealthcheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsocketHealthcheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsocketHealthcheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsocketHealthcheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsocketHealthcheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsocketHealthcheckValidationError) ErrorName() string {
	return "WebsocketHealthcheckValidationError"
}

// Error satisfies the builtin error interface
func (e WebsocketHealthcheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsocketHealthcheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsocketHealthcheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsocketHealthcheckValidationError{}
