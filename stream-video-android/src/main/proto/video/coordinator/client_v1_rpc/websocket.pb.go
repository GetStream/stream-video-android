// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: video/coordinator/client_v1_rpc/websocket.proto

package client_v1_rpc

import (
	event_v1 "github.com/GetStream/video-proto/protobuf/video/coordinator/event_v1"
	push_v1 "github.com/GetStream/video-proto/protobuf/video/coordinator/push_v1"
	user_v1 "github.com/GetStream/video-proto/protobuf/video/coordinator/user_v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WebsocketEvent only includes events that are sent to the client via websocket connection
// This is not an exhaustive list of events, since not all of them are sent via websocket
type WebsocketEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All users mentioned in the event payload, indexed by User.id
	Users map[string]*user_v1.User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Event:
	//
	//	*WebsocketEvent_Healthcheck
	//	*WebsocketEvent_CallCreated
	//	*WebsocketEvent_CallUpdated
	//	*WebsocketEvent_CallDeleted
	//	*WebsocketEvent_CallMembersCreated
	//	*WebsocketEvent_CallMembersUpdated
	//	*WebsocketEvent_CallMembersDeleted
	//	*WebsocketEvent_CallEnded
	//	*WebsocketEvent_CallAccepted
	//	*WebsocketEvent_CallRejected
	//	*WebsocketEvent_CallCancelled
	//	*WebsocketEvent_UserUpdated
	//	*WebsocketEvent_CallCustom
	Event isWebsocketEvent_Event `protobuf_oneof:"event"`
}

func (x *WebsocketEvent) Reset() {
	*x = WebsocketEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketEvent) ProtoMessage() {}

func (x *WebsocketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketEvent.ProtoReflect.Descriptor instead.
func (*WebsocketEvent) Descriptor() ([]byte, []int) {
	return file_video_coordinator_client_v1_rpc_websocket_proto_rawDescGZIP(), []int{0}
}

func (x *WebsocketEvent) GetUsers() map[string]*user_v1.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (m *WebsocketEvent) GetEvent() isWebsocketEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *WebsocketEvent) GetHealthcheck() *WebsocketHealthcheck {
	if x, ok := x.GetEvent().(*WebsocketEvent_Healthcheck); ok {
		return x.Healthcheck
	}
	return nil
}

func (x *WebsocketEvent) GetCallCreated() *event_v1.CallCreated {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallCreated); ok {
		return x.CallCreated
	}
	return nil
}

func (x *WebsocketEvent) GetCallUpdated() *event_v1.CallUpdated {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallUpdated); ok {
		return x.CallUpdated
	}
	return nil
}

func (x *WebsocketEvent) GetCallDeleted() *event_v1.CallDeleted {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallDeleted); ok {
		return x.CallDeleted
	}
	return nil
}

func (x *WebsocketEvent) GetCallMembersCreated() *event_v1.CallMembersCreated {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallMembersCreated); ok {
		return x.CallMembersCreated
	}
	return nil
}

func (x *WebsocketEvent) GetCallMembersUpdated() *event_v1.CallMembersUpdated {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallMembersUpdated); ok {
		return x.CallMembersUpdated
	}
	return nil
}

func (x *WebsocketEvent) GetCallMembersDeleted() *event_v1.CallMembersDeleted {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallMembersDeleted); ok {
		return x.CallMembersDeleted
	}
	return nil
}

func (x *WebsocketEvent) GetCallEnded() *event_v1.CallEnded {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallEnded); ok {
		return x.CallEnded
	}
	return nil
}

func (x *WebsocketEvent) GetCallAccepted() *event_v1.CallAccepted {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallAccepted); ok {
		return x.CallAccepted
	}
	return nil
}

func (x *WebsocketEvent) GetCallRejected() *event_v1.CallRejected {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallRejected); ok {
		return x.CallRejected
	}
	return nil
}

func (x *WebsocketEvent) GetCallCancelled() *event_v1.CallCancelled {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallCancelled); ok {
		return x.CallCancelled
	}
	return nil
}

func (x *WebsocketEvent) GetUserUpdated() *event_v1.UserUpdated {
	if x, ok := x.GetEvent().(*WebsocketEvent_UserUpdated); ok {
		return x.UserUpdated
	}
	return nil
}

func (x *WebsocketEvent) GetCallCustom() *event_v1.CallCustom {
	if x, ok := x.GetEvent().(*WebsocketEvent_CallCustom); ok {
		return x.CallCustom
	}
	return nil
}

type isWebsocketEvent_Event interface {
	isWebsocketEvent_Event()
}

type WebsocketEvent_Healthcheck struct {
	Healthcheck *WebsocketHealthcheck `protobuf:"bytes,20,opt,name=healthcheck,proto3,oneof"`
}

type WebsocketEvent_CallCreated struct {
	// Call events
	CallCreated *event_v1.CallCreated `protobuf:"bytes,30,opt,name=call_created,json=callCreated,proto3,oneof"`
}

type WebsocketEvent_CallUpdated struct {
	CallUpdated *event_v1.CallUpdated `protobuf:"bytes,31,opt,name=call_updated,json=callUpdated,proto3,oneof"`
}

type WebsocketEvent_CallDeleted struct {
	CallDeleted *event_v1.CallDeleted `protobuf:"bytes,32,opt,name=call_deleted,json=callDeleted,proto3,oneof"`
}

type WebsocketEvent_CallMembersCreated struct {
	CallMembersCreated *event_v1.CallMembersCreated `protobuf:"bytes,33,opt,name=call_members_created,json=callMembersCreated,proto3,oneof"`
}

type WebsocketEvent_CallMembersUpdated struct {
	CallMembersUpdated *event_v1.CallMembersUpdated `protobuf:"bytes,34,opt,name=call_members_updated,json=callMembersUpdated,proto3,oneof"`
}

type WebsocketEvent_CallMembersDeleted struct {
	CallMembersDeleted *event_v1.CallMembersDeleted `protobuf:"bytes,35,opt,name=call_members_deleted,json=callMembersDeleted,proto3,oneof"`
}

type WebsocketEvent_CallEnded struct {
	CallEnded *event_v1.CallEnded `protobuf:"bytes,36,opt,name=call_ended,json=callEnded,proto3,oneof"`
}

type WebsocketEvent_CallAccepted struct {
	// User initiated call events
	CallAccepted *event_v1.CallAccepted `protobuf:"bytes,40,opt,name=call_accepted,json=callAccepted,proto3,oneof"`
}

type WebsocketEvent_CallRejected struct {
	CallRejected *event_v1.CallRejected `protobuf:"bytes,41,opt,name=call_rejected,json=callRejected,proto3,oneof"`
}

type WebsocketEvent_CallCancelled struct {
	CallCancelled *event_v1.CallCancelled `protobuf:"bytes,42,opt,name=call_cancelled,json=callCancelled,proto3,oneof"`
}

type WebsocketEvent_UserUpdated struct {
	// User events
	UserUpdated *event_v1.UserUpdated `protobuf:"bytes,50,opt,name=user_updated,json=userUpdated,proto3,oneof"`
}

type WebsocketEvent_CallCustom struct {
	// Custom event
	CallCustom *event_v1.CallCustom `protobuf:"bytes,99,opt,name=call_custom,json=callCustom,proto3,oneof"`
}

func (*WebsocketEvent_Healthcheck) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallCreated) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallUpdated) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallDeleted) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallMembersCreated) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallMembersUpdated) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallMembersDeleted) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallEnded) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallAccepted) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallRejected) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallCancelled) isWebsocketEvent_Event() {}

func (*WebsocketEvent_UserUpdated) isWebsocketEvent_Event() {}

func (*WebsocketEvent_CallCustom) isWebsocketEvent_Event() {}

// WebsocketClientEvent contains all events that client is allowed to send to the server
// When clients sends any of mentioned events, they should be wrapped into ClientEvent
type WebsocketClientEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*WebsocketClientEvent_Healthcheck
	//	*WebsocketClientEvent_AuthRequest
	Event isWebsocketClientEvent_Event `protobuf_oneof:"event"`
}

func (x *WebsocketClientEvent) Reset() {
	*x = WebsocketClientEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketClientEvent) ProtoMessage() {}

func (x *WebsocketClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketClientEvent.ProtoReflect.Descriptor instead.
func (*WebsocketClientEvent) Descriptor() ([]byte, []int) {
	return file_video_coordinator_client_v1_rpc_websocket_proto_rawDescGZIP(), []int{1}
}

func (m *WebsocketClientEvent) GetEvent() isWebsocketClientEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *WebsocketClientEvent) GetHealthcheck() *WebsocketHealthcheck {
	if x, ok := x.GetEvent().(*WebsocketClientEvent_Healthcheck); ok {
		return x.Healthcheck
	}
	return nil
}

func (x *WebsocketClientEvent) GetAuthRequest() *WebsocketAuthRequest {
	if x, ok := x.GetEvent().(*WebsocketClientEvent_AuthRequest); ok {
		return x.AuthRequest
	}
	return nil
}

type isWebsocketClientEvent_Event interface {
	isWebsocketClientEvent_Event()
}

type WebsocketClientEvent_Healthcheck struct {
	Healthcheck *WebsocketHealthcheck `protobuf:"bytes,1,opt,name=healthcheck,proto3,oneof"`
}

type WebsocketClientEvent_AuthRequest struct {
	AuthRequest *WebsocketAuthRequest `protobuf:"bytes,2,opt,name=auth_request,json=authRequest,proto3,oneof"`
}

func (*WebsocketClientEvent_Healthcheck) isWebsocketClientEvent_Event() {}

func (*WebsocketClientEvent_AuthRequest) isWebsocketClientEvent_Event() {}

// A payload that is sent through websocket to authenticate a connection
type WebsocketAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Application API key that matches a secret is used to sign a token
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// A client JWT token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Optional UserInput. When present, it is used to create or update user information.
	// If contains some changes, a permission check will be performed
	User *user_v1.UserInput `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Optional DeviceInput. When present, a device will be created for a user. If device
	// already exists, nothing will happen
	Device *push_v1.DeviceInput `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *WebsocketAuthRequest) Reset() {
	*x = WebsocketAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketAuthRequest) ProtoMessage() {}

func (x *WebsocketAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketAuthRequest.ProtoReflect.Descriptor instead.
func (*WebsocketAuthRequest) Descriptor() ([]byte, []int) {
	return file_video_coordinator_client_v1_rpc_websocket_proto_rawDescGZIP(), []int{2}
}

func (x *WebsocketAuthRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *WebsocketAuthRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WebsocketAuthRequest) GetUser() *user_v1.UserInput {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebsocketAuthRequest) GetDevice() *push_v1.DeviceInput {
	if x != nil {
		return x.Device
	}
	return nil
}

// Healthcheck is sent back and forth between websocket client and server
// When server sends a healthcheck, it is wrapped into WebsocketEvent
// When client sends healthcheck, it should be wrapped into WebsocketClientEvent
type WebsocketHealthcheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CallType string `protobuf:"bytes,3,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	CallId   string `protobuf:"bytes,4,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Video    bool   `protobuf:"varint,5,opt,name=video,proto3" json:"video,omitempty"`
	Audio    bool   `protobuf:"varint,6,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *WebsocketHealthcheck) Reset() {
	*x = WebsocketHealthcheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsocketHealthcheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketHealthcheck) ProtoMessage() {}

func (x *WebsocketHealthcheck) ProtoReflect() protoreflect.Message {
	mi := &file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketHealthcheck.ProtoReflect.Descriptor instead.
func (*WebsocketHealthcheck) Descriptor() ([]byte, []int) {
	return file_video_coordinator_client_v1_rpc_websocket_proto_rawDescGZIP(), []int{3}
}

func (x *WebsocketHealthcheck) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WebsocketHealthcheck) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WebsocketHealthcheck) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *WebsocketHealthcheck) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *WebsocketHealthcheck) GetVideo() bool {
	if x != nil {
		return x.Video
	}
	return false
}

func (x *WebsocketHealthcheck) GetAudio() bool {
	if x != nil {
		return x.Audio
	}
	return false
}

var File_video_coordinator_client_v1_rpc_websocket_proto protoreflect.FileDescriptor

var file_video_coordinator_client_v1_rpc_websocket_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x5f, 0x72, 0x70,
	0x63, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x26, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x31, 0x5f, 0x72, 0x70, 0x63, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x0a, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x53,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x69,
	0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x14, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x53,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x60, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0xe4, 0x01, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0b, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x31, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x61, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x40, 0x42, 0x11, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x5f, 0x72, 0x70, 0x63, 0xaa, 0x02,
	0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_coordinator_client_v1_rpc_websocket_proto_rawDescOnce sync.Once
	file_video_coordinator_client_v1_rpc_websocket_proto_rawDescData = file_video_coordinator_client_v1_rpc_websocket_proto_rawDesc
)

func file_video_coordinator_client_v1_rpc_websocket_proto_rawDescGZIP() []byte {
	file_video_coordinator_client_v1_rpc_websocket_proto_rawDescOnce.Do(func() {
		file_video_coordinator_client_v1_rpc_websocket_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_coordinator_client_v1_rpc_websocket_proto_rawDescData)
	})
	return file_video_coordinator_client_v1_rpc_websocket_proto_rawDescData
}

var file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_video_coordinator_client_v1_rpc_websocket_proto_goTypes = []interface{}{
	(*WebsocketEvent)(nil),              // 0: stream.video.coordinator.client_v1_rpc.WebsocketEvent
	(*WebsocketClientEvent)(nil),        // 1: stream.video.coordinator.client_v1_rpc.WebsocketClientEvent
	(*WebsocketAuthRequest)(nil),        // 2: stream.video.coordinator.client_v1_rpc.WebsocketAuthRequest
	(*WebsocketHealthcheck)(nil),        // 3: stream.video.coordinator.client_v1_rpc.WebsocketHealthcheck
	nil,                                 // 4: stream.video.coordinator.client_v1_rpc.WebsocketEvent.UsersEntry
	(*event_v1.CallCreated)(nil),        // 5: stream.video.coordinator.event_v1.CallCreated
	(*event_v1.CallUpdated)(nil),        // 6: stream.video.coordinator.event_v1.CallUpdated
	(*event_v1.CallDeleted)(nil),        // 7: stream.video.coordinator.event_v1.CallDeleted
	(*event_v1.CallMembersCreated)(nil), // 8: stream.video.coordinator.event_v1.CallMembersCreated
	(*event_v1.CallMembersUpdated)(nil), // 9: stream.video.coordinator.event_v1.CallMembersUpdated
	(*event_v1.CallMembersDeleted)(nil), // 10: stream.video.coordinator.event_v1.CallMembersDeleted
	(*event_v1.CallEnded)(nil),          // 11: stream.video.coordinator.event_v1.CallEnded
	(*event_v1.CallAccepted)(nil),       // 12: stream.video.coordinator.event_v1.CallAccepted
	(*event_v1.CallRejected)(nil),       // 13: stream.video.coordinator.event_v1.CallRejected
	(*event_v1.CallCancelled)(nil),      // 14: stream.video.coordinator.event_v1.CallCancelled
	(*event_v1.UserUpdated)(nil),        // 15: stream.video.coordinator.event_v1.UserUpdated
	(*event_v1.CallCustom)(nil),         // 16: stream.video.coordinator.event_v1.CallCustom
	(*user_v1.UserInput)(nil),           // 17: stream.video.coordinator.user_v1.UserInput
	(*push_v1.DeviceInput)(nil),         // 18: stream.video.coordinator.push_v1.DeviceInput
	(*user_v1.User)(nil),                // 19: stream.video.coordinator.user_v1.User
}
var file_video_coordinator_client_v1_rpc_websocket_proto_depIdxs = []int32{
	4,  // 0: stream.video.coordinator.client_v1_rpc.WebsocketEvent.users:type_name -> stream.video.coordinator.client_v1_rpc.WebsocketEvent.UsersEntry
	3,  // 1: stream.video.coordinator.client_v1_rpc.WebsocketEvent.healthcheck:type_name -> stream.video.coordinator.client_v1_rpc.WebsocketHealthcheck
	5,  // 2: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_created:type_name -> stream.video.coordinator.event_v1.CallCreated
	6,  // 3: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_updated:type_name -> stream.video.coordinator.event_v1.CallUpdated
	7,  // 4: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_deleted:type_name -> stream.video.coordinator.event_v1.CallDeleted
	8,  // 5: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_members_created:type_name -> stream.video.coordinator.event_v1.CallMembersCreated
	9,  // 6: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_members_updated:type_name -> stream.video.coordinator.event_v1.CallMembersUpdated
	10, // 7: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_members_deleted:type_name -> stream.video.coordinator.event_v1.CallMembersDeleted
	11, // 8: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_ended:type_name -> stream.video.coordinator.event_v1.CallEnded
	12, // 9: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_accepted:type_name -> stream.video.coordinator.event_v1.CallAccepted
	13, // 10: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_rejected:type_name -> stream.video.coordinator.event_v1.CallRejected
	14, // 11: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_cancelled:type_name -> stream.video.coordinator.event_v1.CallCancelled
	15, // 12: stream.video.coordinator.client_v1_rpc.WebsocketEvent.user_updated:type_name -> stream.video.coordinator.event_v1.UserUpdated
	16, // 13: stream.video.coordinator.client_v1_rpc.WebsocketEvent.call_custom:type_name -> stream.video.coordinator.event_v1.CallCustom
	3,  // 14: stream.video.coordinator.client_v1_rpc.WebsocketClientEvent.healthcheck:type_name -> stream.video.coordinator.client_v1_rpc.WebsocketHealthcheck
	2,  // 15: stream.video.coordinator.client_v1_rpc.WebsocketClientEvent.auth_request:type_name -> stream.video.coordinator.client_v1_rpc.WebsocketAuthRequest
	17, // 16: stream.video.coordinator.client_v1_rpc.WebsocketAuthRequest.user:type_name -> stream.video.coordinator.user_v1.UserInput
	18, // 17: stream.video.coordinator.client_v1_rpc.WebsocketAuthRequest.device:type_name -> stream.video.coordinator.push_v1.DeviceInput
	19, // 18: stream.video.coordinator.client_v1_rpc.WebsocketEvent.UsersEntry.value:type_name -> stream.video.coordinator.user_v1.User
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_video_coordinator_client_v1_rpc_websocket_proto_init() }
func file_video_coordinator_client_v1_rpc_websocket_proto_init() {
	if File_video_coordinator_client_v1_rpc_websocket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketClientEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsocketHealthcheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WebsocketEvent_Healthcheck)(nil),
		(*WebsocketEvent_CallCreated)(nil),
		(*WebsocketEvent_CallUpdated)(nil),
		(*WebsocketEvent_CallDeleted)(nil),
		(*WebsocketEvent_CallMembersCreated)(nil),
		(*WebsocketEvent_CallMembersUpdated)(nil),
		(*WebsocketEvent_CallMembersDeleted)(nil),
		(*WebsocketEvent_CallEnded)(nil),
		(*WebsocketEvent_CallAccepted)(nil),
		(*WebsocketEvent_CallRejected)(nil),
		(*WebsocketEvent_CallCancelled)(nil),
		(*WebsocketEvent_UserUpdated)(nil),
		(*WebsocketEvent_CallCustom)(nil),
	}
	file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WebsocketClientEvent_Healthcheck)(nil),
		(*WebsocketClientEvent_AuthRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_coordinator_client_v1_rpc_websocket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_coordinator_client_v1_rpc_websocket_proto_goTypes,
		DependencyIndexes: file_video_coordinator_client_v1_rpc_websocket_proto_depIdxs,
		MessageInfos:      file_video_coordinator_client_v1_rpc_websocket_proto_msgTypes,
	}.Build()
	File_video_coordinator_client_v1_rpc_websocket_proto = out.File
	file_video_coordinator_client_v1_rpc_websocket_proto_rawDesc = nil
	file_video_coordinator_client_v1_rpc_websocket_proto_goTypes = nil
	file_video_coordinator_client_v1_rpc_websocket_proto_depIdxs = nil
}
