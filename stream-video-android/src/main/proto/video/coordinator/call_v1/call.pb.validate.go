// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/call_v1/call.proto

package call_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CallType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallTypeMultiError, or nil
// if none found.
func (m *CallType) ValidateAll() error {
	return m.validate(true)
}

func (m *CallType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallTypeValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallTypeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallTypeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallTypeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallTypeMultiError(errors)
	}

	return nil
}

// CallTypeMultiError is an error wrapping multiple validation errors returned
// by CallType.ValidateAll() if the designated constraints aren't met.
type CallTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallTypeMultiError) AllErrors() []error { return m }

// CallTypeValidationError is the validation error returned by
// CallType.Validate if the designated constraints aren't met.
type CallTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallTypeValidationError) ErrorName() string { return "CallTypeValidationError" }

// Error satisfies the builtin error interface
func (e CallTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallTypeValidationError{}

// Validate checks the field values on Call with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Call) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Call with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CallMultiError, or nil if none found.
func (m *Call) ValidateAll() error {
	return m.validate(true)
}

func (m *Call) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CallValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CallValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CallCid

	if utf8.RuneCountInString(m.GetCreatedByUserId()) < 1 {
		err := CallValidationError{
			field:  "CreatedByUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomJson

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallMultiError(errors)
	}

	return nil
}

// CallMultiError is an error wrapping multiple validation errors returned by
// Call.ValidateAll() if the designated constraints aren't met.
type CallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallMultiError) AllErrors() []error { return m }

// CallValidationError is the validation error returned by Call.Validate if the
// designated constraints aren't met.
type CallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallValidationError) ErrorName() string { return "CallValidationError" }

// Error satisfies the builtin error interface
func (e CallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallValidationError{}

// Validate checks the field values on CallDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallDetailsMultiError, or
// nil if none found.
func (m *CallDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *CallDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallDetailsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallDetailsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallDetailsValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetMembers()))
		i := 0
		for key := range m.GetMembers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMembers()[key]
			_ = val

			// no validation rules for Members[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CallDetailsValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CallDetailsValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CallDetailsValidationError{
						field:  fmt.Sprintf("Members[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CallDetailsMultiError(errors)
	}

	return nil
}

// CallDetailsMultiError is an error wrapping multiple validation errors
// returned by CallDetails.ValidateAll() if the designated constraints aren't met.
type CallDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallDetailsMultiError) AllErrors() []error { return m }

// CallDetailsValidationError is the validation error returned by
// CallDetails.Validate if the designated constraints aren't met.
type CallDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallDetailsValidationError) ErrorName() string { return "CallDetailsValidationError" }

// Error satisfies the builtin error interface
func (e CallDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallDetailsValidationError{}

// Validate checks the field values on CallOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallOptionsMultiError, or
// nil if none found.
func (m *CallOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *CallOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRecording()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallOptionsValidationError{
					field:  "Recording",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallOptionsValidationError{
					field:  "Recording",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecording()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallOptionsValidationError{
				field:  "Recording",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBroadcasting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallOptionsValidationError{
					field:  "Broadcasting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallOptionsValidationError{
					field:  "Broadcasting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroadcasting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallOptionsValidationError{
				field:  "Broadcasting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallOptionsMultiError(errors)
	}

	return nil
}

// CallOptionsMultiError is an error wrapping multiple validation errors
// returned by CallOptions.ValidateAll() if the designated constraints aren't met.
type CallOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallOptionsMultiError) AllErrors() []error { return m }

// CallOptionsValidationError is the validation error returned by
// CallOptions.Validate if the designated constraints aren't met.
type CallOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallOptionsValidationError) ErrorName() string { return "CallOptionsValidationError" }

// Error satisfies the builtin error interface
func (e CallOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallOptionsValidationError{}

// Validate checks the field values on RecordingOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordingOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordingOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordingOptionsMultiError, or nil if none found.
func (m *RecordingOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordingOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return RecordingOptionsMultiError(errors)
	}

	return nil
}

// RecordingOptionsMultiError is an error wrapping multiple validation errors
// returned by RecordingOptions.ValidateAll() if the designated constraints
// aren't met.
type RecordingOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingOptionsMultiError) AllErrors() []error { return m }

// RecordingOptionsValidationError is the validation error returned by
// RecordingOptions.Validate if the designated constraints aren't met.
type RecordingOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingOptionsValidationError) ErrorName() string { return "RecordingOptionsValidationError" }

// Error satisfies the builtin error interface
func (e RecordingOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordingOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingOptionsValidationError{}

// Validate checks the field values on BroadcastingOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BroadcastingOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastingOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BroadcastingOptionsMultiError, or nil if none found.
func (m *BroadcastingOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastingOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return BroadcastingOptionsMultiError(errors)
	}

	return nil
}

// BroadcastingOptionsMultiError is an error wrapping multiple validation
// errors returned by BroadcastingOptions.ValidateAll() if the designated
// constraints aren't met.
type BroadcastingOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastingOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastingOptionsMultiError) AllErrors() []error { return m }

// BroadcastingOptionsValidationError is the validation error returned by
// BroadcastingOptions.Validate if the designated constraints aren't met.
type BroadcastingOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastingOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastingOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastingOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastingOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastingOptionsValidationError) ErrorName() string {
	return "BroadcastingOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e BroadcastingOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastingOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastingOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastingOptionsValidationError{}
