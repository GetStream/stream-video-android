// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/push_v1/push.proto

package push_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushProvider with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushProviderMultiError, or
// nil if none found.
func (m *PushProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *PushProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Disabled

	// no validation rules for DisabledReason

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushProviderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushProviderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushProviderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushProviderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushProviderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushProviderValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Credentials.(type) {

	case *PushProvider_Apn:

		if all {
			switch v := interface{}(m.GetApn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Apn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Apn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderValidationError{
					field:  "Apn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushProvider_Firebase:

		if all {
			switch v := interface{}(m.GetFirebase()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Firebase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Firebase",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFirebase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderValidationError{
					field:  "Firebase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushProvider_Huawei:

		if all {
			switch v := interface{}(m.GetHuawei()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Huawei",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Huawei",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHuawei()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderValidationError{
					field:  "Huawei",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PushProvider_Xiaomi:

		if all {
			switch v := interface{}(m.GetXiaomi()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Xiaomi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PushProviderValidationError{
						field:  "Xiaomi",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetXiaomi()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PushProviderValidationError{
					field:  "Xiaomi",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PushProviderMultiError(errors)
	}

	return nil
}

// PushProviderMultiError is an error wrapping multiple validation errors
// returned by PushProvider.ValidateAll() if the designated constraints aren't met.
type PushProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushProviderMultiError) AllErrors() []error { return m }

// PushProviderValidationError is the validation error returned by
// PushProvider.Validate if the designated constraints aren't met.
type PushProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushProviderValidationError) ErrorName() string { return "PushProviderValidationError" }

// Error satisfies the builtin error interface
func (e PushProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushProviderValidationError{}

// Validate checks the field values on ApnCredentials with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApnCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApnCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApnCredentialsMultiError,
// or nil if none found.
func (m *ApnCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *ApnCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CertificateP12

	// no validation rules for Topic

	// no validation rules for TeamId

	if len(errors) > 0 {
		return ApnCredentialsMultiError(errors)
	}

	return nil
}

// ApnCredentialsMultiError is an error wrapping multiple validation errors
// returned by ApnCredentials.ValidateAll() if the designated constraints
// aren't met.
type ApnCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApnCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApnCredentialsMultiError) AllErrors() []error { return m }

// ApnCredentialsValidationError is the validation error returned by
// ApnCredentials.Validate if the designated constraints aren't met.
type ApnCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApnCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApnCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApnCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApnCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApnCredentialsValidationError) ErrorName() string { return "ApnCredentialsValidationError" }

// Error satisfies the builtin error interface
func (e ApnCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApnCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApnCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApnCredentialsValidationError{}

// Validate checks the field values on FirebaseCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FirebaseCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FirebaseCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FirebaseCredentialsMultiError, or nil if none found.
func (m *FirebaseCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *FirebaseCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Credentials

	if len(errors) > 0 {
		return FirebaseCredentialsMultiError(errors)
	}

	return nil
}

// FirebaseCredentialsMultiError is an error wrapping multiple validation
// errors returned by FirebaseCredentials.ValidateAll() if the designated
// constraints aren't met.
type FirebaseCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FirebaseCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FirebaseCredentialsMultiError) AllErrors() []error { return m }

// FirebaseCredentialsValidationError is the validation error returned by
// FirebaseCredentials.Validate if the designated constraints aren't met.
type FirebaseCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirebaseCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirebaseCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirebaseCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirebaseCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirebaseCredentialsValidationError) ErrorName() string {
	return "FirebaseCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e FirebaseCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirebaseCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirebaseCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirebaseCredentialsValidationError{}

// Validate checks the field values on HuaweiCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HuaweiCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HuaweiCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HuaweiCredentialsMultiError, or nil if none found.
func (m *HuaweiCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *HuaweiCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Secret

	if len(errors) > 0 {
		return HuaweiCredentialsMultiError(errors)
	}

	return nil
}

// HuaweiCredentialsMultiError is an error wrapping multiple validation errors
// returned by HuaweiCredentials.ValidateAll() if the designated constraints
// aren't met.
type HuaweiCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HuaweiCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HuaweiCredentialsMultiError) AllErrors() []error { return m }

// HuaweiCredentialsValidationError is the validation error returned by
// HuaweiCredentials.Validate if the designated constraints aren't met.
type HuaweiCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HuaweiCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HuaweiCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HuaweiCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HuaweiCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HuaweiCredentialsValidationError) ErrorName() string {
	return "HuaweiCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e HuaweiCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHuaweiCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HuaweiCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HuaweiCredentialsValidationError{}

// Validate checks the field values on XiaomiCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *XiaomiCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on XiaomiCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// XiaomiCredentialsMultiError, or nil if none found.
func (m *XiaomiCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *XiaomiCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageName

	// no validation rules for Secret

	if len(errors) > 0 {
		return XiaomiCredentialsMultiError(errors)
	}

	return nil
}

// XiaomiCredentialsMultiError is an error wrapping multiple validation errors
// returned by XiaomiCredentials.ValidateAll() if the designated constraints
// aren't met.
type XiaomiCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XiaomiCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XiaomiCredentialsMultiError) AllErrors() []error { return m }

// XiaomiCredentialsValidationError is the validation error returned by
// XiaomiCredentials.Validate if the designated constraints aren't met.
type XiaomiCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XiaomiCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XiaomiCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XiaomiCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XiaomiCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XiaomiCredentialsValidationError) ErrorName() string {
	return "XiaomiCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e XiaomiCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXiaomiCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XiaomiCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XiaomiCredentialsValidationError{}

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Id

	// no validation rules for Disabled

	// no validation rules for DisabledReason

	// no validation rules for PushProviderName

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on DeviceInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceInputMultiError, or
// nil if none found.
func (m *DeviceInput) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PushProviderId

	if len(errors) > 0 {
		return DeviceInputMultiError(errors)
	}

	return nil
}

// DeviceInputMultiError is an error wrapping multiple validation errors
// returned by DeviceInput.ValidateAll() if the designated constraints aren't met.
type DeviceInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceInputMultiError) AllErrors() []error { return m }

// DeviceInputValidationError is the validation error returned by
// DeviceInput.Validate if the designated constraints aren't met.
type DeviceInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceInputValidationError) ErrorName() string { return "DeviceInputValidationError" }

// Error satisfies the builtin error interface
func (e DeviceInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceInputValidationError{}
