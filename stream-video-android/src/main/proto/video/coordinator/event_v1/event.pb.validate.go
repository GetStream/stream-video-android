// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/event_v1/event.proto

package event_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RecordingStarted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordingStarted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordingStarted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordingStartedMultiError, or nil if none found.
func (m *RecordingStarted) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordingStarted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := RecordingStartedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordingStartedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordingStartedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordingStartedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := RecordingStartedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordingStartedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordingStartedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordingStartedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordingStartedMultiError(errors)
	}

	return nil
}

// RecordingStartedMultiError is an error wrapping multiple validation errors
// returned by RecordingStarted.ValidateAll() if the designated constraints
// aren't met.
type RecordingStartedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingStartedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingStartedMultiError) AllErrors() []error { return m }

// RecordingStartedValidationError is the validation error returned by
// RecordingStarted.Validate if the designated constraints aren't met.
type RecordingStartedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingStartedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingStartedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingStartedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingStartedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingStartedValidationError) ErrorName() string { return "RecordingStartedValidationError" }

// Error satisfies the builtin error interface
func (e RecordingStartedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordingStarted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingStartedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingStartedValidationError{}

// Validate checks the field values on RecordingStopped with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordingStopped) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordingStopped with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordingStoppedMultiError, or nil if none found.
func (m *RecordingStopped) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordingStopped) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := RecordingStoppedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordingStoppedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordingStoppedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordingStoppedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := RecordingStoppedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordingStoppedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordingStoppedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordingStoppedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordingStoppedMultiError(errors)
	}

	return nil
}

// RecordingStoppedMultiError is an error wrapping multiple validation errors
// returned by RecordingStopped.ValidateAll() if the designated constraints
// aren't met.
type RecordingStoppedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordingStoppedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordingStoppedMultiError) AllErrors() []error { return m }

// RecordingStoppedValidationError is the validation error returned by
// RecordingStopped.Validate if the designated constraints aren't met.
type RecordingStoppedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordingStoppedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordingStoppedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordingStoppedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordingStoppedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordingStoppedValidationError) ErrorName() string { return "RecordingStoppedValidationError" }

// Error satisfies the builtin error interface
func (e RecordingStoppedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordingStopped.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordingStoppedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordingStoppedValidationError{}

// Validate checks the field values on UserUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdatedMultiError, or
// nil if none found.
func (m *UserUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := UserUpdatedValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserUpdatedMultiError(errors)
	}

	return nil
}

// UserUpdatedMultiError is an error wrapping multiple validation errors
// returned by UserUpdated.ValidateAll() if the designated constraints aren't met.
type UserUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdatedMultiError) AllErrors() []error { return m }

// UserUpdatedValidationError is the validation error returned by
// UserUpdated.Validate if the designated constraints aren't met.
type UserUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdatedValidationError) ErrorName() string { return "UserUpdatedValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdatedValidationError{}

// Validate checks the field values on BroadcastStarted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BroadcastStarted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastStarted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BroadcastStartedMultiError, or nil if none found.
func (m *BroadcastStarted) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastStarted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := BroadcastStartedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BroadcastStartedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BroadcastStartedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BroadcastStartedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := BroadcastStartedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BroadcastStartedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BroadcastStartedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BroadcastStartedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BroadcastStartedMultiError(errors)
	}

	return nil
}

// BroadcastStartedMultiError is an error wrapping multiple validation errors
// returned by BroadcastStarted.ValidateAll() if the designated constraints
// aren't met.
type BroadcastStartedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastStartedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastStartedMultiError) AllErrors() []error { return m }

// BroadcastStartedValidationError is the validation error returned by
// BroadcastStarted.Validate if the designated constraints aren't met.
type BroadcastStartedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastStartedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastStartedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastStartedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastStartedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastStartedValidationError) ErrorName() string { return "BroadcastStartedValidationError" }

// Error satisfies the builtin error interface
func (e BroadcastStartedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastStarted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastStartedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastStartedValidationError{}

// Validate checks the field values on BroadcastEnded with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BroadcastEnded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastEnded with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BroadcastEndedMultiError,
// or nil if none found.
func (m *BroadcastEnded) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastEnded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := BroadcastEndedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BroadcastEndedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BroadcastEndedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BroadcastEndedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := BroadcastEndedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BroadcastEndedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BroadcastEndedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BroadcastEndedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BroadcastEndedMultiError(errors)
	}

	return nil
}

// BroadcastEndedMultiError is an error wrapping multiple validation errors
// returned by BroadcastEnded.ValidateAll() if the designated constraints
// aren't met.
type BroadcastEndedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastEndedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastEndedMultiError) AllErrors() []error { return m }

// BroadcastEndedValidationError is the validation error returned by
// BroadcastEnded.Validate if the designated constraints aren't met.
type BroadcastEndedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastEndedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastEndedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastEndedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastEndedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastEndedValidationError) ErrorName() string { return "BroadcastEndedValidationError" }

// Error satisfies the builtin error interface
func (e BroadcastEndedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastEnded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastEndedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastEndedValidationError{}

// Validate checks the field values on CallMembersCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CallMembersCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallMembersCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallMembersCreatedMultiError, or nil if none found.
func (m *CallMembersCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *CallMembersCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallMembersCreatedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallMembersCreatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallMembersCreatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallMembersCreatedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallMembersCreatedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallMembersCreatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallMembersCreatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallMembersCreatedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Ringing

	if len(errors) > 0 {
		return CallMembersCreatedMultiError(errors)
	}

	return nil
}

// CallMembersCreatedMultiError is an error wrapping multiple validation errors
// returned by CallMembersCreated.ValidateAll() if the designated constraints
// aren't met.
type CallMembersCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallMembersCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallMembersCreatedMultiError) AllErrors() []error { return m }

// CallMembersCreatedValidationError is the validation error returned by
// CallMembersCreated.Validate if the designated constraints aren't met.
type CallMembersCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallMembersCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallMembersCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallMembersCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallMembersCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallMembersCreatedValidationError) ErrorName() string {
	return "CallMembersCreatedValidationError"
}

// Error satisfies the builtin error interface
func (e CallMembersCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallMembersCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallMembersCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallMembersCreatedValidationError{}

// Validate checks the field values on CallMembersUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CallMembersUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallMembersUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallMembersUpdatedMultiError, or nil if none found.
func (m *CallMembersUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *CallMembersUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallMembersUpdatedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallMembersUpdatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallMembersUpdatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallMembersUpdatedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallMembersUpdatedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallMembersUpdatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallMembersUpdatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallMembersUpdatedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallMembersUpdatedMultiError(errors)
	}

	return nil
}

// CallMembersUpdatedMultiError is an error wrapping multiple validation errors
// returned by CallMembersUpdated.ValidateAll() if the designated constraints
// aren't met.
type CallMembersUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallMembersUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallMembersUpdatedMultiError) AllErrors() []error { return m }

// CallMembersUpdatedValidationError is the validation error returned by
// CallMembersUpdated.Validate if the designated constraints aren't met.
type CallMembersUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallMembersUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallMembersUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallMembersUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallMembersUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallMembersUpdatedValidationError) ErrorName() string {
	return "CallMembersUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e CallMembersUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallMembersUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallMembersUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallMembersUpdatedValidationError{}

// Validate checks the field values on CallMembersDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CallMembersDeleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallMembersDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallMembersDeletedMultiError, or nil if none found.
func (m *CallMembersDeleted) ValidateAll() error {
	return m.validate(true)
}

func (m *CallMembersDeleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallMembersDeletedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallMembersDeletedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallMembersDeletedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallMembersDeletedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallMembersDeletedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallMembersDeletedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallMembersDeletedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallMembersDeletedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallMembersDeletedMultiError(errors)
	}

	return nil
}

// CallMembersDeletedMultiError is an error wrapping multiple validation errors
// returned by CallMembersDeleted.ValidateAll() if the designated constraints
// aren't met.
type CallMembersDeletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallMembersDeletedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallMembersDeletedMultiError) AllErrors() []error { return m }

// CallMembersDeletedValidationError is the validation error returned by
// CallMembersDeleted.Validate if the designated constraints aren't met.
type CallMembersDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallMembersDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallMembersDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallMembersDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallMembersDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallMembersDeletedValidationError) ErrorName() string {
	return "CallMembersDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e CallMembersDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallMembersDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallMembersDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallMembersDeletedValidationError{}

// Validate checks the field values on CallCreated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallCreated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallCreatedMultiError, or
// nil if none found.
func (m *CallCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *CallCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallCreatedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallCreatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallCreatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallCreatedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallCreatedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallCreatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallCreatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallCreatedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Ringing

	if len(errors) > 0 {
		return CallCreatedMultiError(errors)
	}

	return nil
}

// CallCreatedMultiError is an error wrapping multiple validation errors
// returned by CallCreated.ValidateAll() if the designated constraints aren't met.
type CallCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallCreatedMultiError) AllErrors() []error { return m }

// CallCreatedValidationError is the validation error returned by
// CallCreated.Validate if the designated constraints aren't met.
type CallCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallCreatedValidationError) ErrorName() string { return "CallCreatedValidationError" }

// Error satisfies the builtin error interface
func (e CallCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallCreatedValidationError{}

// Validate checks the field values on CallUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallUpdatedMultiError, or
// nil if none found.
func (m *CallUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *CallUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallUpdatedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallUpdatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallUpdatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallUpdatedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallUpdatedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallUpdatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallUpdatedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallUpdatedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallUpdatedMultiError(errors)
	}

	return nil
}

// CallUpdatedMultiError is an error wrapping multiple validation errors
// returned by CallUpdated.ValidateAll() if the designated constraints aren't met.
type CallUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallUpdatedMultiError) AllErrors() []error { return m }

// CallUpdatedValidationError is the validation error returned by
// CallUpdated.Validate if the designated constraints aren't met.
type CallUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallUpdatedValidationError) ErrorName() string { return "CallUpdatedValidationError" }

// Error satisfies the builtin error interface
func (e CallUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallUpdatedValidationError{}

// Validate checks the field values on CallEnded with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallEnded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallEnded with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallEndedMultiError, or nil
// if none found.
func (m *CallEnded) ValidateAll() error {
	return m.validate(true)
}

func (m *CallEnded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallEndedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallEndedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallEndedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallEndedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallEndedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallEndedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallEndedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallEndedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallEndedMultiError(errors)
	}

	return nil
}

// CallEndedMultiError is an error wrapping multiple validation errors returned
// by CallEnded.ValidateAll() if the designated constraints aren't met.
type CallEndedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallEndedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallEndedMultiError) AllErrors() []error { return m }

// CallEndedValidationError is the validation error returned by
// CallEnded.Validate if the designated constraints aren't met.
type CallEndedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallEndedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallEndedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallEndedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallEndedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallEndedValidationError) ErrorName() string { return "CallEndedValidationError" }

// Error satisfies the builtin error interface
func (e CallEndedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallEnded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallEndedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallEndedValidationError{}

// Validate checks the field values on CallDeleted with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallDeleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallDeleted with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallDeletedMultiError, or
// nil if none found.
func (m *CallDeleted) ValidateAll() error {
	return m.validate(true)
}

func (m *CallDeleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallDeletedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallDeletedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallDeletedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallDeletedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallDeletedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallDeletedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallDeletedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallDeletedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallDeletedMultiError(errors)
	}

	return nil
}

// CallDeletedMultiError is an error wrapping multiple validation errors
// returned by CallDeleted.ValidateAll() if the designated constraints aren't met.
type CallDeletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallDeletedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallDeletedMultiError) AllErrors() []error { return m }

// CallDeletedValidationError is the validation error returned by
// CallDeleted.Validate if the designated constraints aren't met.
type CallDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallDeletedValidationError) ErrorName() string { return "CallDeletedValidationError" }

// Error satisfies the builtin error interface
func (e CallDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallDeletedValidationError{}

// Validate checks the field values on CallAccepted with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallAccepted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallAccepted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallAcceptedMultiError, or
// nil if none found.
func (m *CallAccepted) ValidateAll() error {
	return m.validate(true)
}

func (m *CallAccepted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallAcceptedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallAcceptedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallAcceptedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallAcceptedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallAcceptedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallAcceptedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallAcceptedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallAcceptedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSenderUserId()) < 1 {
		err := CallAcceptedValidationError{
			field:  "SenderUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CallAcceptedMultiError(errors)
	}

	return nil
}

// CallAcceptedMultiError is an error wrapping multiple validation errors
// returned by CallAccepted.ValidateAll() if the designated constraints aren't met.
type CallAcceptedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallAcceptedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallAcceptedMultiError) AllErrors() []error { return m }

// CallAcceptedValidationError is the validation error returned by
// CallAccepted.Validate if the designated constraints aren't met.
type CallAcceptedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallAcceptedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallAcceptedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallAcceptedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallAcceptedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallAcceptedValidationError) ErrorName() string { return "CallAcceptedValidationError" }

// Error satisfies the builtin error interface
func (e CallAcceptedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallAccepted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallAcceptedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallAcceptedValidationError{}

// Validate checks the field values on CallRejected with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallRejected) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallRejected with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallRejectedMultiError, or
// nil if none found.
func (m *CallRejected) ValidateAll() error {
	return m.validate(true)
}

func (m *CallRejected) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallRejectedValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallRejectedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallRejectedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallRejectedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallRejectedValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallRejectedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallRejectedValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallRejectedValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSenderUserId()) < 1 {
		err := CallRejectedValidationError{
			field:  "SenderUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CallRejectedMultiError(errors)
	}

	return nil
}

// CallRejectedMultiError is an error wrapping multiple validation errors
// returned by CallRejected.ValidateAll() if the designated constraints aren't met.
type CallRejectedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallRejectedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallRejectedMultiError) AllErrors() []error { return m }

// CallRejectedValidationError is the validation error returned by
// CallRejected.Validate if the designated constraints aren't met.
type CallRejectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallRejectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallRejectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallRejectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallRejectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallRejectedValidationError) ErrorName() string { return "CallRejectedValidationError" }

// Error satisfies the builtin error interface
func (e CallRejectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallRejected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallRejectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallRejectedValidationError{}

// Validate checks the field values on CallCancelled with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallCancelled) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallCancelled with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallCancelledMultiError, or
// nil if none found.
func (m *CallCancelled) ValidateAll() error {
	return m.validate(true)
}

func (m *CallCancelled) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallCancelledValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallCancelledValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallCancelledValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallCancelledValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallCancelledValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallCancelledValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallCancelledValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallCancelledValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSenderUserId()) < 1 {
		err := CallCancelledValidationError{
			field:  "SenderUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CallCancelledMultiError(errors)
	}

	return nil
}

// CallCancelledMultiError is an error wrapping multiple validation errors
// returned by CallCancelled.ValidateAll() if the designated constraints
// aren't met.
type CallCancelledMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallCancelledMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallCancelledMultiError) AllErrors() []error { return m }

// CallCancelledValidationError is the validation error returned by
// CallCancelled.Validate if the designated constraints aren't met.
type CallCancelledValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallCancelledValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallCancelledValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallCancelledValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallCancelledValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallCancelledValidationError) ErrorName() string { return "CallCancelledValidationError" }

// Error satisfies the builtin error interface
func (e CallCancelledValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallCancelled.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallCancelledValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallCancelledValidationError{}

// Validate checks the field values on CallCustom with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallCustom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallCustom with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallCustomMultiError, or
// nil if none found.
func (m *CallCustom) ValidateAll() error {
	return m.validate(true)
}

func (m *CallCustom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CallCustomValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallCustomValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallCustomValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallCustomValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCallDetails() == nil {
		err := CallCustomValidationError{
			field:  "CallDetails",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCallDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallCustomValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallCustomValidationError{
					field:  "CallDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallCustomValidationError{
				field:  "CallDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSenderUserId()) < 1 {
		err := CallCustomValidationError{
			field:  "SenderUserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CallCustomValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DataJson

	if len(errors) > 0 {
		return CallCustomMultiError(errors)
	}

	return nil
}

// CallCustomMultiError is an error wrapping multiple validation errors
// returned by CallCustom.ValidateAll() if the designated constraints aren't met.
type CallCustomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallCustomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallCustomMultiError) AllErrors() []error { return m }

// CallCustomValidationError is the validation error returned by
// CallCustom.Validate if the designated constraints aren't met.
type CallCustomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallCustomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallCustomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallCustomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallCustomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallCustomValidationError) ErrorName() string { return "CallCustomValidationError" }

// Error satisfies the builtin error interface
func (e CallCustomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallCustom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallCustomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallCustomValidationError{}
