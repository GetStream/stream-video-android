syntax = "proto3";

package stream.video.coordinator.event_v1;

import "video/coordinator/call_v1/call.proto";

option go_package = "event_v1";

message RecordingStarted {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message RecordingStopped {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message UserUpdated {
  string user_id = 1;
}

message BroadcastStarted {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message BroadcastEnded {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message CallMembersUpdated {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message CallMembersDeleted {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message CallCreated {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
  bool ringing = 3;
}

message CallUpdated {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message CallEnded {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message CallDeleted {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
}

message CallAccepted {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
  // The ID of the user sending the event
  string sender_user_id = 3;
}

message CallRejected {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
  string sender_user_id = 3;
}

message CallCancelled {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
  string sender_user_id = 3;
}

// A custom event type
message CallCustom {
  call_v1.Call call = 1;
  call_v1.CallDetails call_details = 2;
  string sender_user_id = 3;
  // The type of the event
  string type = 4;
  // The data in the event
  bytes data_json = 5;
}

// Events
// * mute: when someone, or multiple people are muted
// * unmute: when someone, or multiple people are unmuted
// * broadcast.preferences: request from the SFU to the client to provide a different list of uploads
// * security.updated: share screen, chat, rename, unmute, start video, hide profile pictures
// * settings: multiple people can share, 1 person can share
// * request: screenshare, recording, unmute
// * room.created
// * room.updated
// * sfu.switch (actually this can be handled using the webrtc connection, but that seems less reliable)
// * network.quality
