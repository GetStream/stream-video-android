syntax = "proto3";

package stream.video;

import "google/protobuf/struct.proto";
import "validate/validate.proto";

option go_package = "github.com/GetStream/video/protobuf/video_models";

// Edges are where we deploy video servers
message Edge {
  string name = 1 [(validate.rules).string.min_len = 1];
  string latency_url = 2 [(validate.rules).string.min_len = 1];
}

// TODO: to discuss. do we keep a log per call of
// - people joining
// - reactions
// - etc?
// - maybe it only makes sense when you transcribe the call

// Edges are where we deploy video servers
message EdgeServer {
  string url = 1;

  // Returns information about the server location
  message Coordinates {
    float lat = 1;
    float long = 2;
  }
}

message Latency {
  repeated float measurements_seconds = 1;
}

message File {
  string type = 1;
  bool composite = 2;
  string user_id = 3;
  string url = 4;
}

message RecordBroadcast {
  bool composite = 1; // if true merge all audio and video, if false split them
  repeated File files = 2;
}

message User {
  string id = 1 [(validate.rules).string.min_len = 1];
  repeated string teams = 2;
  string role = 3;
  google.protobuf.Struct custom = 4;
  string name = 5;
  string image_url = 6;
  // user creation date as RFC3339 string
  string created_at = 7;
  // user last update date as RFC3339 string
  string updated_at = 8;
}

message UserRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
  repeated string teams = 2;
  string role = 3;
  google.protobuf.Struct custom = 4;
  string name = 5;
  string profile_image_url = 6;
}

message Device {
  string user_id = 1;
  string id = 2;
  bool disabled = 3;
  string disabled_reason = 4;
  string push_provider_name = 5;
  string created_at = 6;
  string updated_at = 7;
}

message DeviceRequest {
  string user_id = 1;
  string id = 2;
  bool disabled = 3;
  string disabled_reason = 4;
  string push_provider_name = 5;
}

enum Codec {
  CODEC_H264_UNSPECIFIED = 0;
  CODEC_VP8 = 1;
  CODEC_VP9 = 2;
}

enum RecordingStorage {
  RECORDING_STORAGE_S3_UNSPECIFIED = 0;
}

message RecordingStorageOptions {
  RecordingStorage storage = 2;
  string access_key = 3;
  string secret_key = 4;
  string bucket_name = 5;
  string region = 6;
  string path = 7;
}

message RTMPOptions {
  repeated string urls = 1;
}

message Broadcast {
  RTMPOptions rtmp = 1;
  string hls_url = 2;
}

message TranscribeOptions {

}

enum Action {
  ACTION_EMPTY_UNSPECIFIED = 0;
  ACTION_CREATE_CALL = 1;
  ACTION_DELETE_CALL = 2;
  ACTION_SCREENSHARE = 3;
  ACTION_RECORD_CALL = 4;
  ACTION_START_TRANSCRIBE = 5;
  ACTION_RENAME_USER = 6;
  ACTION_HIDE_PROFILE_PICTURES = 7;
  ACTION_UNMUTE = 8;
  ACTION_MUTE_OTHER_USER = 9;
  ACTION_START_VIDEO = 10;
  ACTION_BROADCAST_CALL = 11;
}


message Permission {
  // the unique permission identifier
  string id = 1;

  // the human readable version of the permission
  string name = 2;

  // the description of the permission
  string description = 3;

  // the action that this permission grants
  Action action = 4;

  // if true, the permission only applies if the user is the owner of the resource (eg. the creator of a call)
  bool owner = 5;

  // if true, the permission only applies if user and resource are from the same team
  bool same_team = 6;
}

message Permissions {
  repeated Permission permissions = 1;
}

message Grant {
  string call_type = 1;
  // if provided we store this at the call level and merge with call_type
  string call_id = 2;
  string role = 3;
  repeated Action actions = 5;
}

enum FeatureToggle {
  // the feature is available and enabled by default
  FEATURE_TOGGLE_FEATURE_FLAG_ENABLED_UNSPECIFIED = 0;
  // the feature is available but needs to be turned on the call level
  FEATURE_TOGGLE_FEATURE_FLAG_AVAILABLE = 1;
  // the feature is disabled and cannot be turned on
  FEATURE_TOGGLE_FEATURE_FLAG_DISABLED = 2;
}

message Features {
  // recording calls
  FeatureToggle recording = 1;

  // HLS stream broadcast
  FeatureToggle hls_broadcast = 3;

  // call transcription
  FeatureToggle transcribe = 4;
  TranscribeOptions transcribe_options = 5;
}

message CallType {
  // the unique name for the call type
  string name = 1;

  // the permissions set for this call type
  map<string, Permissions> permissions = 2;

  // the features enabled by default for this type of calls
  Features features = 3;

  string created_at = 4;
  string updated_at = 5;
}

// those who are online in the call
message Participant {
  User user = 1;
  string role = 2;
  bool online = 3;
  google.protobuf.Struct custom = 4 ;
  bool video = 5;
  bool audio = 6;
  // call creation date as RFC3339 string
  string created_at = 7 [(validate.rules).string.min_len = 1];

  // call last update date as RFC3339 string
  string updated_at = 8 [(validate.rules).string.min_len = 1];
}

message ParticipantRequest {
  string user_id = 1;
  string role = 2;
  // call custom data
  google.protobuf.Struct custom = 3 ;
  // call creation date as RFC3339 string
  string created_at = 4 [(validate.rules).string.min_len = 1];

  // call last update date as RFC3339 string
  string updated_at = 5 [(validate.rules).string.min_len = 1];
}

message CallState {
  repeated Participant participants = 1;
}

message Call {
  // the call type
  string type = 1 [(validate.rules).string.min_len = 1];

  // the call id
  string id = 2 [(validate.rules).string.min_len = 1];

  // the id of the user that created this call
  string created_by_user_id = 3 [(validate.rules).string.min_len = 1];

  // the id of the current host for this call
  string host_user_id = 4;

  google.protobuf.Struct custom = 5;

  // call creation date as RFC3339 string
  string created_at = 6 [(validate.rules).string.min_len = 1];

  // call last update date as RFC3339 string
  string updated_at = 7 [(validate.rules).string.min_len = 1];

  // when recording is true, calls are recorded on S3
  bool recording = 8;

  // broadcast settings for this call
  Broadcast broadcast = 9;

  // enable transcription by default
  bool transcribe = 10;
  TranscribeOptions transcribe_options = 11;
}

message ApnSettings {
  string auth_key = 1;
  string key_id = 2;
  string apn_topic = 3;
  string team_id = 4;
  bool development = 5;
}

message FirebaseSettings {
  string server_key = 1;
  string credentials_json = 2;
}

message HuaweiSettings {
  string id = 1;
  string secret = 2;
}

message XiaomiSettings {
  string package_name = 1;
  string secret = 2;
}

message SqsSettings {
  string url = 1;
  string key = 2;
  string secret = 3;
}

message PushProvider {
  // the name for this push provider, unique for this application
  // @example apn_production
  // @example firebase_staging
  string name = 1;

  oneof settings {
    // apn push configs
    ApnSettings apn_settings = 2;
    // firebase push configs
    FirebaseSettings firebase_settings = 3;
    // huawei push configs
    HuaweiSettings huawei_settings = 4;
    // xiaomi push configs
    XiaomiSettings xiaomi_settings = 5;
  }

  bool disabled = 6;
}

message ApplicationSettings {
  // the webhook URL
  string webhook_url = 1;
  // push providers configured
  repeated PushProvider push_providers = 2;
  // sqs settings
  SqsSettings sqs_settings = 3;
}
