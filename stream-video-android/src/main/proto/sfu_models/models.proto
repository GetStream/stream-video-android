syntax = "proto3";

package stream.video.sfu;
import "google/protobuf/struct.proto";

option go_package = "github.com/GetStream/video-sfu/protobuf/sfu_models";

enum PeerType {
  PUBLISHER = 0;
  SUBSCRIBER = 1;
}

enum ConnectionQuality {
  BAD = 0;
  POOR = 1;
  GOOD = 2;
}

enum VideoQuality {
  LOW = 0;
  MID = 1;
  HIGH = 2;
}

message CallState {
  repeated Participant participants = 1;
}

message Call {
  // the call type
  string type = 1;

  // the call id
  string id = 2;

  // the id of the user that created this call
  string created_by_user_id = 3;

  // the id of the current host for this call
  string host_user_id = 4;

  google.protobuf.Struct custom = 5;

  // call creation date as RFC3339 string
  string created_at = 6;

  // call last update date as RFC3339 string
  string updated_at = 7 ;

}

// those who are online in the call
message Participant {
  User user = 1;
  string role = 2;
  bool online = 3;
  google.protobuf.Struct custom = 4 ;
  bool video = 5;
  bool audio = 6;
  // call creation date as RFC3339 string
  string created_at = 7;

  // call last update date as RFC3339 string
  string updated_at = 8;
}

message User {
  string id = 1;
  repeated string teams = 2;
  string role = 3;
  google.protobuf.Struct custom = 4;
  string name = 5;
  string image_url = 6;
  // user creation date as RFC3339 string
  string created_at = 7;
  // user last update date as RFC3339 string
  string updated_at = 8;
}

message StreamQuality {
  VideoQuality video_quality = 1;
  string user_id = 2;
}

message VideoDimension {
  uint32 width = 1;
  uint32 height = 2;
}

message VideoLayer {
  // for tracks with a single layer, this should be HIGH
  VideoQuality quality = 1;
  VideoDimension video_dimension = 2;

  // target bitrate, server will measure actual
  uint32 bitrate = 4;
  uint32 ssrc = 5;
}

message SimulcastCodecInfo {
  string mime_type = 1;
  string mid = 2;
  string cid = 3;
  repeated VideoLayer layers = 4;
}

message Codec {
  string mime = 1;
  string fmtp_line = 2;
}

message SimulcastCodec {

}