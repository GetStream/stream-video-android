syntax = "proto3";

package stream.video;

import "video_models/models.proto";

option go_package = "github.com/GetStream/video/protobuf/video_events";


message WebsocketEvent {
  oneof event_payload {
    Healthcheck health_check = 1;
    CallRinging call_ringing = 2;
    CallCreated call_created = 3;
    CallUpdated call_updated = 4;
    CallEnded call_ended = 5;
    CallDeleted call_deleted = 6;
    UserUpdated user_updated = 7;
    ParticipantInvited participant_invited = 8;
    ParticipantUpdated participant_updated = 9;
    ParticipantDeleted participant_deleted = 10;
    ParticipantJoined participant_joined = 11;
    ParticipantLeft participant_left = 12;
    BroadcastStarted broadcast_started = 13;
    BroadcastEnded broadcast_ended = 14;
    AuthPayload auth_payload = 15;
  }
}


message Healthcheck {
  string user_id = 1;
  string client_id = 2;
}

message AuthPayload {
  UserRequest user = 1;
  DeviceRequest device = 2;
  string token = 3;
}

/**
CallRinging is fired when a call is created with the ring=true option
Or when you manually call call.ring()
 */
message CallRinging {
  Call call = 1;
}

/**
CallCreated is fired when a call is created
 */
message CallCreated {
  Call call = 1;
}

message CallUpdated {
  Call call = 1;
}

message CallEnded {
  Call call = 1;
}

message CallDeleted {
  Call call = 1;
}

message UserUpdated {
  User user = 1;
}

message ParticipantInvited {
  Participant participant = 1;
}

message ParticipantUpdated {
  Participant participant = 1;
}

message ParticipantDeleted {
  string user_id = 1;
}

message ParticipantJoined {
  Participant participant = 1;
}

message ParticipantLeft {
  Participant participant = 1;
}

message BroadcastStarted {
  Broadcast broadcast = 1;
}

message BroadcastEnded {
  Broadcast broadcast = 1;
}

// events

//mute: when someone, or multiple people are muted
//unmute: when someone, or multiple people are unmuted
//broadcast.preferences: request from the SFU to the client to provide a different list of uploads
//screenshare.started
//screenshare.stopped
//security.updated: share screen, chat, rename, unmute, start video, hide profile pictures
//settings: multiple people can share, 1 person can share
//request: screenshare, recording, unmute
//room.created
//room.updated
//sfu.switch (actually this can be handled using the webrtc connection, but that seems less reliable)
//network.quality
