// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sfu_events/events.proto

package sfu_events

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SfuEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SfuEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SfuEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SfuEventMultiError, or nil
// if none found.
func (m *SfuEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *SfuEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EventPayload.(type) {

	case *SfuEvent_SubscriberOffer:

		if all {
			switch v := interface{}(m.GetSubscriberOffer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "SubscriberOffer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "SubscriberOffer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubscriberOffer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "SubscriberOffer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ConnectionQualityChanged:

		if all {
			switch v := interface{}(m.GetConnectionQualityChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ConnectionQualityChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ConnectionQualityChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConnectionQualityChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ConnectionQualityChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_AudioLevelChanged:

		if all {
			switch v := interface{}(m.GetAudioLevelChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "AudioLevelChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "AudioLevelChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAudioLevelChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "AudioLevelChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_SubscriberCandidate:

		if all {
			switch v := interface{}(m.GetSubscriberCandidate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "SubscriberCandidate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "SubscriberCandidate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubscriberCandidate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "SubscriberCandidate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_PublisherCandidate:

		if all {
			switch v := interface{}(m.GetPublisherCandidate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "PublisherCandidate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "PublisherCandidate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPublisherCandidate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "PublisherCandidate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ChangePublishQuality:

		if all {
			switch v := interface{}(m.GetChangePublishQuality()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ChangePublishQuality",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ChangePublishQuality",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChangePublishQuality()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ChangePublishQuality",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_LocalDeviceChange:

		if all {
			switch v := interface{}(m.GetLocalDeviceChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "LocalDeviceChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "LocalDeviceChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocalDeviceChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "LocalDeviceChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_MuteStateChanged:

		if all {
			switch v := interface{}(m.GetMuteStateChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "MuteStateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "MuteStateChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMuteStateChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "MuteStateChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_VideoQualityChanged:

		if all {
			switch v := interface{}(m.GetVideoQualityChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "VideoQualityChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "VideoQualityChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVideoQualityChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "VideoQualityChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ParticipantJoined:

		if all {
			switch v := interface{}(m.GetParticipantJoined()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantJoined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantJoined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantJoined()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ParticipantJoined",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_ParticipantLeft:

		if all {
			switch v := interface{}(m.GetParticipantLeft()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantLeft",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "ParticipantLeft",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipantLeft()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "ParticipantLeft",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SfuEvent_DominantSpeakerChanged:

		if all {
			switch v := interface{}(m.GetDominantSpeakerChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "DominantSpeakerChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SfuEventValidationError{
						field:  "DominantSpeakerChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDominantSpeakerChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SfuEventValidationError{
					field:  "DominantSpeakerChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SfuEventMultiError(errors)
	}

	return nil
}

// SfuEventMultiError is an error wrapping multiple validation errors returned
// by SfuEvent.ValidateAll() if the designated constraints aren't met.
type SfuEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SfuEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SfuEventMultiError) AllErrors() []error { return m }

// SfuEventValidationError is the validation error returned by
// SfuEvent.Validate if the designated constraints aren't met.
type SfuEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SfuEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SfuEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SfuEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SfuEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SfuEventValidationError) ErrorName() string { return "SfuEventValidationError" }

// Error satisfies the builtin error interface
func (e SfuEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSfuEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SfuEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SfuEventValidationError{}

// Validate checks the field values on ParticipantJoined with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParticipantJoined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantJoined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantJoinedMultiError, or nil if none found.
func (m *ParticipantJoined) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantJoined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantJoinedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantJoinedValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantJoinedMultiError(errors)
	}

	return nil
}

// ParticipantJoinedMultiError is an error wrapping multiple validation errors
// returned by ParticipantJoined.ValidateAll() if the designated constraints
// aren't met.
type ParticipantJoinedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantJoinedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantJoinedMultiError) AllErrors() []error { return m }

// ParticipantJoinedValidationError is the validation error returned by
// ParticipantJoined.Validate if the designated constraints aren't met.
type ParticipantJoinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantJoinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantJoinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantJoinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantJoinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantJoinedValidationError) ErrorName() string {
	return "ParticipantJoinedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantJoinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantJoined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantJoinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantJoinedValidationError{}

// Validate checks the field values on ParticipantLeft with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParticipantLeft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantLeft with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantLeftMultiError, or nil if none found.
func (m *ParticipantLeft) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantLeft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantLeftValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantLeftValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantLeftMultiError(errors)
	}

	return nil
}

// ParticipantLeftMultiError is an error wrapping multiple validation errors
// returned by ParticipantLeft.ValidateAll() if the designated constraints
// aren't met.
type ParticipantLeftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantLeftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantLeftMultiError) AllErrors() []error { return m }

// ParticipantLeftValidationError is the validation error returned by
// ParticipantLeft.Validate if the designated constraints aren't met.
type ParticipantLeftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantLeftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantLeftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantLeftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantLeftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantLeftValidationError) ErrorName() string { return "ParticipantLeftValidationError" }

// Error satisfies the builtin error interface
func (e ParticipantLeftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantLeft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantLeftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantLeftValidationError{}

// Validate checks the field values on MuteStateChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MuteStateChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteStateChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteStateChangedMultiError, or nil if none found.
func (m *MuteStateChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteStateChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AudioMuted

	// no validation rules for VideoMuted

	if len(errors) > 0 {
		return MuteStateChangedMultiError(errors)
	}

	return nil
}

// MuteStateChangedMultiError is an error wrapping multiple validation errors
// returned by MuteStateChanged.ValidateAll() if the designated constraints
// aren't met.
type MuteStateChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteStateChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteStateChangedMultiError) AllErrors() []error { return m }

// MuteStateChangedValidationError is the validation error returned by
// MuteStateChanged.Validate if the designated constraints aren't met.
type MuteStateChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteStateChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteStateChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteStateChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteStateChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteStateChangedValidationError) ErrorName() string { return "MuteStateChangedValidationError" }

// Error satisfies the builtin error interface
func (e MuteStateChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteStateChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteStateChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteStateChangedValidationError{}

// Validate checks the field values on VideoQualityChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoQualityChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoQualityChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoQualityChangedMultiError, or nil if none found.
func (m *VideoQualityChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoQualityChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStreamQualities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoQualityChangedValidationError{
						field:  fmt.Sprintf("StreamQualities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoQualityChangedValidationError{
						field:  fmt.Sprintf("StreamQualities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoQualityChangedValidationError{
					field:  fmt.Sprintf("StreamQualities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VideoQualityChangedMultiError(errors)
	}

	return nil
}

// VideoQualityChangedMultiError is an error wrapping multiple validation
// errors returned by VideoQualityChanged.ValidateAll() if the designated
// constraints aren't met.
type VideoQualityChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoQualityChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoQualityChangedMultiError) AllErrors() []error { return m }

// VideoQualityChangedValidationError is the validation error returned by
// VideoQualityChanged.Validate if the designated constraints aren't met.
type VideoQualityChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoQualityChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoQualityChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoQualityChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoQualityChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoQualityChangedValidationError) ErrorName() string {
	return "VideoQualityChangedValidationError"
}

// Error satisfies the builtin error interface
func (e VideoQualityChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoQualityChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoQualityChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoQualityChangedValidationError{}

// Validate checks the field values on SubscriberOffer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscriberOffer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriberOffer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriberOfferMultiError, or nil if none found.
func (m *SubscriberOffer) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriberOffer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sdp

	if len(errors) > 0 {
		return SubscriberOfferMultiError(errors)
	}

	return nil
}

// SubscriberOfferMultiError is an error wrapping multiple validation errors
// returned by SubscriberOffer.ValidateAll() if the designated constraints
// aren't met.
type SubscriberOfferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriberOfferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriberOfferMultiError) AllErrors() []error { return m }

// SubscriberOfferValidationError is the validation error returned by
// SubscriberOffer.Validate if the designated constraints aren't met.
type SubscriberOfferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriberOfferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriberOfferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriberOfferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriberOfferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriberOfferValidationError) ErrorName() string { return "SubscriberOfferValidationError" }

// Error satisfies the builtin error interface
func (e SubscriberOfferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriberOffer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriberOfferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriberOfferValidationError{}

// Validate checks the field values on LocalDeviceChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LocalDeviceChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocalDeviceChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocalDeviceChangeMultiError, or nil if none found.
func (m *LocalDeviceChange) ValidateAll() error {
	return m.validate(true)
}

func (m *LocalDeviceChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return LocalDeviceChangeMultiError(errors)
	}

	return nil
}

// LocalDeviceChangeMultiError is an error wrapping multiple validation errors
// returned by LocalDeviceChange.ValidateAll() if the designated constraints
// aren't met.
type LocalDeviceChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocalDeviceChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocalDeviceChangeMultiError) AllErrors() []error { return m }

// LocalDeviceChangeValidationError is the validation error returned by
// LocalDeviceChange.Validate if the designated constraints aren't met.
type LocalDeviceChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalDeviceChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalDeviceChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalDeviceChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalDeviceChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalDeviceChangeValidationError) ErrorName() string {
	return "LocalDeviceChangeValidationError"
}

// Error satisfies the builtin error interface
func (e LocalDeviceChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalDeviceChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalDeviceChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalDeviceChangeValidationError{}

// Validate checks the field values on ICECandidateTrickle with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ICECandidateTrickle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ICECandidateTrickle with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ICECandidateTrickleMultiError, or nil if none found.
func (m *ICECandidateTrickle) ValidateAll() error {
	return m.validate(true)
}

func (m *ICECandidateTrickle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Candidate

	if len(errors) > 0 {
		return ICECandidateTrickleMultiError(errors)
	}

	return nil
}

// ICECandidateTrickleMultiError is an error wrapping multiple validation
// errors returned by ICECandidateTrickle.ValidateAll() if the designated
// constraints aren't met.
type ICECandidateTrickleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ICECandidateTrickleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ICECandidateTrickleMultiError) AllErrors() []error { return m }

// ICECandidateTrickleValidationError is the validation error returned by
// ICECandidateTrickle.Validate if the designated constraints aren't met.
type ICECandidateTrickleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ICECandidateTrickleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ICECandidateTrickleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ICECandidateTrickleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ICECandidateTrickleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ICECandidateTrickleValidationError) ErrorName() string {
	return "ICECandidateTrickleValidationError"
}

// Error satisfies the builtin error interface
func (e ICECandidateTrickleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sICECandidateTrickle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ICECandidateTrickleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ICECandidateTrickleValidationError{}

// Validate checks the field values on ConnectionQualityChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectionQualityChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionQualityChanged with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionQualityChangedMultiError, or nil if none found.
func (m *ConnectionQualityChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionQualityChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ConnectionQuality

	if len(errors) > 0 {
		return ConnectionQualityChangedMultiError(errors)
	}

	return nil
}

// ConnectionQualityChangedMultiError is an error wrapping multiple validation
// errors returned by ConnectionQualityChanged.ValidateAll() if the designated
// constraints aren't met.
type ConnectionQualityChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionQualityChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionQualityChangedMultiError) AllErrors() []error { return m }

// ConnectionQualityChangedValidationError is the validation error returned by
// ConnectionQualityChanged.Validate if the designated constraints aren't met.
type ConnectionQualityChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionQualityChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionQualityChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionQualityChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionQualityChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionQualityChangedValidationError) ErrorName() string {
	return "ConnectionQualityChangedValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionQualityChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionQualityChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionQualityChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionQualityChangedValidationError{}

// Validate checks the field values on DominantSpeakerChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DominantSpeakerChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DominantSpeakerChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DominantSpeakerChangedMultiError, or nil if none found.
func (m *DominantSpeakerChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *DominantSpeakerChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DominantSpeakerChangedMultiError(errors)
	}

	return nil
}

// DominantSpeakerChangedMultiError is an error wrapping multiple validation
// errors returned by DominantSpeakerChanged.ValidateAll() if the designated
// constraints aren't met.
type DominantSpeakerChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DominantSpeakerChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DominantSpeakerChangedMultiError) AllErrors() []error { return m }

// DominantSpeakerChangedValidationError is the validation error returned by
// DominantSpeakerChanged.Validate if the designated constraints aren't met.
type DominantSpeakerChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DominantSpeakerChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DominantSpeakerChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DominantSpeakerChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DominantSpeakerChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DominantSpeakerChangedValidationError) ErrorName() string {
	return "DominantSpeakerChangedValidationError"
}

// Error satisfies the builtin error interface
func (e DominantSpeakerChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDominantSpeakerChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DominantSpeakerChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DominantSpeakerChangedValidationError{}

// Validate checks the field values on AudioLevelChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioLevelChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioLevelChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioLevelChangedMultiError, or nil if none found.
func (m *AudioLevelChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioLevelChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAudioLevels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AudioLevelChangedValidationError{
						field:  fmt.Sprintf("AudioLevels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AudioLevelChangedValidationError{
						field:  fmt.Sprintf("AudioLevels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AudioLevelChangedValidationError{
					field:  fmt.Sprintf("AudioLevels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AudioLevelChangedMultiError(errors)
	}

	return nil
}

// AudioLevelChangedMultiError is an error wrapping multiple validation errors
// returned by AudioLevelChanged.ValidateAll() if the designated constraints
// aren't met.
type AudioLevelChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioLevelChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioLevelChangedMultiError) AllErrors() []error { return m }

// AudioLevelChangedValidationError is the validation error returned by
// AudioLevelChanged.Validate if the designated constraints aren't met.
type AudioLevelChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioLevelChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioLevelChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioLevelChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioLevelChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioLevelChangedValidationError) ErrorName() string {
	return "AudioLevelChangedValidationError"
}

// Error satisfies the builtin error interface
func (e AudioLevelChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioLevelChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioLevelChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioLevelChangedValidationError{}

// Validate checks the field values on AudioLevel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AudioLevel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioLevel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AudioLevelMultiError, or
// nil if none found.
func (m *AudioLevel) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioLevel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Level

	if len(errors) > 0 {
		return AudioLevelMultiError(errors)
	}

	return nil
}

// AudioLevelMultiError is an error wrapping multiple validation errors
// returned by AudioLevel.ValidateAll() if the designated constraints aren't met.
type AudioLevelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioLevelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioLevelMultiError) AllErrors() []error { return m }

// AudioLevelValidationError is the validation error returned by
// AudioLevel.Validate if the designated constraints aren't met.
type AudioLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioLevelValidationError) ErrorName() string { return "AudioLevelValidationError" }

// Error satisfies the builtin error interface
func (e AudioLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioLevelValidationError{}

// Validate checks the field values on AudioLayerSetting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioLayerSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioLayerSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioLayerSettingMultiError, or nil if none found.
func (m *AudioLayerSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioLayerSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AudioLayerSettingMultiError(errors)
	}

	return nil
}

// AudioLayerSettingMultiError is an error wrapping multiple validation errors
// returned by AudioLayerSetting.ValidateAll() if the designated constraints
// aren't met.
type AudioLayerSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioLayerSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioLayerSettingMultiError) AllErrors() []error { return m }

// AudioLayerSettingValidationError is the validation error returned by
// AudioLayerSetting.Validate if the designated constraints aren't met.
type AudioLayerSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioLayerSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioLayerSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioLayerSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioLayerSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioLayerSettingValidationError) ErrorName() string {
	return "AudioLayerSettingValidationError"
}

// Error satisfies the builtin error interface
func (e AudioLayerSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioLayerSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioLayerSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioLayerSettingValidationError{}

// Validate checks the field values on AudioMediaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioMediaRequestMultiError, or nil if none found.
func (m *AudioMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelCount

	if len(errors) > 0 {
		return AudioMediaRequestMultiError(errors)
	}

	return nil
}

// AudioMediaRequestMultiError is an error wrapping multiple validation errors
// returned by AudioMediaRequest.ValidateAll() if the designated constraints
// aren't met.
type AudioMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioMediaRequestMultiError) AllErrors() []error { return m }

// AudioMediaRequestValidationError is the validation error returned by
// AudioMediaRequest.Validate if the designated constraints aren't met.
type AudioMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioMediaRequestValidationError) ErrorName() string {
	return "AudioMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AudioMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioMediaRequestValidationError{}

// Validate checks the field values on AudioSender with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AudioSender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioSender with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AudioSenderMultiError, or
// nil if none found.
func (m *AudioSender) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioSender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMediaRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMediaRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AudioSenderValidationError{
				field:  "MediaRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCodec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AudioSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCodec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AudioSenderValidationError{
				field:  "Codec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AudioSenderValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AudioSenderValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AudioSenderValidationError{
					field:  fmt.Sprintf("Layers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AudioSenderMultiError(errors)
	}

	return nil
}

// AudioSenderMultiError is an error wrapping multiple validation errors
// returned by AudioSender.ValidateAll() if the designated constraints aren't met.
type AudioSenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioSenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioSenderMultiError) AllErrors() []error { return m }

// AudioSenderValidationError is the validation error returned by
// AudioSender.Validate if the designated constraints aren't met.
type AudioSenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioSenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioSenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioSenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioSenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioSenderValidationError) ErrorName() string { return "AudioSenderValidationError" }

// Error satisfies the builtin error interface
func (e AudioSenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioSenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioSenderValidationError{}

// Validate checks the field values on VideoMediaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoMediaRequestMultiError, or nil if none found.
func (m *VideoMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdealHeight

	// no validation rules for IdealWidth

	// no validation rules for IdealFrameRate

	if len(errors) > 0 {
		return VideoMediaRequestMultiError(errors)
	}

	return nil
}

// VideoMediaRequestMultiError is an error wrapping multiple validation errors
// returned by VideoMediaRequest.ValidateAll() if the designated constraints
// aren't met.
type VideoMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMediaRequestMultiError) AllErrors() []error { return m }

// VideoMediaRequestValidationError is the validation error returned by
// VideoMediaRequest.Validate if the designated constraints aren't met.
type VideoMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMediaRequestValidationError) ErrorName() string {
	return "VideoMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VideoMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMediaRequestValidationError{}

// Validate checks the field values on VideoLayerSetting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoLayerSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoLayerSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoLayerSettingMultiError, or nil if none found.
func (m *VideoLayerSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoLayerSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Active

	// no validation rules for MaxBitrate

	// no validation rules for ScaleResolutionDownBy

	// no validation rules for Priority

	if all {
		switch v := interface{}(m.GetCodec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoLayerSettingValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoLayerSettingValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCodec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoLayerSettingValidationError{
				field:  "Codec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VideoLayerSettingMultiError(errors)
	}

	return nil
}

// VideoLayerSettingMultiError is an error wrapping multiple validation errors
// returned by VideoLayerSetting.ValidateAll() if the designated constraints
// aren't met.
type VideoLayerSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoLayerSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoLayerSettingMultiError) AllErrors() []error { return m }

// VideoLayerSettingValidationError is the validation error returned by
// VideoLayerSetting.Validate if the designated constraints aren't met.
type VideoLayerSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoLayerSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoLayerSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoLayerSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoLayerSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoLayerSettingValidationError) ErrorName() string {
	return "VideoLayerSettingValidationError"
}

// Error satisfies the builtin error interface
func (e VideoLayerSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoLayerSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoLayerSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoLayerSettingValidationError{}

// Validate checks the field values on VideoSender with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoSender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoSender with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoSenderMultiError, or
// nil if none found.
func (m *VideoSender) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoSender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMediaRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "MediaRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMediaRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoSenderValidationError{
				field:  "MediaRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCodec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoSenderValidationError{
					field:  "Codec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCodec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoSenderValidationError{
				field:  "Codec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoSenderValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoSenderValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoSenderValidationError{
					field:  fmt.Sprintf("Layers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VideoSenderMultiError(errors)
	}

	return nil
}

// VideoSenderMultiError is an error wrapping multiple validation errors
// returned by VideoSender.ValidateAll() if the designated constraints aren't met.
type VideoSenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoSenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoSenderMultiError) AllErrors() []error { return m }

// VideoSenderValidationError is the validation error returned by
// VideoSender.Validate if the designated constraints aren't met.
type VideoSenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoSenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoSenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoSenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoSenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoSenderValidationError) ErrorName() string { return "VideoSenderValidationError" }

// Error satisfies the builtin error interface
func (e VideoSenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoSenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoSenderValidationError{}

// Validate checks the field values on ChangePublishQuality with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePublishQuality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePublishQuality with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePublishQualityMultiError, or nil if none found.
func (m *ChangePublishQuality) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePublishQuality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAudioSender() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("AudioSender[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("AudioSender[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangePublishQualityValidationError{
					field:  fmt.Sprintf("AudioSender[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVideoSender() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("VideoSender[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangePublishQualityValidationError{
						field:  fmt.Sprintf("VideoSender[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangePublishQualityValidationError{
					field:  fmt.Sprintf("VideoSender[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangePublishQualityMultiError(errors)
	}

	return nil
}

// ChangePublishQualityMultiError is an error wrapping multiple validation
// errors returned by ChangePublishQuality.ValidateAll() if the designated
// constraints aren't met.
type ChangePublishQualityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePublishQualityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePublishQualityMultiError) AllErrors() []error { return m }

// ChangePublishQualityValidationError is the validation error returned by
// ChangePublishQuality.Validate if the designated constraints aren't met.
type ChangePublishQualityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePublishQualityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePublishQualityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePublishQualityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePublishQualityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePublishQualityValidationError) ErrorName() string {
	return "ChangePublishQualityValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePublishQualityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePublishQuality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePublishQualityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePublishQualityValidationError{}
