// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sfu_signal_rpc/signal.proto

package sfu_signal_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateVideoQualityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVideoQualityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVideoQualityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVideoQualityRequestMultiError, or nil if none found.
func (m *UpdateVideoQualityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVideoQualityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStreamQualities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateVideoQualityRequestValidationError{
						field:  fmt.Sprintf("StreamQualities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateVideoQualityRequestValidationError{
						field:  fmt.Sprintf("StreamQualities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateVideoQualityRequestValidationError{
					field:  fmt.Sprintf("StreamQualities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SessionId

	if len(errors) > 0 {
		return UpdateVideoQualityRequestMultiError(errors)
	}

	return nil
}

// UpdateVideoQualityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVideoQualityRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateVideoQualityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVideoQualityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVideoQualityRequestMultiError) AllErrors() []error { return m }

// UpdateVideoQualityRequestValidationError is the validation error returned by
// UpdateVideoQualityRequest.Validate if the designated constraints aren't met.
type UpdateVideoQualityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVideoQualityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVideoQualityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVideoQualityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVideoQualityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVideoQualityRequestValidationError) ErrorName() string {
	return "UpdateVideoQualityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVideoQualityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVideoQualityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVideoQualityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVideoQualityRequestValidationError{}

// Validate checks the field values on UpdateVideoQualityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVideoQualityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVideoQualityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVideoQualityResponseMultiError, or nil if none found.
func (m *UpdateVideoQualityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVideoQualityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateVideoQualityResponseMultiError(errors)
	}

	return nil
}

// UpdateVideoQualityResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateVideoQualityResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateVideoQualityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVideoQualityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVideoQualityResponseMultiError) AllErrors() []error { return m }

// UpdateVideoQualityResponseValidationError is the validation error returned
// by UpdateVideoQualityResponse.Validate if the designated constraints aren't met.
type UpdateVideoQualityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVideoQualityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVideoQualityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVideoQualityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVideoQualityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVideoQualityResponseValidationError) ErrorName() string {
	return "UpdateVideoQualityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVideoQualityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVideoQualityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVideoQualityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVideoQualityResponseValidationError{}

// Validate checks the field values on UpdateMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMuteStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMuteStateRequestMultiError, or nil if none found.
func (m *UpdateMuteStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMuteStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	switch m.Mute.(type) {

	case *UpdateMuteStateRequest_AudioMuteChanged:

		if all {
			switch v := interface{}(m.GetAudioMuteChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "AudioMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "AudioMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAudioMuteChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMuteStateRequestValidationError{
					field:  "AudioMuteChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateMuteStateRequest_VideoMuteChanged:

		if all {
			switch v := interface{}(m.GetVideoMuteChanged()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "VideoMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateMuteStateRequestValidationError{
						field:  "VideoMuteChanged",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVideoMuteChanged()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMuteStateRequestValidationError{
					field:  "VideoMuteChanged",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateMuteStateRequestMultiError(errors)
	}

	return nil
}

// UpdateMuteStateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMuteStateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMuteStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMuteStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMuteStateRequestMultiError) AllErrors() []error { return m }

// UpdateMuteStateRequestValidationError is the validation error returned by
// UpdateMuteStateRequest.Validate if the designated constraints aren't met.
type UpdateMuteStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMuteStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMuteStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMuteStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMuteStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMuteStateRequestValidationError) ErrorName() string {
	return "UpdateMuteStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMuteStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMuteStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMuteStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMuteStateRequestValidationError{}

// Validate checks the field values on UpdateMuteStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMuteStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMuteStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMuteStateResponseMultiError, or nil if none found.
func (m *UpdateMuteStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMuteStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMuteStateResponseMultiError(errors)
	}

	return nil
}

// UpdateMuteStateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMuteStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMuteStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMuteStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMuteStateResponseMultiError) AllErrors() []error { return m }

// UpdateMuteStateResponseValidationError is the validation error returned by
// UpdateMuteStateResponse.Validate if the designated constraints aren't met.
type UpdateMuteStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMuteStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMuteStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMuteStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMuteStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMuteStateResponseValidationError) ErrorName() string {
	return "UpdateMuteStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMuteStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMuteStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMuteStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMuteStateResponseValidationError{}

// Validate checks the field values on AudioMuteChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AudioMuteChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioMuteChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AudioMuteChangedMultiError, or nil if none found.
func (m *AudioMuteChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioMuteChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Muted

	if len(errors) > 0 {
		return AudioMuteChangedMultiError(errors)
	}

	return nil
}

// AudioMuteChangedMultiError is an error wrapping multiple validation errors
// returned by AudioMuteChanged.ValidateAll() if the designated constraints
// aren't met.
type AudioMuteChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioMuteChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioMuteChangedMultiError) AllErrors() []error { return m }

// AudioMuteChangedValidationError is the validation error returned by
// AudioMuteChanged.Validate if the designated constraints aren't met.
type AudioMuteChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioMuteChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioMuteChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioMuteChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioMuteChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioMuteChangedValidationError) ErrorName() string { return "AudioMuteChangedValidationError" }

// Error satisfies the builtin error interface
func (e AudioMuteChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioMuteChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioMuteChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioMuteChangedValidationError{}

// Validate checks the field values on VideoMuteChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoMuteChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoMuteChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoMuteChangedMultiError, or nil if none found.
func (m *VideoMuteChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoMuteChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Muted

	if len(errors) > 0 {
		return VideoMuteChangedMultiError(errors)
	}

	return nil
}

// VideoMuteChangedMultiError is an error wrapping multiple validation errors
// returned by VideoMuteChanged.ValidateAll() if the designated constraints
// aren't met.
type VideoMuteChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMuteChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMuteChangedMultiError) AllErrors() []error { return m }

// VideoMuteChangedValidationError is the validation error returned by
// VideoMuteChanged.Validate if the designated constraints aren't met.
type VideoMuteChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoMuteChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoMuteChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoMuteChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoMuteChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoMuteChangedValidationError) ErrorName() string { return "VideoMuteChangedValidationError" }

// Error satisfies the builtin error interface
func (e VideoMuteChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoMuteChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoMuteChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoMuteChangedValidationError{}

// Validate checks the field values on UpdateSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionsRequestMultiError, or nil if none found.
func (m *UpdateSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetSubscriptions()))
		i := 0
		for key := range m.GetSubscriptions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSubscriptions()[key]
			_ = val

			// no validation rules for Subscriptions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateSubscriptionsRequestValidationError{
							field:  fmt.Sprintf("Subscriptions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateSubscriptionsRequestValidationError{
							field:  fmt.Sprintf("Subscriptions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateSubscriptionsRequestValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for SessionId

	if len(errors) > 0 {
		return UpdateSubscriptionsRequestMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionsRequestMultiError) AllErrors() []error { return m }

// UpdateSubscriptionsRequestValidationError is the validation error returned
// by UpdateSubscriptionsRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionsRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionsRequestValidationError{}

// Validate checks the field values on SendAnswerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendAnswerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendAnswerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendAnswerRequestMultiError, or nil if none found.
func (m *SendAnswerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendAnswerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PeerType

	// no validation rules for Sdp

	// no validation rules for SessionId

	if len(errors) > 0 {
		return SendAnswerRequestMultiError(errors)
	}

	return nil
}

// SendAnswerRequestMultiError is an error wrapping multiple validation errors
// returned by SendAnswerRequest.ValidateAll() if the designated constraints
// aren't met.
type SendAnswerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendAnswerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendAnswerRequestMultiError) AllErrors() []error { return m }

// SendAnswerRequestValidationError is the validation error returned by
// SendAnswerRequest.Validate if the designated constraints aren't met.
type SendAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendAnswerRequestValidationError) ErrorName() string {
	return "SendAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendAnswerRequestValidationError{}

// Validate checks the field values on SendAnswerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendAnswerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendAnswerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendAnswerResponseMultiError, or nil if none found.
func (m *SendAnswerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendAnswerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendAnswerResponseMultiError(errors)
	}

	return nil
}

// SendAnswerResponseMultiError is an error wrapping multiple validation errors
// returned by SendAnswerResponse.ValidateAll() if the designated constraints
// aren't met.
type SendAnswerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendAnswerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendAnswerResponseMultiError) AllErrors() []error { return m }

// SendAnswerResponseValidationError is the validation error returned by
// SendAnswerResponse.Validate if the designated constraints aren't met.
type SendAnswerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendAnswerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendAnswerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendAnswerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendAnswerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendAnswerResponseValidationError) ErrorName() string {
	return "SendAnswerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendAnswerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendAnswerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendAnswerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendAnswerResponseValidationError{}

// Validate checks the field values on IceCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IceCandidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IceCandidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IceCandidateRequestMultiError, or nil if none found.
func (m *IceCandidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IceCandidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Publisher

	// no validation rules for Candidate

	// no validation rules for SessionId

	if m.SdpMid != nil {
		// no validation rules for SdpMid
	}

	if m.SdpMLineIndex != nil {
		// no validation rules for SdpMLineIndex
	}

	if m.UsernameFragment != nil {
		// no validation rules for UsernameFragment
	}

	if len(errors) > 0 {
		return IceCandidateRequestMultiError(errors)
	}

	return nil
}

// IceCandidateRequestMultiError is an error wrapping multiple validation
// errors returned by IceCandidateRequest.ValidateAll() if the designated
// constraints aren't met.
type IceCandidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IceCandidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IceCandidateRequestMultiError) AllErrors() []error { return m }

// IceCandidateRequestValidationError is the validation error returned by
// IceCandidateRequest.Validate if the designated constraints aren't met.
type IceCandidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IceCandidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IceCandidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IceCandidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IceCandidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IceCandidateRequestValidationError) ErrorName() string {
	return "IceCandidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IceCandidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIceCandidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IceCandidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IceCandidateRequestValidationError{}

// Validate checks the field values on IceCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IceCandidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IceCandidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IceCandidateResponseMultiError, or nil if none found.
func (m *IceCandidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IceCandidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IceCandidateResponseMultiError(errors)
	}

	return nil
}

// IceCandidateResponseMultiError is an error wrapping multiple validation
// errors returned by IceCandidateResponse.ValidateAll() if the designated
// constraints aren't met.
type IceCandidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IceCandidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IceCandidateResponseMultiError) AllErrors() []error { return m }

// IceCandidateResponseValidationError is the validation error returned by
// IceCandidateResponse.Validate if the designated constraints aren't met.
type IceCandidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IceCandidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IceCandidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IceCandidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IceCandidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IceCandidateResponseValidationError) ErrorName() string {
	return "IceCandidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IceCandidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIceCandidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IceCandidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IceCandidateResponseValidationError{}

// Validate checks the field values on UpdateSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionsResponseMultiError, or nil if none found.
func (m *UpdateSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionsResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionsResponseMultiError) AllErrors() []error { return m }

// UpdateSubscriptionsResponseValidationError is the validation error returned
// by UpdateSubscriptionsResponse.Validate if the designated constraints
// aren't met.
type UpdateSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionsResponseValidationError) ErrorName() string {
	return "UpdateSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionsResponseValidationError{}

// Validate checks the field values on SetPublisherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPublisherRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPublisherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPublisherRequestMultiError, or nil if none found.
func (m *SetPublisherRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPublisherRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sdp

	// no validation rules for SessionId

	if len(errors) > 0 {
		return SetPublisherRequestMultiError(errors)
	}

	return nil
}

// SetPublisherRequestMultiError is an error wrapping multiple validation
// errors returned by SetPublisherRequest.ValidateAll() if the designated
// constraints aren't met.
type SetPublisherRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPublisherRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPublisherRequestMultiError) AllErrors() []error { return m }

// SetPublisherRequestValidationError is the validation error returned by
// SetPublisherRequest.Validate if the designated constraints aren't met.
type SetPublisherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPublisherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPublisherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPublisherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPublisherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPublisherRequestValidationError) ErrorName() string {
	return "SetPublisherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetPublisherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPublisherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPublisherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPublisherRequestValidationError{}

// Validate checks the field values on SetPublisherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPublisherResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPublisherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPublisherResponseMultiError, or nil if none found.
func (m *SetPublisherResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPublisherResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sdp

	// no validation rules for SessionId

	if len(errors) > 0 {
		return SetPublisherResponseMultiError(errors)
	}

	return nil
}

// SetPublisherResponseMultiError is an error wrapping multiple validation
// errors returned by SetPublisherResponse.ValidateAll() if the designated
// constraints aren't met.
type SetPublisherResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPublisherResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPublisherResponseMultiError) AllErrors() []error { return m }

// SetPublisherResponseValidationError is the validation error returned by
// SetPublisherResponse.Validate if the designated constraints aren't met.
type SetPublisherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPublisherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPublisherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPublisherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPublisherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPublisherResponseValidationError) ErrorName() string {
	return "SetPublisherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetPublisherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPublisherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPublisherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPublisherResponseValidationError{}

// Validate checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinRequestMultiError, or
// nil if none found.
func (m *JoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriberSdpOffer

	// no validation rules for SessionId

	if len(errors) > 0 {
		return JoinRequestMultiError(errors)
	}

	return nil
}

// JoinRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRequest.ValidateAll() if the designated constraints aren't met.
type JoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRequestMultiError) AllErrors() []error { return m }

// JoinRequestValidationError is the validation error returned by
// JoinRequest.Validate if the designated constraints aren't met.
type JoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestValidationError) ErrorName() string { return "JoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestValidationError{}

// Validate checks the field values on JoinResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinResponseMultiError, or
// nil if none found.
func (m *JoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sdp

	if all {
		switch v := interface{}(m.GetCallState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinResponseValidationError{
				field:  "CallState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinResponseMultiError(errors)
	}

	return nil
}

// JoinResponseMultiError is an error wrapping multiple validation errors
// returned by JoinResponse.ValidateAll() if the designated constraints aren't met.
type JoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinResponseMultiError) AllErrors() []error { return m }

// JoinResponseValidationError is the validation error returned by
// JoinResponse.Validate if the designated constraints aren't met.
type JoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinResponseValidationError) ErrorName() string { return "JoinResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinResponseValidationError{}

// Validate checks the field values on ConnectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectRequestMultiError,
// or nil if none found.
func (m *ConnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SdpOffer

	// no validation rules for Token

	if len(errors) > 0 {
		return ConnectRequestMultiError(errors)
	}

	return nil
}

// ConnectRequestMultiError is an error wrapping multiple validation errors
// returned by ConnectRequest.ValidateAll() if the designated constraints
// aren't met.
type ConnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectRequestMultiError) AllErrors() []error { return m }

// ConnectRequestValidationError is the validation error returned by
// ConnectRequest.Validate if the designated constraints aren't met.
type ConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectRequestValidationError) ErrorName() string { return "ConnectRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectRequestValidationError{}

// Validate checks the field values on ConnectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectResponseMultiError, or nil if none found.
func (m *ConnectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SdpAnswer

	if len(errors) > 0 {
		return ConnectResponseMultiError(errors)
	}

	return nil
}

// ConnectResponseMultiError is an error wrapping multiple validation errors
// returned by ConnectResponse.ValidateAll() if the designated constraints
// aren't met.
type ConnectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectResponseMultiError) AllErrors() []error { return m }

// ConnectResponseValidationError is the validation error returned by
// ConnectResponse.Validate if the designated constraints aren't met.
type ConnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectResponseValidationError) ErrorName() string { return "ConnectResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectResponseValidationError{}

// Validate checks the field values on SignalRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignalRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignalRequestMultiError, or
// nil if none found.
func (m *SignalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EventPayload.(type) {

	case *SignalRequest_Subscribe:

		if all {
			switch v := interface{}(m.GetSubscribe()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignalRequestValidationError{
						field:  "Subscribe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignalRequestValidationError{
						field:  "Subscribe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubscribe()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignalRequestValidationError{
					field:  "Subscribe",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SignalRequest_Publish:

		if all {
			switch v := interface{}(m.GetPublish()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignalRequestValidationError{
						field:  "Publish",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignalRequestValidationError{
						field:  "Publish",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPublish()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignalRequestValidationError{
					field:  "Publish",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SignalRequestMultiError(errors)
	}

	return nil
}

// SignalRequestMultiError is an error wrapping multiple validation errors
// returned by SignalRequest.ValidateAll() if the designated constraints
// aren't met.
type SignalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalRequestMultiError) AllErrors() []error { return m }

// SignalRequestValidationError is the validation error returned by
// SignalRequest.Validate if the designated constraints aren't met.
type SignalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalRequestValidationError) ErrorName() string { return "SignalRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalRequestValidationError{}

// Validate checks the field values on SignalEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignalEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignalEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignalEventMultiError, or
// nil if none found.
func (m *SignalEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.EventPayload.(type) {

	case *SignalEvent_Subscribe:

		if all {
			switch v := interface{}(m.GetSubscribe()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignalEventValidationError{
						field:  "Subscribe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignalEventValidationError{
						field:  "Subscribe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubscribe()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignalEventValidationError{
					field:  "Subscribe",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SignalEvent_Publish:

		if all {
			switch v := interface{}(m.GetPublish()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignalEventValidationError{
						field:  "Publish",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignalEventValidationError{
						field:  "Publish",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPublish()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignalEventValidationError{
					field:  "Publish",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SignalEventMultiError(errors)
	}

	return nil
}

// SignalEventMultiError is an error wrapping multiple validation errors
// returned by SignalEvent.ValidateAll() if the designated constraints aren't met.
type SignalEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalEventMultiError) AllErrors() []error { return m }

// SignalEventValidationError is the validation error returned by
// SignalEvent.Validate if the designated constraints aren't met.
type SignalEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalEventValidationError) ErrorName() string { return "SignalEventValidationError" }

// Error satisfies the builtin error interface
func (e SignalEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalEventValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for SdpOffer

	// no validation rules for Quality

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeResponseMultiError, or nil if none found.
func (m *SubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Quality

	if len(errors) > 0 {
		return SubscribeResponseMultiError(errors)
	}

	return nil
}

// SubscribeResponseMultiError is an error wrapping multiple validation errors
// returned by SubscribeResponse.ValidateAll() if the designated constraints
// aren't met.
type SubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeResponseMultiError) AllErrors() []error { return m }

// SubscribeResponseValidationError is the validation error returned by
// SubscribeResponse.Validate if the designated constraints aren't met.
type SubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeResponseValidationError) ErrorName() string {
	return "SubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeResponseValidationError{}

// Validate checks the field values on PublishRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishRequestMultiError,
// or nil if none found.
func (m *PublishRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for SdpOffer

	if len(errors) > 0 {
		return PublishRequestMultiError(errors)
	}

	return nil
}

// PublishRequestMultiError is an error wrapping multiple validation errors
// returned by PublishRequest.ValidateAll() if the designated constraints
// aren't met.
type PublishRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishRequestMultiError) AllErrors() []error { return m }

// PublishRequestValidationError is the validation error returned by
// PublishRequest.Validate if the designated constraints aren't met.
type PublishRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishRequestValidationError) ErrorName() string { return "PublishRequestValidationError" }

// Error satisfies the builtin error interface
func (e PublishRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishRequestValidationError{}

// Validate checks the field values on PublishResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublishResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishResponseMultiError, or nil if none found.
func (m *PublishResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SdpAnswer

	if len(errors) > 0 {
		return PublishResponseMultiError(errors)
	}

	return nil
}

// PublishResponseMultiError is an error wrapping multiple validation errors
// returned by PublishResponse.ValidateAll() if the designated constraints
// aren't met.
type PublishResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishResponseMultiError) AllErrors() []error { return m }

// PublishResponseValidationError is the validation error returned by
// PublishResponse.Validate if the designated constraints aren't met.
type PublishResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishResponseValidationError) ErrorName() string { return "PublishResponseValidationError" }

// Error satisfies the builtin error interface
func (e PublishResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishResponseValidationError{}
