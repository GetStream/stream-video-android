// Code generated by protoc-gen-twirp v8.1.2, DO NOT EDIT.
// source: video_coordinator_rpc/coordinator_service.proto

package video_coordinator_rpc

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import google_protobuf "google.golang.org/protobuf/types/known/emptypb"

import bytes "bytes"
import errors "errors"
import io "io"
import path "path"
import url "net/url"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ================================
// CallCoordinatorService Interface
// ================================

type CallCoordinatorService interface {
	// CreateCall creates a new call that is unique for the combination of type and id fields
	// If a call with the same type and id already exists then the call will be updated based on the request (if allowed and if needed)
	// The user calling this endpoint will be created if necessary ({id: id})
	// The users listed in the participants field will also be created if necessary ({id: id})
	CreateCall(context.Context, *CreateCallRequest) (*CreateCallResponse, error)

	// GetCall retrieves the state for one call, the user calling this endpoint is created if missing
	GetCall(context.Context, *GetCallRequest) (*GetCallResponse, error)

	UpdateCall(context.Context, *UpdateCallRequest) (*UpdateCallResponse, error)

	DeleteCall(context.Context, *DeleteCallRequest) (*DeleteCallResponse, error)

	// JoinCall returns the call state and the list of edges that the user should be check for latency
	// this endpoint is meant to be used to prepare the information needed to call the SelectEdgeServer endpoint
	JoinCall(context.Context, *JoinCallRequest) (*JoinCallResponse, error)

	SelectEdgeServer(context.Context, *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error)

	LeaveCall(context.Context, *LeaveCallRequest) (*LeaveCallResponse, error)

	EndCall(context.Context, *EndCallRequest) (*EndCallResponse, error)

	// AddDevice registers the mobile device for push notifications
	// this endpoint will create the user if missing
	// if a device with the same id and push_provider_name exists, then the operation will be ignored
	AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error)

	RemoveDevice(context.Context, *RemoveDeviceRequest) (*RemoveDeviceResponse, error)

	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)

	// add reaction should perhaps just be handled by chat
	SendEvent(context.Context, *SendEventRequest) (*SendEventResponse, error)

	SendCustomEvent(context.Context, *SendCustomEventRequest) (*SendCustomEventResponse, error)

	// server side sync & advanced endpoints
	CreateOrUpdateCalls(context.Context, *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error)

	CreateOrUpdateUsers(context.Context, *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error)

	// recording a call or transcribing a call can be
	// A. Enabled by default for a call type
	// B. Enabled when creating the call per the default call type settings
	// C. Configured differently for that specific call
	// D. Enabled during the call
	TranscribeCall(context.Context, *TranscribeCallRequest) (*TranscribeCallResponse, error)

	StopTranscribeCall(context.Context, *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error)

	// starts broadcast to HLS and/or RTMP, replaces existing settings if broadcasting is already started
	StartBroadcast(context.Context, *StartBroadcastRequest) (*StartBroadcastResponse, error)

	// stops broadcasting to HLS and/or RTMP
	StopBroadcast(context.Context, *StopBroadcastRequest) (*StopBroadcastResponse, error)

	StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error)

	StopRecording(context.Context, *StopRecordingRequest) (*StopRecordingResponse, error)

	GetRecordings(context.Context, *GetRecordingsRequest) (*GetRecordingsResponse, error)

	// User & GDPR endpoints, delete user
	// we need to review the API contract based on Chat
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)

	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)

	ExportUser(context.Context, *ExportUserRequest) (*ExportUserResponse, error)

	// update application settings
	UpdateAppSettings(context.Context, *UpdateAppSettingsRequest) (*AppSettingsResponse, error)

	// get application settings
	GetAppSettings(context.Context, *google_protobuf.Empty) (*AppSettingsResponse, error)

	// create a call type
	CreateCallType(context.Context, *CallTypeRequestInput) (*CallTypeResponse, error)

	// updates an existing call type
	UpdateCallType(context.Context, *CallTypeRequestInput) (*CallTypeResponse, error)

	// deletes a call type, returns an error if there are calls for this type
	DeleteCallType(context.Context, *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error)

	// returns the list of permissions for a call type
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)

	// creates a custom user role
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)

	// creates a custom user role
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)

	// adds a new push provider
	AddPushProvider(context.Context, *AddPushProviderRequest) (*AppSettingsResponse, error)

	// updates a push provider
	UpdatePushProvider(context.Context, *UpdatePushProviderRequest) (*AppSettingsResponse, error)

	// deletes an existing push provider
	DeletePushProvider(context.Context, *DeletePushProviderRequest) (*AppSettingsResponse, error)

	// endpoint for storing stats (perhaps we should move this to the SFU layer though)
	ReportCallStats(context.Context, *ReportCallStatsRequest) (*ReportCallStatsResponse, error)

	GetCallStats(context.Context, *GetCallStatsRequest) (*GetCallStatsResponse, error)

	// endpoint for reviewing/rating the quality of calls
	ReviewCall(context.Context, *ReviewCallRequest) (*ReviewCallResponse, error)

	// endpoint for users to report issues with a call
	ReportIssue(context.Context, *ReportIssueRequest) (*ReportIssueResponse, error)
}

// ======================================
// CallCoordinatorService Protobuf Client
// ======================================

type callCoordinatorServiceProtobufClient struct {
	client      HTTPClient
	urls        [40]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewCallCoordinatorServiceProtobufClient creates a Protobuf client that implements the CallCoordinatorService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewCallCoordinatorServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) CallCoordinatorService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "stream.video", "CallCoordinatorService")
	urls := [40]string{
		serviceURL + "CreateCall",
		serviceURL + "GetCall",
		serviceURL + "UpdateCall",
		serviceURL + "DeleteCall",
		serviceURL + "JoinCall",
		serviceURL + "SelectEdgeServer",
		serviceURL + "LeaveCall",
		serviceURL + "EndCall",
		serviceURL + "AddDevice",
		serviceURL + "RemoveDevice",
		serviceURL + "ListDevices",
		serviceURL + "SendEvent",
		serviceURL + "SendCustomEvent",
		serviceURL + "CreateOrUpdateCalls",
		serviceURL + "CreateOrUpdateUsers",
		serviceURL + "TranscribeCall",
		serviceURL + "StopTranscribeCall",
		serviceURL + "StartBroadcast",
		serviceURL + "StopBroadcast",
		serviceURL + "StartRecording",
		serviceURL + "StopRecording",
		serviceURL + "GetRecordings",
		serviceURL + "CreateUser",
		serviceURL + "DeleteUser",
		serviceURL + "ExportUser",
		serviceURL + "UpdateAppSettings",
		serviceURL + "GetAppSettings",
		serviceURL + "CreateCallType",
		serviceURL + "UpdateCallType",
		serviceURL + "DeleteCallType",
		serviceURL + "ListPermissions",
		serviceURL + "CreateRole",
		serviceURL + "DeleteRole",
		serviceURL + "AddPushProvider",
		serviceURL + "UpdatePushProvider",
		serviceURL + "DeletePushProvider",
		serviceURL + "ReportCallStats",
		serviceURL + "GetCallStats",
		serviceURL + "ReviewCall",
		serviceURL + "ReportIssue",
	}

	return &callCoordinatorServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *callCoordinatorServiceProtobufClient) CreateCall(ctx context.Context, in *CreateCallRequest) (*CreateCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCall")
	caller := c.callCreateCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateCallRequest) (*CreateCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateCallRequest) when calling interceptor")
					}
					return c.callCreateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callCreateCall(ctx context.Context, in *CreateCallRequest) (*CreateCallResponse, error) {
	out := new(CreateCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) GetCall(ctx context.Context, in *GetCallRequest) (*GetCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCall")
	caller := c.callGetCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCallRequest) (*GetCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallRequest) when calling interceptor")
					}
					return c.callGetCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callGetCall(ctx context.Context, in *GetCallRequest) (*GetCallResponse, error) {
	out := new(GetCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) UpdateCall(ctx context.Context, in *UpdateCallRequest) (*UpdateCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCall")
	caller := c.callUpdateCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateCallRequest) (*UpdateCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCallRequest) when calling interceptor")
					}
					return c.callUpdateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callUpdateCall(ctx context.Context, in *UpdateCallRequest) (*UpdateCallResponse, error) {
	out := new(UpdateCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) DeleteCall(ctx context.Context, in *DeleteCallRequest) (*DeleteCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCall")
	caller := c.callDeleteCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteCallRequest) (*DeleteCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallRequest) when calling interceptor")
					}
					return c.callDeleteCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callDeleteCall(ctx context.Context, in *DeleteCallRequest) (*DeleteCallResponse, error) {
	out := new(DeleteCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) JoinCall(ctx context.Context, in *JoinCallRequest) (*JoinCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "JoinCall")
	caller := c.callJoinCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JoinCallRequest) (*JoinCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JoinCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JoinCallRequest) when calling interceptor")
					}
					return c.callJoinCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JoinCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JoinCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callJoinCall(ctx context.Context, in *JoinCallRequest) (*JoinCallResponse, error) {
	out := new(JoinCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) SelectEdgeServer(ctx context.Context, in *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "SelectEdgeServer")
	caller := c.callSelectEdgeServer
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SelectEdgeServerRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SelectEdgeServerRequest) when calling interceptor")
					}
					return c.callSelectEdgeServer(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SelectEdgeServerResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SelectEdgeServerResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callSelectEdgeServer(ctx context.Context, in *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
	out := new(SelectEdgeServerResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) LeaveCall(ctx context.Context, in *LeaveCallRequest) (*LeaveCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "LeaveCall")
	caller := c.callLeaveCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaveCallRequest) (*LeaveCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaveCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaveCallRequest) when calling interceptor")
					}
					return c.callLeaveCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaveCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaveCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callLeaveCall(ctx context.Context, in *LeaveCallRequest) (*LeaveCallResponse, error) {
	out := new(LeaveCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) EndCall(ctx context.Context, in *EndCallRequest) (*EndCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "EndCall")
	caller := c.callEndCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EndCallRequest) (*EndCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndCallRequest) when calling interceptor")
					}
					return c.callEndCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EndCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EndCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callEndCall(ctx context.Context, in *EndCallRequest) (*EndCallResponse, error) {
	out := new(EndCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) AddDevice(ctx context.Context, in *AddDeviceRequest) (*AddDeviceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "AddDevice")
	caller := c.callAddDevice
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddDeviceRequest) (*AddDeviceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddDeviceRequest) when calling interceptor")
					}
					return c.callAddDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callAddDevice(ctx context.Context, in *AddDeviceRequest) (*AddDeviceResponse, error) {
	out := new(AddDeviceResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) RemoveDevice(ctx context.Context, in *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveDevice")
	caller := c.callRemoveDevice
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveDeviceRequest) when calling interceptor")
					}
					return c.callRemoveDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callRemoveDevice(ctx context.Context, in *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
	out := new(RemoveDeviceResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) ListDevices(ctx context.Context, in *ListDevicesRequest) (*ListDevicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ListDevices")
	caller := c.callListDevices
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDevicesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDevicesRequest) when calling interceptor")
					}
					return c.callListDevices(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDevicesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDevicesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callListDevices(ctx context.Context, in *ListDevicesRequest) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) SendEvent(ctx context.Context, in *SendEventRequest) (*SendEventResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "SendEvent")
	caller := c.callSendEvent
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SendEventRequest) (*SendEventResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendEventRequest) when calling interceptor")
					}
					return c.callSendEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callSendEvent(ctx context.Context, in *SendEventRequest) (*SendEventResponse, error) {
	out := new(SendEventResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) SendCustomEvent(ctx context.Context, in *SendCustomEventRequest) (*SendCustomEventResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "SendCustomEvent")
	caller := c.callSendCustomEvent
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SendCustomEventRequest) (*SendCustomEventResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendCustomEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendCustomEventRequest) when calling interceptor")
					}
					return c.callSendCustomEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendCustomEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendCustomEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callSendCustomEvent(ctx context.Context, in *SendCustomEventRequest) (*SendCustomEventResponse, error) {
	out := new(SendCustomEventResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) CreateOrUpdateCalls(ctx context.Context, in *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateCalls")
	caller := c.callCreateOrUpdateCalls
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateCallsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateCallsRequest) when calling interceptor")
					}
					return c.callCreateOrUpdateCalls(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateCallsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateCallsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callCreateOrUpdateCalls(ctx context.Context, in *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
	out := new(CreateOrUpdateCallsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) CreateOrUpdateUsers(ctx context.Context, in *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateUsers")
	caller := c.callCreateOrUpdateUsers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateUsersRequest) when calling interceptor")
					}
					return c.callCreateOrUpdateUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callCreateOrUpdateUsers(ctx context.Context, in *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
	out := new(CreateOrUpdateUsersResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) TranscribeCall(ctx context.Context, in *TranscribeCallRequest) (*TranscribeCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "TranscribeCall")
	caller := c.callTranscribeCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TranscribeCallRequest) (*TranscribeCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TranscribeCallRequest) when calling interceptor")
					}
					return c.callTranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callTranscribeCall(ctx context.Context, in *TranscribeCallRequest) (*TranscribeCallResponse, error) {
	out := new(TranscribeCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) StopTranscribeCall(ctx context.Context, in *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StopTranscribeCall")
	caller := c.callStopTranscribeCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopTranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopTranscribeCallRequest) when calling interceptor")
					}
					return c.callStopTranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopTranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopTranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callStopTranscribeCall(ctx context.Context, in *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
	out := new(StopTranscribeCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) StartBroadcast(ctx context.Context, in *StartBroadcastRequest) (*StartBroadcastResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StartBroadcast")
	caller := c.callStartBroadcast
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StartBroadcastRequest) (*StartBroadcastResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartBroadcastRequest) when calling interceptor")
					}
					return c.callStartBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callStartBroadcast(ctx context.Context, in *StartBroadcastRequest) (*StartBroadcastResponse, error) {
	out := new(StartBroadcastResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) StopBroadcast(ctx context.Context, in *StopBroadcastRequest) (*StopBroadcastResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StopBroadcast")
	caller := c.callStopBroadcast
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopBroadcastRequest) (*StopBroadcastResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopBroadcastRequest) when calling interceptor")
					}
					return c.callStopBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callStopBroadcast(ctx context.Context, in *StopBroadcastRequest) (*StopBroadcastResponse, error) {
	out := new(StopBroadcastResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) StartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	caller := c.callStartRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return c.callStartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callStartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	out := new(StartRecordingResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) StopRecording(ctx context.Context, in *StopRecordingRequest) (*StopRecordingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StopRecording")
	caller := c.callStopRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopRecordingRequest) (*StopRecordingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopRecordingRequest) when calling interceptor")
					}
					return c.callStopRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callStopRecording(ctx context.Context, in *StopRecordingRequest) (*StopRecordingResponse, error) {
	out := new(StopRecordingResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) GetRecordings(ctx context.Context, in *GetRecordingsRequest) (*GetRecordingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRecordings")
	caller := c.callGetRecordings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRecordingsRequest) (*GetRecordingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRecordingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRecordingsRequest) when calling interceptor")
					}
					return c.callGetRecordings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRecordingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRecordingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callGetRecordings(ctx context.Context, in *GetRecordingsRequest) (*GetRecordingsResponse, error) {
	out := new(GetRecordingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) CreateUser(ctx context.Context, in *CreateUserRequest) (*CreateUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUser")
	caller := c.callCreateUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUserRequest) when calling interceptor")
					}
					return c.callCreateUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callCreateUser(ctx context.Context, in *CreateUserRequest) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) DeleteUser(ctx context.Context, in *DeleteUserRequest) (*DeleteUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUser")
	caller := c.callDeleteUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteUserRequest) when calling interceptor")
					}
					return c.callDeleteUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callDeleteUser(ctx context.Context, in *DeleteUserRequest) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) ExportUser(ctx context.Context, in *ExportUserRequest) (*ExportUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ExportUser")
	caller := c.callExportUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExportUserRequest) (*ExportUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExportUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExportUserRequest) when calling interceptor")
					}
					return c.callExportUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExportUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExportUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callExportUser(ctx context.Context, in *ExportUserRequest) (*ExportUserResponse, error) {
	out := new(ExportUserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) UpdateAppSettings(ctx context.Context, in *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAppSettings")
	caller := c.callUpdateAppSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAppSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAppSettingsRequest) when calling interceptor")
					}
					return c.callUpdateAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callUpdateAppSettings(ctx context.Context, in *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[25], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) GetAppSettings(ctx context.Context, in *google_protobuf.Empty) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetAppSettings")
	caller := c.callGetAppSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callGetAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callGetAppSettings(ctx context.Context, in *google_protobuf.Empty) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[26], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) CreateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCallType")
	caller := c.callCreateCallType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return c.callCreateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callCreateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	out := new(CallTypeResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[27], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) UpdateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCallType")
	caller := c.callUpdateCallType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return c.callUpdateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callUpdateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	out := new(CallTypeResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[28], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) DeleteCallType(ctx context.Context, in *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCallType")
	caller := c.callDeleteCallType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallTypeRequest) when calling interceptor")
					}
					return c.callDeleteCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callDeleteCallType(ctx context.Context, in *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
	out := new(DeleteCallTypeResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[29], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPermissions")
	caller := c.callListPermissions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPermissionsRequest) (*ListPermissionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPermissionsRequest) when calling interceptor")
					}
					return c.callListPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callListPermissions(ctx context.Context, in *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[30], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) CreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	caller := c.callCreateRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return c.callCreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callCreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[31], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	caller := c.callDeleteRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return c.callDeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callDeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[32], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) AddPushProvider(ctx context.Context, in *AddPushProviderRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "AddPushProvider")
	caller := c.callAddPushProvider
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddPushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddPushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddPushProviderRequest) when calling interceptor")
					}
					return c.callAddPushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callAddPushProvider(ctx context.Context, in *AddPushProviderRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[33], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) UpdatePushProvider(ctx context.Context, in *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePushProvider")
	caller := c.callUpdatePushProvider
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePushProviderRequest) when calling interceptor")
					}
					return c.callUpdatePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callUpdatePushProvider(ctx context.Context, in *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[34], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) DeletePushProvider(ctx context.Context, in *DeletePushProviderRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeletePushProvider")
	caller := c.callDeletePushProvider
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeletePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePushProviderRequest) when calling interceptor")
					}
					return c.callDeletePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callDeletePushProvider(ctx context.Context, in *DeletePushProviderRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[35], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) ReportCallStats(ctx context.Context, in *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportCallStats")
	caller := c.callReportCallStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportCallStatsRequest) when calling interceptor")
					}
					return c.callReportCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callReportCallStats(ctx context.Context, in *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
	out := new(ReportCallStatsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[36], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) GetCallStats(ctx context.Context, in *GetCallStatsRequest) (*GetCallStatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCallStats")
	caller := c.callGetCallStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCallStatsRequest) (*GetCallStatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallStatsRequest) when calling interceptor")
					}
					return c.callGetCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callGetCallStats(ctx context.Context, in *GetCallStatsRequest) (*GetCallStatsResponse, error) {
	out := new(GetCallStatsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[37], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) ReviewCall(ctx context.Context, in *ReviewCallRequest) (*ReviewCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ReviewCall")
	caller := c.callReviewCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReviewCallRequest) (*ReviewCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReviewCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReviewCallRequest) when calling interceptor")
					}
					return c.callReviewCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReviewCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReviewCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callReviewCall(ctx context.Context, in *ReviewCallRequest) (*ReviewCallResponse, error) {
	out := new(ReviewCallResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[38], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceProtobufClient) ReportIssue(ctx context.Context, in *ReportIssueRequest) (*ReportIssueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportIssue")
	caller := c.callReportIssue
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReportIssueRequest) (*ReportIssueResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportIssueRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportIssueRequest) when calling interceptor")
					}
					return c.callReportIssue(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportIssueResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportIssueResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceProtobufClient) callReportIssue(ctx context.Context, in *ReportIssueRequest) (*ReportIssueResponse, error) {
	out := new(ReportIssueResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[39], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==================================
// CallCoordinatorService JSON Client
// ==================================

type callCoordinatorServiceJSONClient struct {
	client      HTTPClient
	urls        [40]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewCallCoordinatorServiceJSONClient creates a JSON client that implements the CallCoordinatorService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewCallCoordinatorServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) CallCoordinatorService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "stream.video", "CallCoordinatorService")
	urls := [40]string{
		serviceURL + "CreateCall",
		serviceURL + "GetCall",
		serviceURL + "UpdateCall",
		serviceURL + "DeleteCall",
		serviceURL + "JoinCall",
		serviceURL + "SelectEdgeServer",
		serviceURL + "LeaveCall",
		serviceURL + "EndCall",
		serviceURL + "AddDevice",
		serviceURL + "RemoveDevice",
		serviceURL + "ListDevices",
		serviceURL + "SendEvent",
		serviceURL + "SendCustomEvent",
		serviceURL + "CreateOrUpdateCalls",
		serviceURL + "CreateOrUpdateUsers",
		serviceURL + "TranscribeCall",
		serviceURL + "StopTranscribeCall",
		serviceURL + "StartBroadcast",
		serviceURL + "StopBroadcast",
		serviceURL + "StartRecording",
		serviceURL + "StopRecording",
		serviceURL + "GetRecordings",
		serviceURL + "CreateUser",
		serviceURL + "DeleteUser",
		serviceURL + "ExportUser",
		serviceURL + "UpdateAppSettings",
		serviceURL + "GetAppSettings",
		serviceURL + "CreateCallType",
		serviceURL + "UpdateCallType",
		serviceURL + "DeleteCallType",
		serviceURL + "ListPermissions",
		serviceURL + "CreateRole",
		serviceURL + "DeleteRole",
		serviceURL + "AddPushProvider",
		serviceURL + "UpdatePushProvider",
		serviceURL + "DeletePushProvider",
		serviceURL + "ReportCallStats",
		serviceURL + "GetCallStats",
		serviceURL + "ReviewCall",
		serviceURL + "ReportIssue",
	}

	return &callCoordinatorServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *callCoordinatorServiceJSONClient) CreateCall(ctx context.Context, in *CreateCallRequest) (*CreateCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCall")
	caller := c.callCreateCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateCallRequest) (*CreateCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateCallRequest) when calling interceptor")
					}
					return c.callCreateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callCreateCall(ctx context.Context, in *CreateCallRequest) (*CreateCallResponse, error) {
	out := new(CreateCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) GetCall(ctx context.Context, in *GetCallRequest) (*GetCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCall")
	caller := c.callGetCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCallRequest) (*GetCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallRequest) when calling interceptor")
					}
					return c.callGetCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callGetCall(ctx context.Context, in *GetCallRequest) (*GetCallResponse, error) {
	out := new(GetCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) UpdateCall(ctx context.Context, in *UpdateCallRequest) (*UpdateCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCall")
	caller := c.callUpdateCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateCallRequest) (*UpdateCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCallRequest) when calling interceptor")
					}
					return c.callUpdateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callUpdateCall(ctx context.Context, in *UpdateCallRequest) (*UpdateCallResponse, error) {
	out := new(UpdateCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) DeleteCall(ctx context.Context, in *DeleteCallRequest) (*DeleteCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCall")
	caller := c.callDeleteCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteCallRequest) (*DeleteCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallRequest) when calling interceptor")
					}
					return c.callDeleteCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callDeleteCall(ctx context.Context, in *DeleteCallRequest) (*DeleteCallResponse, error) {
	out := new(DeleteCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) JoinCall(ctx context.Context, in *JoinCallRequest) (*JoinCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "JoinCall")
	caller := c.callJoinCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JoinCallRequest) (*JoinCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JoinCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JoinCallRequest) when calling interceptor")
					}
					return c.callJoinCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JoinCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JoinCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callJoinCall(ctx context.Context, in *JoinCallRequest) (*JoinCallResponse, error) {
	out := new(JoinCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) SelectEdgeServer(ctx context.Context, in *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "SelectEdgeServer")
	caller := c.callSelectEdgeServer
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SelectEdgeServerRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SelectEdgeServerRequest) when calling interceptor")
					}
					return c.callSelectEdgeServer(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SelectEdgeServerResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SelectEdgeServerResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callSelectEdgeServer(ctx context.Context, in *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
	out := new(SelectEdgeServerResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) LeaveCall(ctx context.Context, in *LeaveCallRequest) (*LeaveCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "LeaveCall")
	caller := c.callLeaveCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaveCallRequest) (*LeaveCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaveCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaveCallRequest) when calling interceptor")
					}
					return c.callLeaveCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaveCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaveCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callLeaveCall(ctx context.Context, in *LeaveCallRequest) (*LeaveCallResponse, error) {
	out := new(LeaveCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) EndCall(ctx context.Context, in *EndCallRequest) (*EndCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "EndCall")
	caller := c.callEndCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EndCallRequest) (*EndCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndCallRequest) when calling interceptor")
					}
					return c.callEndCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EndCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EndCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callEndCall(ctx context.Context, in *EndCallRequest) (*EndCallResponse, error) {
	out := new(EndCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) AddDevice(ctx context.Context, in *AddDeviceRequest) (*AddDeviceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "AddDevice")
	caller := c.callAddDevice
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddDeviceRequest) (*AddDeviceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddDeviceRequest) when calling interceptor")
					}
					return c.callAddDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callAddDevice(ctx context.Context, in *AddDeviceRequest) (*AddDeviceResponse, error) {
	out := new(AddDeviceResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) RemoveDevice(ctx context.Context, in *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveDevice")
	caller := c.callRemoveDevice
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveDeviceRequest) when calling interceptor")
					}
					return c.callRemoveDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callRemoveDevice(ctx context.Context, in *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
	out := new(RemoveDeviceResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) ListDevices(ctx context.Context, in *ListDevicesRequest) (*ListDevicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ListDevices")
	caller := c.callListDevices
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDevicesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDevicesRequest) when calling interceptor")
					}
					return c.callListDevices(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDevicesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDevicesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callListDevices(ctx context.Context, in *ListDevicesRequest) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) SendEvent(ctx context.Context, in *SendEventRequest) (*SendEventResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "SendEvent")
	caller := c.callSendEvent
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SendEventRequest) (*SendEventResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendEventRequest) when calling interceptor")
					}
					return c.callSendEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callSendEvent(ctx context.Context, in *SendEventRequest) (*SendEventResponse, error) {
	out := new(SendEventResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) SendCustomEvent(ctx context.Context, in *SendCustomEventRequest) (*SendCustomEventResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "SendCustomEvent")
	caller := c.callSendCustomEvent
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SendCustomEventRequest) (*SendCustomEventResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendCustomEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendCustomEventRequest) when calling interceptor")
					}
					return c.callSendCustomEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendCustomEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendCustomEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callSendCustomEvent(ctx context.Context, in *SendCustomEventRequest) (*SendCustomEventResponse, error) {
	out := new(SendCustomEventResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) CreateOrUpdateCalls(ctx context.Context, in *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateCalls")
	caller := c.callCreateOrUpdateCalls
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateCallsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateCallsRequest) when calling interceptor")
					}
					return c.callCreateOrUpdateCalls(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateCallsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateCallsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callCreateOrUpdateCalls(ctx context.Context, in *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
	out := new(CreateOrUpdateCallsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) CreateOrUpdateUsers(ctx context.Context, in *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateUsers")
	caller := c.callCreateOrUpdateUsers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateUsersRequest) when calling interceptor")
					}
					return c.callCreateOrUpdateUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callCreateOrUpdateUsers(ctx context.Context, in *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
	out := new(CreateOrUpdateUsersResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) TranscribeCall(ctx context.Context, in *TranscribeCallRequest) (*TranscribeCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "TranscribeCall")
	caller := c.callTranscribeCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TranscribeCallRequest) (*TranscribeCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TranscribeCallRequest) when calling interceptor")
					}
					return c.callTranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callTranscribeCall(ctx context.Context, in *TranscribeCallRequest) (*TranscribeCallResponse, error) {
	out := new(TranscribeCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) StopTranscribeCall(ctx context.Context, in *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StopTranscribeCall")
	caller := c.callStopTranscribeCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopTranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopTranscribeCallRequest) when calling interceptor")
					}
					return c.callStopTranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopTranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopTranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callStopTranscribeCall(ctx context.Context, in *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
	out := new(StopTranscribeCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) StartBroadcast(ctx context.Context, in *StartBroadcastRequest) (*StartBroadcastResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StartBroadcast")
	caller := c.callStartBroadcast
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StartBroadcastRequest) (*StartBroadcastResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartBroadcastRequest) when calling interceptor")
					}
					return c.callStartBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callStartBroadcast(ctx context.Context, in *StartBroadcastRequest) (*StartBroadcastResponse, error) {
	out := new(StartBroadcastResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) StopBroadcast(ctx context.Context, in *StopBroadcastRequest) (*StopBroadcastResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StopBroadcast")
	caller := c.callStopBroadcast
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopBroadcastRequest) (*StopBroadcastResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopBroadcastRequest) when calling interceptor")
					}
					return c.callStopBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callStopBroadcast(ctx context.Context, in *StopBroadcastRequest) (*StopBroadcastResponse, error) {
	out := new(StopBroadcastResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) StartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	caller := c.callStartRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return c.callStartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callStartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	out := new(StartRecordingResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) StopRecording(ctx context.Context, in *StopRecordingRequest) (*StopRecordingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "StopRecording")
	caller := c.callStopRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopRecordingRequest) (*StopRecordingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopRecordingRequest) when calling interceptor")
					}
					return c.callStopRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callStopRecording(ctx context.Context, in *StopRecordingRequest) (*StopRecordingResponse, error) {
	out := new(StopRecordingResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) GetRecordings(ctx context.Context, in *GetRecordingsRequest) (*GetRecordingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRecordings")
	caller := c.callGetRecordings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRecordingsRequest) (*GetRecordingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRecordingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRecordingsRequest) when calling interceptor")
					}
					return c.callGetRecordings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRecordingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRecordingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callGetRecordings(ctx context.Context, in *GetRecordingsRequest) (*GetRecordingsResponse, error) {
	out := new(GetRecordingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) CreateUser(ctx context.Context, in *CreateUserRequest) (*CreateUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUser")
	caller := c.callCreateUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUserRequest) when calling interceptor")
					}
					return c.callCreateUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callCreateUser(ctx context.Context, in *CreateUserRequest) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) DeleteUser(ctx context.Context, in *DeleteUserRequest) (*DeleteUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUser")
	caller := c.callDeleteUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteUserRequest) when calling interceptor")
					}
					return c.callDeleteUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callDeleteUser(ctx context.Context, in *DeleteUserRequest) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) ExportUser(ctx context.Context, in *ExportUserRequest) (*ExportUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ExportUser")
	caller := c.callExportUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExportUserRequest) (*ExportUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExportUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExportUserRequest) when calling interceptor")
					}
					return c.callExportUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExportUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExportUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callExportUser(ctx context.Context, in *ExportUserRequest) (*ExportUserResponse, error) {
	out := new(ExportUserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) UpdateAppSettings(ctx context.Context, in *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAppSettings")
	caller := c.callUpdateAppSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAppSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAppSettingsRequest) when calling interceptor")
					}
					return c.callUpdateAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callUpdateAppSettings(ctx context.Context, in *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[25], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) GetAppSettings(ctx context.Context, in *google_protobuf.Empty) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetAppSettings")
	caller := c.callGetAppSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callGetAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callGetAppSettings(ctx context.Context, in *google_protobuf.Empty) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[26], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) CreateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCallType")
	caller := c.callCreateCallType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return c.callCreateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callCreateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	out := new(CallTypeResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[27], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) UpdateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCallType")
	caller := c.callUpdateCallType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return c.callUpdateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callUpdateCallType(ctx context.Context, in *CallTypeRequestInput) (*CallTypeResponse, error) {
	out := new(CallTypeResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[28], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) DeleteCallType(ctx context.Context, in *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCallType")
	caller := c.callDeleteCallType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallTypeRequest) when calling interceptor")
					}
					return c.callDeleteCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callDeleteCallType(ctx context.Context, in *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
	out := new(DeleteCallTypeResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[29], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPermissions")
	caller := c.callListPermissions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPermissionsRequest) (*ListPermissionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPermissionsRequest) when calling interceptor")
					}
					return c.callListPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callListPermissions(ctx context.Context, in *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[30], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) CreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	caller := c.callCreateRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return c.callCreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callCreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[31], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	caller := c.callDeleteRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return c.callDeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callDeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[32], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) AddPushProvider(ctx context.Context, in *AddPushProviderRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "AddPushProvider")
	caller := c.callAddPushProvider
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddPushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddPushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddPushProviderRequest) when calling interceptor")
					}
					return c.callAddPushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callAddPushProvider(ctx context.Context, in *AddPushProviderRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[33], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) UpdatePushProvider(ctx context.Context, in *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePushProvider")
	caller := c.callUpdatePushProvider
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePushProviderRequest) when calling interceptor")
					}
					return c.callUpdatePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callUpdatePushProvider(ctx context.Context, in *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[34], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) DeletePushProvider(ctx context.Context, in *DeletePushProviderRequest) (*AppSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "DeletePushProvider")
	caller := c.callDeletePushProvider
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeletePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePushProviderRequest) when calling interceptor")
					}
					return c.callDeletePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callDeletePushProvider(ctx context.Context, in *DeletePushProviderRequest) (*AppSettingsResponse, error) {
	out := new(AppSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[35], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) ReportCallStats(ctx context.Context, in *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportCallStats")
	caller := c.callReportCallStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportCallStatsRequest) when calling interceptor")
					}
					return c.callReportCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callReportCallStats(ctx context.Context, in *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
	out := new(ReportCallStatsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[36], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) GetCallStats(ctx context.Context, in *GetCallStatsRequest) (*GetCallStatsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCallStats")
	caller := c.callGetCallStats
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCallStatsRequest) (*GetCallStatsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallStatsRequest) when calling interceptor")
					}
					return c.callGetCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callGetCallStats(ctx context.Context, in *GetCallStatsRequest) (*GetCallStatsResponse, error) {
	out := new(GetCallStatsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[37], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) ReviewCall(ctx context.Context, in *ReviewCallRequest) (*ReviewCallResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ReviewCall")
	caller := c.callReviewCall
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReviewCallRequest) (*ReviewCallResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReviewCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReviewCallRequest) when calling interceptor")
					}
					return c.callReviewCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReviewCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReviewCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callReviewCall(ctx context.Context, in *ReviewCallRequest) (*ReviewCallResponse, error) {
	out := new(ReviewCallResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[38], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *callCoordinatorServiceJSONClient) ReportIssue(ctx context.Context, in *ReportIssueRequest) (*ReportIssueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportIssue")
	caller := c.callReportIssue
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReportIssueRequest) (*ReportIssueResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportIssueRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportIssueRequest) when calling interceptor")
					}
					return c.callReportIssue(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportIssueResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportIssueResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *callCoordinatorServiceJSONClient) callReportIssue(ctx context.Context, in *ReportIssueRequest) (*ReportIssueResponse, error) {
	out := new(ReportIssueResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[39], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =====================================
// CallCoordinatorService Server Handler
// =====================================

type callCoordinatorServiceServer struct {
	CallCoordinatorService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewCallCoordinatorServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewCallCoordinatorServiceServer(svc CallCoordinatorService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &callCoordinatorServiceServer{
		CallCoordinatorService: svc,
		hooks:                  serverOpts.Hooks,
		interceptor:            twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:             pathPrefix,
		jsonSkipDefaults:       jsonSkipDefaults,
		jsonCamelCase:          jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *callCoordinatorServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *callCoordinatorServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// CallCoordinatorServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const CallCoordinatorServicePathPrefix = "/twirp/stream.video.CallCoordinatorService/"

func (s *callCoordinatorServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "stream.video")
	ctx = ctxsetters.WithServiceName(ctx, "CallCoordinatorService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "stream.video.CallCoordinatorService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateCall":
		s.serveCreateCall(ctx, resp, req)
		return
	case "GetCall":
		s.serveGetCall(ctx, resp, req)
		return
	case "UpdateCall":
		s.serveUpdateCall(ctx, resp, req)
		return
	case "DeleteCall":
		s.serveDeleteCall(ctx, resp, req)
		return
	case "JoinCall":
		s.serveJoinCall(ctx, resp, req)
		return
	case "SelectEdgeServer":
		s.serveSelectEdgeServer(ctx, resp, req)
		return
	case "LeaveCall":
		s.serveLeaveCall(ctx, resp, req)
		return
	case "EndCall":
		s.serveEndCall(ctx, resp, req)
		return
	case "AddDevice":
		s.serveAddDevice(ctx, resp, req)
		return
	case "RemoveDevice":
		s.serveRemoveDevice(ctx, resp, req)
		return
	case "ListDevices":
		s.serveListDevices(ctx, resp, req)
		return
	case "SendEvent":
		s.serveSendEvent(ctx, resp, req)
		return
	case "SendCustomEvent":
		s.serveSendCustomEvent(ctx, resp, req)
		return
	case "CreateOrUpdateCalls":
		s.serveCreateOrUpdateCalls(ctx, resp, req)
		return
	case "CreateOrUpdateUsers":
		s.serveCreateOrUpdateUsers(ctx, resp, req)
		return
	case "TranscribeCall":
		s.serveTranscribeCall(ctx, resp, req)
		return
	case "StopTranscribeCall":
		s.serveStopTranscribeCall(ctx, resp, req)
		return
	case "StartBroadcast":
		s.serveStartBroadcast(ctx, resp, req)
		return
	case "StopBroadcast":
		s.serveStopBroadcast(ctx, resp, req)
		return
	case "StartRecording":
		s.serveStartRecording(ctx, resp, req)
		return
	case "StopRecording":
		s.serveStopRecording(ctx, resp, req)
		return
	case "GetRecordings":
		s.serveGetRecordings(ctx, resp, req)
		return
	case "CreateUser":
		s.serveCreateUser(ctx, resp, req)
		return
	case "DeleteUser":
		s.serveDeleteUser(ctx, resp, req)
		return
	case "ExportUser":
		s.serveExportUser(ctx, resp, req)
		return
	case "UpdateAppSettings":
		s.serveUpdateAppSettings(ctx, resp, req)
		return
	case "GetAppSettings":
		s.serveGetAppSettings(ctx, resp, req)
		return
	case "CreateCallType":
		s.serveCreateCallType(ctx, resp, req)
		return
	case "UpdateCallType":
		s.serveUpdateCallType(ctx, resp, req)
		return
	case "DeleteCallType":
		s.serveDeleteCallType(ctx, resp, req)
		return
	case "ListPermissions":
		s.serveListPermissions(ctx, resp, req)
		return
	case "CreateRole":
		s.serveCreateRole(ctx, resp, req)
		return
	case "DeleteRole":
		s.serveDeleteRole(ctx, resp, req)
		return
	case "AddPushProvider":
		s.serveAddPushProvider(ctx, resp, req)
		return
	case "UpdatePushProvider":
		s.serveUpdatePushProvider(ctx, resp, req)
		return
	case "DeletePushProvider":
		s.serveDeletePushProvider(ctx, resp, req)
		return
	case "ReportCallStats":
		s.serveReportCallStats(ctx, resp, req)
		return
	case "GetCallStats":
		s.serveGetCallStats(ctx, resp, req)
		return
	case "ReviewCall":
		s.serveReviewCall(ctx, resp, req)
		return
	case "ReportIssue":
		s.serveReportIssue(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *callCoordinatorServiceServer) serveCreateCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveCreateCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.CreateCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateCallRequest) (*CreateCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateCallResponse and nil error while calling CreateCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.CreateCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateCallRequest) (*CreateCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateCallResponse and nil error while calling CreateCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveGetCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.GetCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCallRequest) (*GetCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.GetCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetCallResponse and nil error while calling GetCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.GetCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCallRequest) (*GetCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.GetCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetCallResponse and nil error while calling GetCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdateCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveUpdateCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.UpdateCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateCallRequest) (*UpdateCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateCallResponse and nil error while calling UpdateCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdateCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.UpdateCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateCallRequest) (*UpdateCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdateCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateCallResponse and nil error while calling UpdateCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveDeleteCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.DeleteCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteCallRequest) (*DeleteCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteCallResponse and nil error while calling DeleteCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.DeleteCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteCallRequest) (*DeleteCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteCallResponse and nil error while calling DeleteCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveJoinCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveJoinCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveJoinCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveJoinCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "JoinCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(JoinCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.JoinCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JoinCallRequest) (*JoinCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JoinCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JoinCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.JoinCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JoinCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JoinCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JoinCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JoinCallResponse and nil error while calling JoinCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveJoinCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "JoinCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(JoinCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.JoinCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JoinCallRequest) (*JoinCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JoinCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JoinCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.JoinCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JoinCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JoinCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JoinCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JoinCallResponse and nil error while calling JoinCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveSelectEdgeServer(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSelectEdgeServerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSelectEdgeServerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveSelectEdgeServerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SelectEdgeServer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SelectEdgeServerRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.SelectEdgeServer
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SelectEdgeServerRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SelectEdgeServerRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.SelectEdgeServer(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SelectEdgeServerResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SelectEdgeServerResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SelectEdgeServerResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SelectEdgeServerResponse and nil error while calling SelectEdgeServer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveSelectEdgeServerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SelectEdgeServer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SelectEdgeServerRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.SelectEdgeServer
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SelectEdgeServerRequest) (*SelectEdgeServerResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SelectEdgeServerRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SelectEdgeServerRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.SelectEdgeServer(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SelectEdgeServerResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SelectEdgeServerResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SelectEdgeServerResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SelectEdgeServerResponse and nil error while calling SelectEdgeServer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveLeaveCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLeaveCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLeaveCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveLeaveCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LeaveCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(LeaveCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.LeaveCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaveCallRequest) (*LeaveCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaveCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaveCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.LeaveCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaveCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaveCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaveCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaveCallResponse and nil error while calling LeaveCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveLeaveCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LeaveCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(LeaveCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.LeaveCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaveCallRequest) (*LeaveCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaveCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaveCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.LeaveCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaveCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaveCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaveCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaveCallResponse and nil error while calling LeaveCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveEndCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveEndCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveEndCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveEndCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EndCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(EndCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.EndCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EndCallRequest) (*EndCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.EndCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EndCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EndCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EndCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EndCallResponse and nil error while calling EndCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveEndCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EndCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(EndCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.EndCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EndCallRequest) (*EndCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.EndCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EndCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EndCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EndCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EndCallResponse and nil error while calling EndCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveAddDevice(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddDeviceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddDeviceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveAddDeviceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddDeviceRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.AddDevice
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddDeviceRequest) (*AddDeviceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddDeviceRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.AddDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddDeviceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddDeviceResponse and nil error while calling AddDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveAddDeviceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddDeviceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.AddDevice
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddDeviceRequest) (*AddDeviceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddDeviceRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.AddDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddDeviceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddDeviceResponse and nil error while calling AddDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveRemoveDevice(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveDeviceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveDeviceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveRemoveDeviceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RemoveDeviceRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.RemoveDevice
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveDeviceRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.RemoveDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RemoveDeviceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoveDeviceResponse and nil error while calling RemoveDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveRemoveDeviceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RemoveDeviceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.RemoveDevice
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveDeviceRequest) (*RemoveDeviceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveDeviceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveDeviceRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.RemoveDevice(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RemoveDeviceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RemoveDeviceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RemoveDeviceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoveDeviceResponse and nil error while calling RemoveDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveListDevices(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListDevicesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListDevicesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveListDevicesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListDevices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListDevicesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.ListDevices
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDevicesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDevicesRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ListDevices(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDevicesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDevicesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListDevicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListDevicesResponse and nil error while calling ListDevices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveListDevicesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListDevices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListDevicesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.ListDevices
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDevicesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDevicesRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ListDevices(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDevicesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDevicesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListDevicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListDevicesResponse and nil error while calling ListDevices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveSendEvent(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSendEventJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSendEventProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveSendEventJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendEvent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SendEventRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.SendEvent
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SendEventRequest) (*SendEventResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendEventRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.SendEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SendEventResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SendEventResponse and nil error while calling SendEvent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveSendEventProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendEvent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SendEventRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.SendEvent
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SendEventRequest) (*SendEventResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendEventRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.SendEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SendEventResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SendEventResponse and nil error while calling SendEvent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveSendCustomEvent(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSendCustomEventJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSendCustomEventProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveSendCustomEventJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendCustomEvent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SendCustomEventRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.SendCustomEvent
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SendCustomEventRequest) (*SendCustomEventResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendCustomEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendCustomEventRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.SendCustomEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendCustomEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendCustomEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SendCustomEventResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SendCustomEventResponse and nil error while calling SendCustomEvent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveSendCustomEventProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendCustomEvent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SendCustomEventRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.SendCustomEvent
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SendCustomEventRequest) (*SendCustomEventResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SendCustomEventRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SendCustomEventRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.SendCustomEvent(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SendCustomEventResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SendCustomEventResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SendCustomEventResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SendCustomEventResponse and nil error while calling SendCustomEvent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateOrUpdateCalls(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateOrUpdateCallsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateOrUpdateCallsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveCreateOrUpdateCallsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateCalls")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateOrUpdateCallsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.CreateOrUpdateCalls
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateCallsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateCallsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateOrUpdateCalls(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateCallsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateCallsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateOrUpdateCallsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateOrUpdateCallsResponse and nil error while calling CreateOrUpdateCalls. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateOrUpdateCallsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateCalls")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateOrUpdateCallsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.CreateOrUpdateCalls
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateOrUpdateCallsRequest) (*CreateOrUpdateCallsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateCallsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateCallsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateOrUpdateCalls(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateCallsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateCallsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateOrUpdateCallsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateOrUpdateCallsResponse and nil error while calling CreateOrUpdateCalls. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateOrUpdateUsers(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateOrUpdateUsersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateOrUpdateUsersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveCreateOrUpdateUsersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateUsers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateOrUpdateUsersRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.CreateOrUpdateUsers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateUsersRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateOrUpdateUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateOrUpdateUsersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateOrUpdateUsersResponse and nil error while calling CreateOrUpdateUsers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateOrUpdateUsersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrUpdateUsers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateOrUpdateUsersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.CreateOrUpdateUsers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateOrUpdateUsersRequest) (*CreateOrUpdateUsersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrUpdateUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrUpdateUsersRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateOrUpdateUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrUpdateUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrUpdateUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateOrUpdateUsersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateOrUpdateUsersResponse and nil error while calling CreateOrUpdateUsers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveTranscribeCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTranscribeCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTranscribeCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveTranscribeCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TranscribeCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(TranscribeCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.TranscribeCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TranscribeCallRequest) (*TranscribeCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TranscribeCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.TranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TranscribeCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TranscribeCallResponse and nil error while calling TranscribeCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveTranscribeCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TranscribeCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(TranscribeCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.TranscribeCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TranscribeCallRequest) (*TranscribeCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TranscribeCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.TranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TranscribeCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TranscribeCallResponse and nil error while calling TranscribeCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStopTranscribeCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStopTranscribeCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStopTranscribeCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveStopTranscribeCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopTranscribeCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StopTranscribeCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.StopTranscribeCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopTranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopTranscribeCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StopTranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopTranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopTranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StopTranscribeCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StopTranscribeCallResponse and nil error while calling StopTranscribeCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStopTranscribeCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopTranscribeCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StopTranscribeCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.StopTranscribeCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopTranscribeCallRequest) (*StopTranscribeCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopTranscribeCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopTranscribeCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StopTranscribeCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopTranscribeCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopTranscribeCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StopTranscribeCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StopTranscribeCallResponse and nil error while calling StopTranscribeCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStartBroadcast(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartBroadcastJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartBroadcastProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveStartBroadcastJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartBroadcast")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StartBroadcastRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.StartBroadcast
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StartBroadcastRequest) (*StartBroadcastResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartBroadcastRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StartBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StartBroadcastResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StartBroadcastResponse and nil error while calling StartBroadcast. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStartBroadcastProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartBroadcast")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StartBroadcastRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.StartBroadcast
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StartBroadcastRequest) (*StartBroadcastResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartBroadcastRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StartBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StartBroadcastResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StartBroadcastResponse and nil error while calling StartBroadcast. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStopBroadcast(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStopBroadcastJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStopBroadcastProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveStopBroadcastJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopBroadcast")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StopBroadcastRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.StopBroadcast
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopBroadcastRequest) (*StopBroadcastResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopBroadcastRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StopBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StopBroadcastResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StopBroadcastResponse and nil error while calling StopBroadcast. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStopBroadcastProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopBroadcast")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StopBroadcastRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.StopBroadcast
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopBroadcastRequest) (*StopBroadcastResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopBroadcastRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopBroadcastRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StopBroadcast(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopBroadcastResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopBroadcastResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StopBroadcastResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StopBroadcastResponse and nil error while calling StopBroadcast. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStartRecording(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartRecordingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartRecordingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveStartRecordingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StartRecordingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.StartRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StartRecordingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StartRecordingResponse and nil error while calling StartRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStartRecordingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StartRecordingRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.StartRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StartRecordingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StartRecordingResponse and nil error while calling StartRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStopRecording(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStopRecordingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStopRecordingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveStopRecordingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StopRecordingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.StopRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopRecordingRequest) (*StopRecordingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopRecordingRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StopRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StopRecordingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StopRecordingResponse and nil error while calling StopRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveStopRecordingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StopRecordingRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.StopRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopRecordingRequest) (*StopRecordingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopRecordingRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.StopRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StopRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StopRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StopRecordingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StopRecordingResponse and nil error while calling StopRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetRecordings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRecordingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRecordingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveGetRecordingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRecordings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetRecordingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.GetRecordings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRecordingsRequest) (*GetRecordingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRecordingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRecordingsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.GetRecordings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRecordingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRecordingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRecordingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRecordingsResponse and nil error while calling GetRecordings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetRecordingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRecordings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetRecordingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.GetRecordings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRecordingsRequest) (*GetRecordingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRecordingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRecordingsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.GetRecordings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRecordingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRecordingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRecordingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRecordingsResponse and nil error while calling GetRecordings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveCreateUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.CreateUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUserRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateUserResponse and nil error while calling CreateUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.CreateUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUserRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateUserResponse and nil error while calling CreateUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveDeleteUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.DeleteUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteUserRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteUserResponse and nil error while calling DeleteUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.DeleteUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteUserRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteUserResponse and nil error while calling DeleteUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveExportUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveExportUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveExportUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveExportUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExportUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ExportUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.ExportUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExportUserRequest) (*ExportUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExportUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExportUserRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ExportUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExportUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExportUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExportUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExportUserResponse and nil error while calling ExportUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveExportUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExportUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ExportUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.ExportUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExportUserRequest) (*ExportUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExportUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExportUserRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ExportUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExportUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExportUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExportUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExportUserResponse and nil error while calling ExportUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdateAppSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAppSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateAppSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveUpdateAppSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAppSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateAppSettingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.UpdateAppSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAppSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAppSettingsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdateAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling UpdateAppSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdateAppSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAppSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateAppSettingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.UpdateAppSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateAppSettingsRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateAppSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateAppSettingsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdateAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling UpdateAppSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetAppSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAppSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAppSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveGetAppSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAppSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.GetAppSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.CallCoordinatorService.GetAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling GetAppSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetAppSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAppSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.GetAppSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.CallCoordinatorService.GetAppSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling GetAppSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateCallType(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateCallTypeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateCallTypeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveCreateCallTypeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCallType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CallTypeRequestInput)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.CreateCallType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CallTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CallTypeResponse and nil error while calling CreateCallType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateCallTypeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCallType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CallTypeRequestInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.CreateCallType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CallTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CallTypeResponse and nil error while calling CreateCallType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdateCallType(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateCallTypeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateCallTypeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveUpdateCallTypeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCallType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CallTypeRequestInput)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.UpdateCallType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CallTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CallTypeResponse and nil error while calling UpdateCallType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdateCallTypeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCallType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CallTypeRequestInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.UpdateCallType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CallTypeRequestInput) (*CallTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CallTypeRequestInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CallTypeRequestInput) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdateCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CallTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CallTypeResponse and nil error while calling UpdateCallType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteCallType(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteCallTypeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteCallTypeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveDeleteCallTypeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCallType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteCallTypeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.DeleteCallType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallTypeRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteCallTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteCallTypeResponse and nil error while calling DeleteCallType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteCallTypeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCallType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteCallTypeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.DeleteCallType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteCallTypeRequest) (*DeleteCallTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteCallTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteCallTypeRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteCallType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteCallTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteCallTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteCallTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteCallTypeResponse and nil error while calling DeleteCallType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveListPermissions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListPermissionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListPermissionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveListPermissionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPermissions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListPermissionsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.ListPermissions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPermissionsRequest) (*ListPermissionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPermissionsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ListPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPermissionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPermissionsResponse and nil error while calling ListPermissions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveListPermissionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPermissions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListPermissionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.ListPermissions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPermissionsRequest) (*ListPermissionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPermissionsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ListPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPermissionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPermissionsResponse and nil error while calling ListPermissions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateRole(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateRoleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateRoleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveCreateRoleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateRoleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.CreateRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateRoleResponse and nil error while calling CreateRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveCreateRoleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateRoleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.CreateRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.CreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateRoleResponse and nil error while calling CreateRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteRole(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteRoleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteRoleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveDeleteRoleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteRoleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.DeleteRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteRoleResponse and nil error while calling DeleteRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeleteRoleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteRoleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.DeleteRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteRoleResponse and nil error while calling DeleteRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveAddPushProvider(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddPushProviderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddPushProviderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveAddPushProviderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddPushProvider")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddPushProviderRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.AddPushProvider
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddPushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddPushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddPushProviderRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.AddPushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling AddPushProvider. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveAddPushProviderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddPushProvider")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddPushProviderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.AddPushProvider
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddPushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddPushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddPushProviderRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.AddPushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling AddPushProvider. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdatePushProvider(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdatePushProviderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdatePushProviderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveUpdatePushProviderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePushProvider")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdatePushProviderRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.UpdatePushProvider
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePushProviderRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdatePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling UpdatePushProvider. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveUpdatePushProviderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePushProvider")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdatePushProviderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.UpdatePushProvider
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePushProviderRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.UpdatePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling UpdatePushProvider. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeletePushProvider(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeletePushProviderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeletePushProviderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveDeletePushProviderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeletePushProvider")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeletePushProviderRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.DeletePushProvider
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeletePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePushProviderRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeletePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling DeletePushProvider. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveDeletePushProviderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeletePushProvider")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeletePushProviderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.DeletePushProvider
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeletePushProviderRequest) (*AppSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePushProviderRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePushProviderRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.DeletePushProvider(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AppSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AppSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AppSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AppSettingsResponse and nil error while calling DeletePushProvider. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveReportCallStats(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportCallStatsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportCallStatsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveReportCallStatsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportCallStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ReportCallStatsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.ReportCallStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportCallStatsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ReportCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReportCallStatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportCallStatsResponse and nil error while calling ReportCallStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveReportCallStatsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportCallStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ReportCallStatsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.ReportCallStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReportCallStatsRequest) (*ReportCallStatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportCallStatsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ReportCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReportCallStatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportCallStatsResponse and nil error while calling ReportCallStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetCallStats(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCallStatsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCallStatsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveGetCallStatsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCallStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetCallStatsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.GetCallStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCallStatsRequest) (*GetCallStatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallStatsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.GetCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetCallStatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetCallStatsResponse and nil error while calling GetCallStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveGetCallStatsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCallStats")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetCallStatsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.GetCallStats
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCallStatsRequest) (*GetCallStatsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCallStatsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCallStatsRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.GetCallStats(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCallStatsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCallStatsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetCallStatsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetCallStatsResponse and nil error while calling GetCallStats. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveReviewCall(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReviewCallJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReviewCallProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveReviewCallJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReviewCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ReviewCallRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.ReviewCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReviewCallRequest) (*ReviewCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReviewCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReviewCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ReviewCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReviewCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReviewCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReviewCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReviewCallResponse and nil error while calling ReviewCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveReviewCallProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReviewCall")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ReviewCallRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.ReviewCall
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReviewCallRequest) (*ReviewCallResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReviewCallRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReviewCallRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ReviewCall(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReviewCallResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReviewCallResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReviewCallResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReviewCallResponse and nil error while calling ReviewCall. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveReportIssue(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportIssueJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportIssueProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *callCoordinatorServiceServer) serveReportIssueJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportIssue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ReportIssueRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.CallCoordinatorService.ReportIssue
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReportIssueRequest) (*ReportIssueResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportIssueRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportIssueRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ReportIssue(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportIssueResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportIssueResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReportIssueResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportIssueResponse and nil error while calling ReportIssue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) serveReportIssueProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportIssue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ReportIssueRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.CallCoordinatorService.ReportIssue
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReportIssueRequest) (*ReportIssueResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReportIssueRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReportIssueRequest) when calling interceptor")
					}
					return s.CallCoordinatorService.ReportIssue(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReportIssueResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReportIssueResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReportIssueResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportIssueResponse and nil error while calling ReportIssue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *callCoordinatorServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *callCoordinatorServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *callCoordinatorServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "stream.video", "CallCoordinatorService")
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler

	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// google.golang.org/protobuf/types/descriptorpb.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)

	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string

	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route Twirp requests.
	// The path prefix is in the form: "/<prefix>/<package>.<Service>/"
	// that is, everything in a Twirp route except for the <Method> at the end.
	PathPrefix() string
}

func newServerOpts(opts []interface{}) *twirp.ServerOptions {
	serverOpts := &twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T, please use a twirp.ServerOption", o))
		}
	}
	return serverOpts
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Convert to a twirp.Error. Non-twirp errors are converted to internal errors.
	var twerr twirp.Error
	if !errors.As(err, &twerr) {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// sanitizeBaseURL parses the the baseURL, and adds the "http" scheme if needed.
// If the URL is unparsable, the baseURL is returned unchaged.
func sanitizeBaseURL(baseURL string) string {
	u, err := url.Parse(baseURL)
	if err != nil {
		return baseURL // invalid URL will fail later when making requests
	}
	if u.Scheme == "" {
		u.Scheme = "http"
	}
	return u.String()
}

// baseServicePath composes the path prefix for the service (without <Method>).
// e.g.: baseServicePath("/twirp", "my.pkg", "MyService")
//       returns => "/twirp/my.pkg.MyService/"
// e.g.: baseServicePath("", "", "MyService")
//       returns => "/MyService/"
func baseServicePath(prefix, pkg, service string) string {
	fullServiceName := service
	if pkg != "" {
		fullServiceName = pkg + "." + service
	}
	return path.Join("/", prefix, fullServiceName) + "/"
}

// parseTwirpPath extracts path components form a valid Twirp route.
// Expected format: "[<prefix>]/<package>.<Service>/<Method>"
// e.g.: prefix, pkgService, method := parseTwirpPath("/twirp/pkg.Svc/MakeHat")
func parseTwirpPath(path string) (string, string, string) {
	parts := strings.Split(path, "/")
	if len(parts) < 2 {
		return "", "", ""
	}
	method := parts[len(parts)-1]
	pkgService := parts[len(parts)-2]
	prefix := strings.Join(parts[0:len(parts)-2], "/")
	return prefix, pkgService, method
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v8.1.2")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}

	var tj twerrJSON
	dec := json.NewDecoder(bytes.NewReader(respBodyBytes))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&tj); err != nil || tj.Code == "" {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg).WithMeta("body", string(respBodyBytes))
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429: // Too Many Requests
			code = twirp.ResourceExhausted
		case 502, 503, 504: // Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }
func (e *wrappedError) Unwrap() error { return e.cause } // for go1.13 + errors.Is/As
func (e *wrappedError) Cause() error  { return e.cause } // for github.com/pkg/errors

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause,
// but the original error message is not exposed on Msg(). The original error
// can be checked with go1.13+ errors.Is/As, and also by (github.com/pkg/errors).Unwrap
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Unwrap() error                               { return e.cause } // for go1.13 + errors.Is/As
func (e *internalWithCause) Cause() error                                { return e.cause } // for github.com/pkg/errors
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// malformedRequestError is used when the twirp server cannot unmarshal a request
func malformedRequestError(msg string) twirp.Error {
	return twirp.NewError(twirp.Malformed, msg)
}

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}
	defer func() { _ = resp.Body.Close() }()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return ctx, wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal proto response")
	}
	return ctx, nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	marshaler := &protojson.MarshalOptions{UseProtoNames: true}
	reqBytes, err := marshaler.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, bytes.NewReader(reqBytes), "application/json")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	d := json.NewDecoder(resp.Body)
	rawRespBody := json.RawMessage{}
	if err := d.Decode(&rawRespBody); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawRespBody, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}
	return ctx, nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

func callClientResponseReceived(ctx context.Context, h *twirp.ClientHooks) {
	if h == nil || h.ResponseReceived == nil {
		return
	}
	h.ResponseReceived(ctx)
}

func callClientRequestPrepared(ctx context.Context, h *twirp.ClientHooks, req *http.Request) (context.Context, error) {
	if h == nil || h.RequestPrepared == nil {
		return ctx, nil
	}
	return h.RequestPrepared(ctx, req)
}

func callClientError(ctx context.Context, h *twirp.ClientHooks, err twirp.Error) {
	if h == nil || h.Error == nil {
		return
	}
	h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 2857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0x4b, 0x73, 0xdc, 0xc6,
	0xf1, 0xff, 0x63, 0x97, 0xa4, 0xb8, 0x4d, 0x91, 0x5c, 0x0e, 0xc9, 0xe5, 0x6a, 0x29, 0xd9, 0x14,
	0xf4, 0xfc, 0xdb, 0xd6, 0x32, 0x91, 0x22, 0xdb, 0x71, 0xec, 0x24, 0x7c, 0x2c, 0x55, 0xb4, 0x29,
	0x92, 0x85, 0x5d, 0x3a, 0x7e, 0x54, 0x19, 0x06, 0x77, 0x47, 0x14, 0x6c, 0x2c, 0x00, 0x01, 0xb3,
	0x54, 0x78, 0x48, 0x6e, 0xc9, 0xc1, 0x55, 0x39, 0xe7, 0xe4, 0x43, 0x0e, 0xb9, 0xa5, 0x2a, 0x55,
	0xf9, 0x1a, 0xa9, 0xca, 0xb7, 0xc8, 0x97, 0x70, 0x72, 0x48, 0xcd, 0x03, 0xc0, 0x60, 0x30, 0x0b,
	0x92, 0x96, 0x4e, 0x5c, 0xce, 0xfc, 0xba, 0xa7, 0xbb, 0xa7, 0xa7, 0xbb, 0xa7, 0x31, 0xb0, 0x7e,
	0xea, 0x0e, 0x70, 0x60, 0xf7, 0x83, 0x20, 0x1a, 0xb8, 0xbe, 0x43, 0x82, 0xc8, 0x8e, 0xc2, 0xfe,
	0xba, 0xfc, 0x7f, 0x8c, 0xa3, 0x53, 0xb7, 0x8f, 0xdb, 0x61, 0x14, 0x90, 0x00, 0x5d, 0x8d, 0x49,
	0x84, 0x9d, 0x61, 0x9b, 0xd1, 0xb5, 0x56, 0x4f, 0x82, 0xe0, 0xc4, 0xc3, 0xeb, 0x6c, 0xee, 0x78,
	0xf4, 0x6c, 0x1d, 0x0f, 0x43, 0x72, 0xc6, 0xa1, 0xad, 0xeb, 0xea, 0x64, 0x4c, 0xa2, 0x51, 0x9f,
	0x88, 0xd9, 0x37, 0xd4, 0xd9, 0x97, 0x91, 0x13, 0x86, 0x38, 0x8a, 0xc5, 0xfc, 0xca, 0xa9, 0xe3,
	0xb9, 0x03, 0x87, 0xe0, 0xf5, 0xe4, 0x87, 0x98, 0xb8, 0xc6, 0x45, 0x1e, 0x06, 0x03, 0xec, 0xc5,
	0xeb, 0xfc, 0x0f, 0x9f, 0x32, 0x0f, 0xa1, 0xb1, 0x31, 0x18, 0x1c, 0x8e, 0xe2, 0xe7, 0x87, 0x51,
	0x40, 0x61, 0x91, 0x85, 0x5f, 0x8c, 0x70, 0x4c, 0xd0, 0xbb, 0x30, 0x1d, 0x63, 0x42, 0x5c, 0xff,
	0x24, 0x6e, 0x1a, 0x6b, 0xc6, 0xfd, 0x99, 0x87, 0xad, 0xb6, 0xac, 0x49, 0x3b, 0x47, 0x94, 0x62,
	0xcd, 0x2e, 0x5c, 0x3b, 0x0a, 0xe9, 0xe2, 0xaf, 0x93, 0xe9, 0x3a, 0x5c, 0xdb, 0xc6, 0x1e, 0xd6,
	0x33, 0x45, 0x30, 0xe1, 0x3b, 0x43, 0xcc, 0x18, 0xd6, 0x2c, 0xf6, 0xdb, 0xfc, 0xb3, 0x01, 0x4d,
	0x2e, 0xc6, 0x46, 0x18, 0x76, 0x05, 0x9b, 0x84, 0xe0, 0x23, 0x98, 0x79, 0x89, 0x8f, 0x9f, 0x07,
	0xc1, 0xb7, 0xf6, 0x28, 0xf2, 0x84, 0x20, 0xd7, 0xdb, 0xdc, 0xbc, 0xed, 0xc4, 0xbc, 0xed, 0x2e,
	0x89, 0x5c, 0xff, 0xe4, 0x53, 0xc7, 0x1b, 0x61, 0x0b, 0x04, 0xc1, 0x51, 0xe4, 0xa1, 0x0f, 0xe1,
	0x6a, 0xfc, 0x22, 0xb6, 0x53, 0x45, 0x2a, 0x8c, 0xfe, 0x5a, 0x5e, 0x91, 0xee, 0x8b, 0x38, 0x5d,
	0x76, 0x26, 0xce, 0xfe, 0x31, 0x7b, 0xb0, 0x98, 0x13, 0x29, 0x0e, 0x03, 0x3f, 0xc6, 0xe8, 0xa3,
	0x82, 0x65, 0x6e, 0xe6, 0x19, 0x6e, 0x84, 0xa1, 0xe7, 0xf6, 0x1d, 0xe2, 0x06, 0x7e, 0x4a, 0x9c,
	0x19, 0xe8, 0x1e, 0x2c, 0x70, 0x03, 0x59, 0x81, 0x87, 0xcb, 0x0c, 0xb3, 0x04, 0x48, 0x06, 0xf2,
	0xd5, 0x29, 0xf9, 0x56, 0x84, 0x9d, 0x0b, 0x91, 0xcb, 0x40, 0x41, 0xfe, 0x36, 0x2c, 0x73, 0xa6,
	0x5b, 0x8e, 0xe7, 0xf5, 0xce, 0xc2, 0x52, 0x16, 0x4d, 0x68, 0xa8, 0x60, 0xc1, 0xe6, 0x09, 0xd4,
	0xd5, 0x31, 0xf4, 0x08, 0x6a, 0x7d, 0xc7, 0xf3, 0x6c, 0x72, 0x16, 0x62, 0x61, 0x98, 0x46, 0xde,
	0x30, 0x29, 0xc9, 0x74, 0x5f, 0xfc, 0x32, 0xff, 0x6b, 0xc0, 0x92, 0x22, 0xca, 0xae, 0x1f, 0x8e,
	0xb4, 0xf2, 0xa0, 0x1d, 0x98, 0x3a, 0x89, 0x1c, 0x9f, 0xd0, 0x8d, 0xac, 0xde, 0x9f, 0x79, 0xd8,
	0x1e, 0xc3, 0x5e, 0xe2, 0xd3, 0x7e, 0xc2, 0x08, 0x3a, 0x3e, 0x89, 0xce, 0x2c, 0x41, 0x8d, 0x1e,
	0xc2, 0xf4, 0x33, 0xec, 0x90, 0x51, 0x84, 0xe3, 0x66, 0x55, 0x27, 0xe8, 0x8e, 0x98, 0xb5, 0x52,
	0x5c, 0xab, 0x07, 0x33, 0x12, 0x2b, 0x54, 0x87, 0xea, 0xb7, 0xf8, 0x4c, 0x48, 0x47, 0x7f, 0xa2,
	0x75, 0x98, 0x3c, 0xa5, 0x0e, 0xa8, 0x77, 0xb2, 0x43, 0x1c, 0x0d, 0xdd, 0x38, 0x76, 0x03, 0x3f,
	0xb6, 0x38, 0xee, 0x83, 0xca, 0xfb, 0x86, 0xf9, 0x18, 0x1a, 0x7b, 0x6e, 0x4c, 0xe4, 0x59, 0xb1,
	0x1f, 0xab, 0xaa, 0x35, 0x6b, 0x92, 0xd5, 0xfe, 0x65, 0xc0, 0x4a, 0x81, 0x4e, 0x6c, 0xc3, 0x67,
	0x30, 0x13, 0x66, 0xc3, 0x4d, 0x83, 0x59, 0xea, 0xdd, 0xbc, 0x34, 0x63, 0x68, 0x65, 0x29, 0xb9,
	0xc5, 0x64, 0x56, 0xad, 0xcf, 0xa1, 0xae, 0x02, 0x5e, 0x97, 0x1d, 0x7e, 0x06, 0x73, 0x4f, 0x30,
	0xa1, 0x1b, 0x98, 0xe8, 0x3f, 0x07, 0x15, 0x77, 0x20, 0xf8, 0x56, 0xdc, 0x01, 0xf5, 0x07, 0x66,
	0x8a, 0x0a, 0xf7, 0x07, 0xfa, 0xdb, 0x7c, 0x01, 0xf3, 0x29, 0x95, 0xd0, 0xfe, 0x2e, 0x4c, 0x50,
	0x2b, 0x09, 0xff, 0x43, 0x45, 0x07, 0xb1, 0xd8, 0x3c, 0x7a, 0x17, 0x80, 0x99, 0x37, 0x26, 0x0e,
	0x49, 0x44, 0x5d, 0x29, 0xa2, 0xbb, 0x74, 0xda, 0x62, 0x3b, 0xc1, 0x7e, 0x9a, 0x5d, 0x68, 0xf1,
	0x53, 0x75, 0x10, 0xf1, 0xa0, 0x45, 0x51, 0xe9, 0xa6, 0x3d, 0x86, 0x49, 0x0a, 0x4d, 0xac, 0xfe,
	0xa6, 0xc2, 0x90, 0x11, 0x4a, 0x4a, 0x5a, 0x1c, 0x6d, 0x3e, 0x81, 0x55, 0x2d, 0x53, 0xa1, 0xd3,
	0xfd, 0x3c, 0x57, 0x9d, 0x52, 0x82, 0xd1, 0x7f, 0xaa, 0x49, 0x74, 0x90, 0x4d, 0x99, 0x98, 0xce,
	0xc8, 0x4c, 0x27, 0xcc, 0x5b, 0x49, 0xcd, 0xbb, 0x0e, 0x53, 0xfd, 0x51, 0x4c, 0x82, 0xa1, 0x38,
	0x10, 0x2b, 0xba, 0x18, 0x3b, 0xea, 0x13, 0x4b, 0xc0, 0xd0, 0x3d, 0x98, 0x0f, 0x9d, 0x88, 0xb8,
	0x7d, 0x37, 0x74, 0x7c, 0x62, 0xbb, 0x83, 0xb8, 0x39, 0xb1, 0x56, 0xbd, 0x5f, 0xb3, 0xe6, 0xa4,
	0xe1, 0xdd, 0x41, 0x8c, 0x7e, 0x05, 0xb3, 0xcf, 0xbd, 0xd8, 0x3e, 0x8e, 0x02, 0x67, 0xd0, 0x77,
	0x62, 0xd2, 0x9c, 0x12, 0xd9, 0x44, 0x5d, 0x60, 0x33, 0x08, 0x3c, 0x1e, 0xc2, 0xaf, 0x3e, 0xf7,
	0xe2, 0xcd, 0x04, 0x8f, 0x1e, 0xc0, 0x44, 0x44, 0x86, 0x61, 0xf3, 0x8a, 0xce, 0x9f, 0xac, 0xde,
	0xd3, 0xc3, 0x83, 0x90, 0x30, 0x7f, 0x62, 0x30, 0xf4, 0x01, 0x00, 0x89, 0x1c, 0x3f, 0xee, 0x47,
	0xee, 0x31, 0x6e, 0x4e, 0x9f, 0xbb, 0x98, 0x84, 0x46, 0xfb, 0x80, 0xb2, 0xff, 0xec, 0x80, 0xf3,
	0x6d, 0xd6, 0x18, 0x0f, 0x65, 0x33, 0x7b, 0x29, 0x2e, 0x59, 0x7e, 0x81, 0xa8, 0x43, 0xe8, 0x7d,
	0xa8, 0x45, 0xb8, 0xcf, 0xca, 0x8d, 0x93, 0x26, 0x9c, 0x2b, 0x4a, 0x06, 0x46, 0x0f, 0x61, 0xca,
	0x0f, 0x88, 0xfb, 0xec, 0xac, 0x39, 0x73, 0x2e, 0x99, 0x40, 0x9a, 0x3b, 0x49, 0xc4, 0xcf, 0x9d,
	0x88, 0x9f, 0x9c, 0x77, 0x22, 0x36, 0xa7, 0x7f, 0xd8, 0x9c, 0xfc, 0xce, 0xa8, 0xd4, 0x0d, 0x7e,
	0x36, 0xcc, 0x10, 0x16, 0x32, 0x37, 0xbc, 0xc4, 0x79, 0x44, 0xef, 0x41, 0xf3, 0x9b, 0x38, 0xf0,
	0x6d, 0xec, 0xf7, 0x83, 0x01, 0x1e, 0xd8, 0xdc, 0x55, 0xec, 0x81, 0x43, 0x1c, 0xe6, 0x56, 0x57,
	0xad, 0x65, 0x3a, 0xdf, 0xe1, 0xd3, 0x5b, 0x6c, 0x76, 0xdb, 0x21, 0x8e, 0xf9, 0x21, 0x20, 0x79,
	0xc5, 0xcb, 0x9d, 0x65, 0xf3, 0x56, 0x92, 0x51, 0x4b, 0xe4, 0xcd, 0xb2, 0xa9, 0xbc, 0x84, 0xf9,
	0x5d, 0x05, 0x56, 0xba, 0xd8, 0xc3, 0x7d, 0xd2, 0x19, 0x9c, 0xe0, 0x2e, 0x8e, 0x4e, 0xb3, 0x62,
	0xa5, 0x2c, 0x02, 0xa3, 0x15, 0xb8, 0xc2, 0x26, 0xd3, 0x43, 0x34, 0x45, 0xff, 0xdd, 0x1d, 0xa0,
	0xaf, 0x61, 0xde, 0x73, 0x08, 0xf6, 0xfb, 0x67, 0xf6, 0xf1, 0x99, 0x8d, 0x07, 0x27, 0xb8, 0x59,
	0x65, 0xc7, 0xf6, 0x7d, 0xa5, 0xea, 0xd0, 0xaf, 0xda, 0xde, 0xe3, 0xc4, 0x9b, 0x67, 0x74, 0x8a,
	0x07, 0xe1, 0x59, 0x4f, 0x1e, 0x6b, 0xfd, 0x06, 0x50, 0x11, 0xa4, 0x09, 0xc4, 0x6f, 0xe7, 0x03,
	0xf1, 0xb2, 0x92, 0x02, 0x38, 0x0b, 0x39, 0x08, 0xff, 0x1e, 0x9a, 0x45, 0xa9, 0xc4, 0x5e, 0x6c,
	0xc1, 0x0c, 0xd5, 0x85, 0x15, 0xcc, 0x38, 0x12, 0x5b, 0xd2, 0xcc, 0xb3, 0xcc, 0xc8, 0x24, 0x97,
	0x02, 0x9c, 0x8e, 0xa2, 0x1b, 0x30, 0x49, 0x82, 0x6f, 0xb1, 0xcf, 0x4d, 0xb6, 0x79, 0xe5, 0x87,
	0xcd, 0x89, 0x88, 0x62, 0xf8, 0xa8, 0xe9, 0x42, 0x7d, 0x63, 0x30, 0xd8, 0xc6, 0xb4, 0x22, 0x1f,
	0xe7, 0x76, 0xef, 0x00, 0x0a, 0x47, 0xf1, 0x73, 0x3b, 0x14, 0x95, 0xa5, 0xcd, 0x8a, 0x04, 0xbe,
	0x05, 0xf5, 0x50, 0x2a, 0x39, 0xf7, 0x69, 0xc1, 0xb0, 0x02, 0x57, 0x46, 0x31, 0x8e, 0xe8, 0x2e,
	0x55, 0xf9, 0x2e, 0xd1, 0x7f, 0x77, 0x07, 0xe6, 0x06, 0x2c, 0x48, 0x4b, 0x09, 0x1d, 0xdf, 0x81,
	0xa9, 0x01, 0x1b, 0x11, 0xea, 0x2d, 0xe5, 0xd5, 0x13, 0x68, 0x81, 0x31, 0x7f, 0x09, 0x8b, 0x16,
	0x1e, 0x06, 0xa7, 0xb8, 0x5c, 0x60, 0x49, 0x84, 0x4a, 0x4e, 0x84, 0x06, 0x2c, 0xe5, 0xe9, 0x85,
	0x4b, 0x3e, 0x00, 0x44, 0xd3, 0x33, 0x1f, 0x4d, 0x33, 0x8b, 0xc4, 0xc6, 0xc8, 0xb1, 0xe9, 0xc0,
	0x62, 0x0e, 0x2e, 0x74, 0x69, 0xc3, 0x15, 0x2e, 0x67, 0x92, 0x35, 0xf4, 0xca, 0x24, 0x20, 0xf3,
	0xef, 0x46, 0x92, 0x39, 0x8e, 0xe2, 0xec, 0x08, 0xa8, 0xca, 0x2c, 0xc1, 0x24, 0xc1, 0xce, 0x90,
	0xd7, 0x5f, 0x35, 0x8b, 0xff, 0x43, 0x43, 0x41, 0x14, 0x78, 0x58, 0x98, 0x98, 0xfd, 0x96, 0xf2,
	0xc9, 0xc4, 0xc5, 0xf2, 0x49, 0x52, 0xef, 0x4d, 0x4a, 0xf5, 0xde, 0x2a, 0xd4, 0xdc, 0xa1, 0x73,
	0x82, 0x59, 0xed, 0x3f, 0xc5, 0x4f, 0x20, 0x1b, 0x38, 0x8a, 0x3c, 0x93, 0xa8, 0x99, 0x98, 0x0a,
	0x2e, 0x67, 0x62, 0x6a, 0xa0, 0xd2, 0x4c, 0x2c, 0x69, 0x6a, 0x71, 0x34, 0x7a, 0x13, 0x66, 0x9e,
	0x8d, 0x3c, 0xcf, 0x1e, 0x31, 0x8e, 0x6c, 0xc7, 0xa6, 0x2d, 0xa0, 0x43, 0x7c, 0x8d, 0x62, 0xaa,
	0x16, 0xab, 0x66, 0xa9, 0x5a, 0x5e, 0x56, 0x89, 0x59, 0x6c, 0x41, 0x0e, 0xc8, 0x82, 0x56, 0x89,
	0xbd, 0x29, 0xa8, 0xf3, 0xdb, 0x30, 0x88, 0x48, 0x19, 0xe8, 0x36, 0x20, 0x19, 0x24, 0x24, 0xd1,
	0xa0, 0xe4, 0xf5, 0xc6, 0xa0, 0x3e, 0x4c, 0x52, 0x48, 0x0e, 0x75, 0x17, 0x26, 0xa8, 0xd0, 0xfa,
	0x40, 0xcc, 0x90, 0x6c, 0xde, 0xfc, 0x35, 0x34, 0xba, 0xd8, 0x17, 0x81, 0xbd, 0x73, 0x8a, 0x7d,
	0x52, 0x56, 0x82, 0x20, 0x98, 0x60, 0x99, 0xa1, 0xc2, 0x32, 0x03, 0xfb, 0x6d, 0x5e, 0xa3, 0xe1,
	0x58, 0xe1, 0x20, 0xce, 0xc5, 0x63, 0x98, 0xff, 0x38, 0x70, 0xfd, 0xcb, 0xd6, 0x88, 0x1f, 0xc3,
	0x1c, 0x95, 0x70, 0xcb, 0x09, 0x9d, 0x63, 0xd7, 0x73, 0xc9, 0x19, 0x6a, 0xc0, 0x94, 0xd3, 0xa7,
	0xf9, 0x39, 0x39, 0x49, 0xfc, 0x3f, 0xb4, 0x06, 0x33, 0x03, 0x4c, 0xf3, 0x37, 0x4b, 0xde, 0x82,
	0x89, 0x3c, 0x64, 0xfe, 0xa9, 0x02, 0xf5, 0x4c, 0x86, 0xcb, 0x19, 0x27, 0xcd, 0x66, 0x95, 0x4b,
	0x55, 0xa6, 0xd5, 0x8b, 0x56, 0xa6, 0xd4, 0xf5, 0x68, 0xa8, 0xe5, 0x65, 0x58, 0x61, 0x01, 0x1a,
	0x9b, 0x2d, 0x0e, 0x40, 0x4f, 0xa0, 0x1e, 0xbc, 0xf4, 0xed, 0x7e, 0x62, 0x12, 0x17, 0xc7, 0xcd,
	0x49, 0x46, 0x74, 0xbd, 0x28, 0x7d, 0x66, 0x38, 0x6b, 0x3e, 0x78, 0xe9, 0x6f, 0x49, 0x44, 0x26,
	0x82, 0xfa, 0x1e, 0x76, 0x4e, 0xe5, 0xbc, 0x6b, 0x2e, 0xc2, 0x82, 0x34, 0x26, 0xf6, 0xae, 0x0e,
	0x73, 0x1d, 0x7f, 0x20, 0xc3, 0x16, 0x60, 0x3e, 0x1d, 0x11, 0xa0, 0xbf, 0x18, 0xb0, 0xdc, 0x25,
	0x4e, 0x44, 0xd2, 0xd2, 0x4f, 0x0a, 0x7e, 0x49, 0xb2, 0x35, 0x72, 0xc9, 0x36, 0x97, 0xa2, 0x2b,
	0x4a, 0x8a, 0xbe, 0xa5, 0x16, 0x9e, 0x55, 0x76, 0x9a, 0xf5, 0xc5, 0xe5, 0xe4, 0x85, 0x8a, 0x4b,
	0xf3, 0x00, 0x1a, 0xaa, 0x88, 0xc2, 0x0d, 0x1e, 0x43, 0x2d, 0x5b, 0xc9, 0xd0, 0xed, 0x5a, 0x46,
	0x93, 0x21, 0x69, 0x16, 0xe8, 0x92, 0x20, 0x54, 0x55, 0x36, 0x57, 0xa8, 0x2d, 0x72, 0xe3, 0xc2,
	0x4a, 0x2b, 0xb0, 0x9c, 0x95, 0x9e, 0xb2, 0x45, 0x9b, 0xd0, 0x50, 0x27, 0x04, 0xc9, 0x2a, 0x5c,
	0xa3, 0xbc, 0xf4, 0x64, 0xd7, 0xa1, 0xa5, 0x9b, 0x14, 0xa4, 0xcb, 0xb0, 0xd8, 0x25, 0x41, 0x84,
	0x93, 0x6a, 0x41, 0x10, 0x71, 0xa9, 0xa5, 0x61, 0x01, 0x7f, 0x2a, 0x76, 0xd0, 0x4a, 0xea, 0xd8,
	0x57, 0xaa, 0xa5, 0xcc, 0xdf, 0x41, 0xc3, 0xc2, 0x34, 0xb2, 0x25, 0x0e, 0x1f, 0xbf, 0x5a, 0x6d,
	0xf6, 0x00, 0x26, 0xe9, 0xa9, 0x8a, 0xcf, 0xbb, 0xe3, 0x70, 0x94, 0xe9, 0xc0, 0x6c, 0xb2, 0x30,
	0x0b, 0x45, 0xe8, 0x91, 0x14, 0xc5, 0xe6, 0x0a, 0x39, 0x45, 0x86, 0xb2, 0x36, 0x04, 0x0f, 0x73,
	0xab, 0x30, 0x41, 0xdc, 0xa4, 0x46, 0xc9, 0x6a, 0x1e, 0x36, 0x68, 0x7e, 0x6f, 0x00, 0xe2, 0x2a,
	0xee, 0xc6, 0xf1, 0x08, 0xbf, 0x9a, 0x7a, 0x4a, 0x00, 0xab, 0x16, 0x02, 0xd8, 0xa5, 0xb3, 0xb2,
	0xf9, 0x0f, 0x03, 0x16, 0x2c, 0x7c, 0xea, 0xe2, 0x97, 0x72, 0xdc, 0xfd, 0x71, 0xe2, 0x2d, 0x31,
	0xeb, 0x47, 0xdc, 0xfa, 0x15, 0x8b, 0xff, 0xa3, 0x0a, 0x3d, 0x51, 0x26, 0xf4, 0xe4, 0xc5, 0x84,
	0x5e, 0xa2, 0x36, 0xcd, 0x64, 0xce, 0x5c, 0x39, 0x67, 0x69, 0x31, 0xfc, 0x07, 0x03, 0x9a, 0x87,
	0xd9, 0x8d, 0x35, 0xbf, 0xe1, 0x77, 0x60, 0x2e, 0x7f, 0xc9, 0x15, 0xda, 0xce, 0xe6, 0xee, 0xb8,
	0x68, 0x13, 0xe6, 0xb8, 0x3d, 0xdc, 0x21, 0xf6, 0x5c, 0x1f, 0x27, 0xfd, 0xa9, 0xd5, 0x12, 0x0f,
	0xb1, 0x66, 0x99, 0xc5, 0x12, 0x0a, 0xf3, 0x13, 0x58, 0x14, 0xbd, 0x8c, 0x57, 0x77, 0x74, 0xf3,
	0x6f, 0x06, 0xd4, 0x52, 0x56, 0x1a, 0xf1, 0x8c, 0xcb, 0x8a, 0x87, 0xbe, 0x84, 0x65, 0xd9, 0x12,
	0xaa, 0xa6, 0x77, 0x95, 0x2e, 0xcf, 0x18, 0x83, 0x5a, 0x4b, 0x12, 0x93, 0x4c, 0xf7, 0x53, 0x58,
	0xca, 0xeb, 0xfe, 0x0a, 0xcd, 0x9c, 0xb8, 0xbc, 0x99, 0x13, 0x67, 0x29, 0x33, 0xa6, 0xd5, 0x46,
	0x21, 0xbe, 0x08, 0xb7, 0x68, 0x8a, 0x40, 0x2f, 0x45, 0x32, 0x31, 0xb3, 0xc7, 0x23, 0xf6, 0x6b,
	0x0a, 0x71, 0xef, 0xf1, 0x38, 0x5f, 0x58, 0x06, 0xbd, 0x01, 0x33, 0xf1, 0x23, 0xfb, 0x99, 0xeb,
	0xe1, 0xb4, 0xf3, 0x5d, 0xb3, 0x6a, 0xf1, 0xa3, 0x1d, 0xd7, 0x63, 0xe5, 0x6f, 0x83, 0xd9, 0x2c,
	0xa5, 0x4b, 0x1c, 0xc6, 0xfc, 0x63, 0x05, 0x96, 0x95, 0x09, 0xc1, 0xf1, 0x29, 0x40, 0xda, 0x5f,
	0x48, 0x5c, 0xe0, 0x41, 0xde, 0x4a, 0x5a, 0xc2, 0x76, 0x26, 0x9c, 0xc4, 0xa0, 0xf5, 0xbd, 0x01,
	0xb5, 0x74, 0xe6, 0x47, 0x86, 0x04, 0x45, 0xc9, 0xaa, 0xa2, 0x24, 0xba, 0x01, 0x40, 0xa3, 0x04,
	0xf7, 0x37, 0x11, 0x1b, 0x6a, 0x6c, 0x84, 0x3a, 0x0f, 0x5d, 0x34, 0x26, 0x41, 0xc8, 0x67, 0xf9,
	0xc5, 0x61, 0x9a, 0x0e, 0xf4, 0x44, 0x68, 0xad, 0xd3, 0x5a, 0x32, 0x57, 0x87, 0x8e, 0xbb, 0x46,
	0x95, 0x57, 0x12, 0x92, 0xfc, 0xd5, 0x9c, 0xfc, 0x1f, 0x00, 0x60, 0xca, 0x9e, 0x93, 0x4d, 0xb0,
	0xb4, 0xb0, 0x5a, 0xac, 0xa1, 0xb2, 0x94, 0x50, 0xc3, 0xc9, 0x4f, 0x5a, 0x28, 0x49, 0xe2, 0x71,
	0x53, 0xbf, 0xf5, 0x6f, 0x7a, 0x0d, 0x53, 0x13, 0x09, 0xfa, 0x29, 0x3c, 0xd8, 0xda, 0xd8, 0xdb,
	0xb3, 0xbb, 0xbd, 0x8d, 0x9e, 0xdd, 0xf9, 0xb4, 0xb3, 0xdf, 0xb3, 0x7b, 0x9f, 0x1f, 0x76, 0xec,
	0x8d, 0xa3, 0xed, 0xdd, 0x03, 0x7b, 0xc7, 0x3a, 0xf8, 0xa2, 0xb3, 0x6f, 0x1f, 0xed, 0x77, 0x0f,
	0x3b, 0x5b, 0xbb, 0x3b, 0xbb, 0x9d, 0xed, 0xfa, 0xff, 0xa1, 0xdb, 0xb0, 0x56, 0x42, 0xb2, 0xdd,
	0xd9, 0xdb, 0xf8, 0xbc, 0x6e, 0xa0, 0x3b, 0x70, 0x53, 0x8b, 0xfa, 0x74, 0x77, 0xbb, 0x93, 0x30,
	0xae, 0x57, 0xc6, 0x32, 0xe3, 0x30, 0xce, 0xac, 0x8a, 0xde, 0x82, 0xbb, 0x25, 0xa8, 0xfd, 0x83,
	0x9e, 0x7d, 0x70, 0xd8, 0xdb, 0x7d, 0xba, 0xb1, 0x57, 0x9f, 0x78, 0xeb, 0xaf, 0x06, 0xcc, 0xe6,
	0x2c, 0x83, 0xde, 0x86, 0x7b, 0x47, 0xdd, 0x8e, 0x55, 0x94, 0xf5, 0xe9, 0x51, 0xaf, 0xb3, 0xad,
	0x68, 0x77, 0x13, 0x6e, 0xe8, 0xc1, 0x47, 0xfb, 0x0c, 0x5e, 0x37, 0x74, 0x10, 0x2e, 0x48, 0xb7,
	0xb7, 0x61, 0x51, 0x48, 0xa5, 0x0c, 0x72, 0x70, 0x78, 0xd8, 0xd9, 0xae, 0x57, 0x1f, 0xfe, 0x73,
	0x15, 0x1a, 0x74, 0x3f, 0xb6, 0xb2, 0x6f, 0x86, 0x5d, 0xfe, 0xc9, 0x10, 0x1d, 0x00, 0x64, 0xdd,
	0x36, 0x74, 0x5e, 0xab, 0xb7, 0xb5, 0x36, 0x1e, 0x20, 0xce, 0xe7, 0x0e, 0x5c, 0x11, 0x51, 0x10,
	0x5d, 0x2f, 0x1c, 0x4b, 0x99, 0xd5, 0x8d, 0x31, 0xb3, 0x82, 0xcf, 0x01, 0x40, 0xd6, 0x4c, 0x53,
	0x05, 0x2b, 0x34, 0xf6, 0x54, 0xc1, 0x34, 0x7d, 0xb8, 0x03, 0x80, 0xac, 0x75, 0xa6, 0x32, 0x2c,
	0x74, 0xde, 0x54, 0x86, 0xc5, 0xae, 0x1b, 0xda, 0x85, 0xe9, 0xe4, 0x1a, 0x85, 0x14, 0x65, 0x94,
	0x2b, 0x5e, 0xeb, 0x8d, 0x71, 0xd3, 0x82, 0x95, 0x43, 0x0f, 0x79, 0xbe, 0x67, 0x85, 0xee, 0x5c,
	0xa8, 0xd3, 0xd6, 0xba, 0x7b, 0x1e, 0x4c, 0x2c, 0xb1, 0x07, 0xb5, 0xf4, 0x46, 0x83, 0x14, 0x79,
	0xd4, 0xeb, 0x4f, 0xeb, 0xcd, 0xb1, 0xf3, 0xd9, 0x2e, 0x8b, 0x8b, 0x8f, 0xba, 0xcb, 0xf9, 0x1b,
	0x92, 0xba, 0xcb, 0xca, 0x6d, 0x89, 0x4a, 0x95, 0x76, 0xb0, 0x54, 0xa9, 0xd4, 0x2e, 0x9a, 0x2a,
	0x55, 0xb1, 0xf5, 0x75, 0x04, 0x57, 0xe5, 0x66, 0x14, 0x52, 0xbe, 0x68, 0x6a, 0x1a, 0x5d, 0x2d,
	0xb3, 0x0c, 0x22, 0xd8, 0x5a, 0x30, 0x23, 0x35, 0xa7, 0xd0, 0x5a, 0xf1, 0x2b, 0x54, 0xbe, 0xcd,
	0xd5, 0xba, 0x59, 0x82, 0xc8, 0x14, 0x4f, 0xe3, 0xa6, 0xaa, 0xb8, 0x1a, 0xef, 0x55, 0xc5, 0x0b,
	0x01, 0x17, 0x7d, 0x05, 0xf3, 0x4a, 0xc3, 0x01, 0xdd, 0x2e, 0xd2, 0x14, 0x3b, 0x1a, 0xad, 0x3b,
	0xe7, 0xa0, 0x04, 0xff, 0x6f, 0x60, 0x51, 0xf3, 0x69, 0x07, 0xdd, 0xd7, 0x45, 0x03, 0xdd, 0x27,
	0xa5, 0xd6, 0xff, 0x5f, 0x00, 0x39, 0x6e, 0x2d, 0xd6, 0x9b, 0x2a, 0x5f, 0x4b, 0x6e, 0x9a, 0x95,
	0xaf, 0x95, 0x6f, 0x74, 0x7d, 0x09, 0x73, 0xf9, 0x2b, 0x23, 0xba, 0x35, 0xee, 0xfb, 0x88, 0xec,
	0xd4, 0xb7, 0xcb, 0x41, 0x82, 0xf9, 0x09, 0xa0, 0xe2, 0x9d, 0x14, 0xdd, 0x53, 0x2c, 0x3e, 0xee,
	0x4a, 0xdb, 0xba, 0x7f, 0x3e, 0x30, 0xd3, 0x22, 0x7f, 0x9d, 0x57, 0xb5, 0xd0, 0xf6, 0x23, 0x54,
	0x2d, 0xc6, 0x74, 0x04, 0x3e, 0x83, 0xd9, 0xdc, 0x15, 0x1e, 0x99, 0x45, 0xb9, 0x0a, 0xac, 0x6f,
	0x95, 0x62, 0x14, 0xb1, 0xb3, 0xf2, 0x4b, 0x27, 0xb6, 0x5a, 0xa1, 0x6a, 0xc5, 0x2e, 0x16, 0x9e,
	0x42, 0xec, 0x8c, 0xb7, 0x46, 0xec, 0x02, 0xeb, 0x5b, 0xa5, 0x98, 0x8c, 0x73, 0xae, 0xc0, 0x54,
	0x39, 0xeb, 0xea, 0x59, 0x95, 0xb3, 0xbe, 0xb4, 0x4d, 0x73, 0x31, 0x75, 0x52, 0x74, 0x5e, 0xb3,
	0x57, 0x9f, 0x8b, 0x73, 0x1d, 0xcf, 0x34, 0xe5, 0xe9, 0x18, 0x16, 0xfa, 0xb6, 0xfa, 0x94, 0xa7,
	0x32, 0xcc, 0x9a, 0xb4, 0x2a, 0xc3, 0x42, 0x8f, 0x57, 0x65, 0xa8, 0xe9, 0xef, 0x7e, 0x95, 0x7c,
	0xa4, 0x93, 0x9e, 0xa8, 0xa0, 0xbb, 0xba, 0x5c, 0x5e, 0x7c, 0x56, 0xd3, 0x2a, 0x3e, 0x58, 0x29,
	0xbc, 0x72, 0xf9, 0x84, 0x7d, 0x91, 0x97, 0x99, 0x37, 0x0a, 0xf7, 0xee, 0xce, 0x30, 0x24, 0x67,
	0x17, 0x61, 0xd6, 0x83, 0xb9, 0xac, 0xe0, 0x61, 0xe5, 0x9e, 0x79, 0xfe, 0xd3, 0x0d, 0x35, 0xf7,
	0x17, 0x1e, 0x9c, 0xf4, 0x60, 0x2e, 0x0b, 0x83, 0xaf, 0x8d, 0xeb, 0x97, 0x30, 0x97, 0x7f, 0xf4,
	0xa2, 0x1e, 0x2e, 0xed, 0xfb, 0x19, 0xf5, 0x70, 0xe9, 0xdf, 0xcd, 0xd0, 0x74, 0xa3, 0xbc, 0xbd,
	0x50, 0xd3, 0x8d, 0xfe, 0x39, 0x88, 0x9a, 0x6e, 0xc6, 0x3d, 0xfe, 0x48, 0x0f, 0x82, 0x15, 0x78,
	0x58, 0x7f, 0x10, 0xa4, 0x77, 0x43, 0xfa, 0x83, 0x20, 0xbf, 0x17, 0xca, 0x0e, 0x82, 0x8e, 0x61,
	0xe1, 0x1d, 0x93, 0xfe, 0x20, 0xe4, 0x18, 0x7e, 0x01, 0xf3, 0xca, 0x33, 0x36, 0xd5, 0x02, 0xfa,
	0x57, 0x6e, 0x17, 0x71, 0xb3, 0xaf, 0x93, 0xcf, 0xc8, 0x39, 0xf6, 0xf7, 0x74, 0x87, 0xe2, 0xc7,
	0xaf, 0x50, 0x7c, 0xdd, 0xa6, 0xae, 0x30, 0xf6, 0xfd, 0xdb, 0x45, 0x56, 0xf8, 0x0a, 0xe6, 0x95,
	0x9e, 0x84, 0x6a, 0x1f, 0x7d, 0x4b, 0x54, 0xf5, 0x90, 0x31, 0x8d, 0x0d, 0x5a, 0xe9, 0xc9, 0xbd,
	0x16, 0xb5, 0xd2, 0xd3, 0xf4, 0xa0, 0x5a, 0x66, 0x19, 0x24, 0xf3, 0x93, 0xac, 0xe7, 0xa6, 0xfa,
	0x49, 0xa1, 0x83, 0xa8, 0xfa, 0x49, 0xb1, 0x5d, 0x47, 0x4b, 0x47, 0xa9, 0x5d, 0x87, 0xd6, 0x74,
	0xda, 0xc9, 0x3d, 0xd3, 0xd6, 0xcd, 0x12, 0x04, 0xe7, 0xb9, 0xf9, 0x8b, 0x2f, 0x7e, 0x7e, 0xe2,
	0x92, 0xe7, 0xa3, 0xe3, 0x76, 0x3f, 0x18, 0xae, 0x3f, 0xc1, 0xa4, 0xcb, 0x28, 0xf8, 0x3b, 0xd1,
	0xec, 0xb1, 0xa6, 0xf6, 0xd9, 0xe8, 0xf1, 0x14, 0x9b, 0x7f, 0xf4, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x35, 0x25, 0x5f, 0xd9, 0x56, 0x2a, 0x00, 0x00,
}
