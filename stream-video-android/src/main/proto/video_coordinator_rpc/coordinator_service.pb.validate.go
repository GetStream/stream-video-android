// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video_coordinator_rpc/coordinator_service.proto

package video_coordinator_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddPushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPushProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPushProviderRequestMultiError, or nil if none found.
func (m *AddPushProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPushProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddPushProviderRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddPushProviderRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPushProviderRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddPushProviderRequestMultiError(errors)
	}

	return nil
}

// AddPushProviderRequestMultiError is an error wrapping multiple validation
// errors returned by AddPushProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type AddPushProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPushProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPushProviderRequestMultiError) AllErrors() []error { return m }

// AddPushProviderRequestValidationError is the validation error returned by
// AddPushProviderRequest.Validate if the designated constraints aren't met.
type AddPushProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPushProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPushProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPushProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPushProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPushProviderRequestValidationError) ErrorName() string {
	return "AddPushProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPushProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPushProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPushProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPushProviderRequestValidationError{}

// Validate checks the field values on UpdatePushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushProviderRequestMultiError, or nil if none found.
func (m *UpdatePushProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePushProviderRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePushProviderRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePushProviderRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePushProviderRequestMultiError(errors)
	}

	return nil
}

// UpdatePushProviderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePushProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePushProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushProviderRequestMultiError) AllErrors() []error { return m }

// UpdatePushProviderRequestValidationError is the validation error returned by
// UpdatePushProviderRequest.Validate if the designated constraints aren't met.
type UpdatePushProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushProviderRequestValidationError) ErrorName() string {
	return "UpdatePushProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushProviderRequestValidationError{}

// Validate checks the field values on DeletePushProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushProviderRequestMultiError, or nil if none found.
func (m *DeletePushProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeletePushProviderRequestMultiError(errors)
	}

	return nil
}

// DeletePushProviderRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePushProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type DeletePushProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushProviderRequestMultiError) AllErrors() []error { return m }

// DeletePushProviderRequestValidationError is the validation error returned by
// DeletePushProviderRequest.Validate if the designated constraints aren't met.
type DeletePushProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushProviderRequestValidationError) ErrorName() string {
	return "DeletePushProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushProviderRequestValidationError{}

// Validate checks the field values on UpdateAppSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppSettingsRequestMultiError, or nil if none found.
func (m *UpdateAppSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWebhookUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppSettingsRequestValidationError{
					field:  "WebhookUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppSettingsRequestValidationError{
					field:  "WebhookUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhookUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppSettingsRequestValidationError{
				field:  "WebhookUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSqsSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAppSettingsRequestValidationError{
					field:  "SqsSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAppSettingsRequestValidationError{
					field:  "SqsSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSqsSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppSettingsRequestValidationError{
				field:  "SqsSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAppSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateAppSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAppSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateAppSettingsRequestValidationError is the validation error returned by
// UpdateAppSettingsRequest.Validate if the designated constraints aren't met.
type UpdateAppSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppSettingsRequestValidationError) ErrorName() string {
	return "UpdateAppSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppSettingsRequestValidationError{}

// Validate checks the field values on AppSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppSettingsResponseMultiError, or nil if none found.
func (m *AppSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppSettingsResponseMultiError(errors)
	}

	return nil
}

// AppSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by AppSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type AppSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppSettingsResponseMultiError) AllErrors() []error { return m }

// AppSettingsResponseValidationError is the validation error returned by
// AppSettingsResponse.Validate if the designated constraints aren't met.
type AppSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppSettingsResponseValidationError) ErrorName() string {
	return "AppSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppSettingsResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on DeleteCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallTypeRequestMultiError, or nil if none found.
func (m *DeleteCallTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteCallTypeRequestMultiError(errors)
	}

	return nil
}

// DeleteCallTypeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCallTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCallTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallTypeRequestMultiError) AllErrors() []error { return m }

// DeleteCallTypeRequestValidationError is the validation error returned by
// DeleteCallTypeRequest.Validate if the designated constraints aren't met.
type DeleteCallTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallTypeRequestValidationError) ErrorName() string {
	return "DeleteCallTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallTypeRequestValidationError{}

// Validate checks the field values on DeleteCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallTypeResponseMultiError, or nil if none found.
func (m *DeleteCallTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCallTypeResponseMultiError(errors)
	}

	return nil
}

// DeleteCallTypeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCallTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCallTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallTypeResponseMultiError) AllErrors() []error { return m }

// DeleteCallTypeResponseValidationError is the validation error returned by
// DeleteCallTypeResponse.Validate if the designated constraints aren't met.
type DeleteCallTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallTypeResponseValidationError) ErrorName() string {
	return "DeleteCallTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallTypeResponseValidationError{}

// Validate checks the field values on CallTypeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CallTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallTypeResponseMultiError, or nil if none found.
func (m *CallTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CallTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCallType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallTypeResponseValidationError{
					field:  "CallType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallTypeResponseValidationError{
				field:  "CallType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallTypeResponseMultiError(errors)
	}

	return nil
}

// CallTypeResponseMultiError is an error wrapping multiple validation errors
// returned by CallTypeResponse.ValidateAll() if the designated constraints
// aren't met.
type CallTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallTypeResponseMultiError) AllErrors() []error { return m }

// CallTypeResponseValidationError is the validation error returned by
// CallTypeResponse.Validate if the designated constraints aren't met.
type CallTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallTypeResponseValidationError) ErrorName() string { return "CallTypeResponseValidationError" }

// Error satisfies the builtin error interface
func (e CallTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallTypeResponseValidationError{}

// Validate checks the field values on CallTypeRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CallTypeRequestInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallTypeRequestInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallTypeRequestInputMultiError, or nil if none found.
func (m *CallTypeRequestInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CallTypeRequestInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	{
		sorted_keys := make([]string, len(m.GetGrants()))
		i := 0
		for key := range m.GetGrants() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetGrants()[key]
			_ = val

			// no validation rules for Grants[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CallTypeRequestInputValidationError{
							field:  fmt.Sprintf("Grants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CallTypeRequestInputValidationError{
							field:  fmt.Sprintf("Grants[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CallTypeRequestInputValidationError{
						field:  fmt.Sprintf("Grants[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallTypeRequestInputValidationError{
					field:  "Features",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallTypeRequestInputValidationError{
					field:  "Features",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallTypeRequestInputValidationError{
				field:  "Features",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallTypeRequestInputMultiError(errors)
	}

	return nil
}

// CallTypeRequestInputMultiError is an error wrapping multiple validation
// errors returned by CallTypeRequestInput.ValidateAll() if the designated
// constraints aren't met.
type CallTypeRequestInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallTypeRequestInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallTypeRequestInputMultiError) AllErrors() []error { return m }

// CallTypeRequestInputValidationError is the validation error returned by
// CallTypeRequestInput.Validate if the designated constraints aren't met.
type CallTypeRequestInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallTypeRequestInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallTypeRequestInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallTypeRequestInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallTypeRequestInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallTypeRequestInputValidationError) ErrorName() string {
	return "CallTypeRequestInputValidationError"
}

// Error satisfies the builtin error interface
func (e CallTypeRequestInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallTypeRequestInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallTypeRequestInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallTypeRequestInputValidationError{}

// Validate checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsRequestMultiError, or nil if none found.
func (m *ListPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	if len(errors) > 0 {
		return ListPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsRequestMultiError) AllErrors() []error { return m }

// ListPermissionsRequestValidationError is the validation error returned by
// ListPermissionsRequest.Validate if the designated constraints aren't met.
type ListPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsRequestValidationError) ErrorName() string {
	return "ListPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsRequestValidationError{}

// Validate checks the field values on ListPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsResponseMultiError, or nil if none found.
func (m *ListPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetPermissions()))
		i := 0
		for key := range m.GetPermissions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPermissions()[key]
			_ = val

			// no validation rules for Permissions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListPermissionsResponseValidationError{
							field:  fmt.Sprintf("Permissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListPermissionsResponseValidationError{
							field:  fmt.Sprintf("Permissions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponseMultiError) AllErrors() []error { return m }

// ListPermissionsResponseValidationError is the validation error returned by
// ListPermissionsResponse.Validate if the designated constraints aren't met.
type ListPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponseValidationError) ErrorName() string {
	return "ListPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponseValidationError{}

// Validate checks the field values on GetCallRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCallRequestMultiError,
// or nil if none found.
func (m *GetCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if len(errors) > 0 {
		return GetCallRequestMultiError(errors)
	}

	return nil
}

// GetCallRequestMultiError is an error wrapping multiple validation errors
// returned by GetCallRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallRequestMultiError) AllErrors() []error { return m }

// GetCallRequestValidationError is the validation error returned by
// GetCallRequest.Validate if the designated constraints aren't met.
type GetCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallRequestValidationError) ErrorName() string { return "GetCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallRequestValidationError{}

// Validate checks the field values on GetCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallResponseMultiError, or nil if none found.
func (m *GetCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallResponseValidationError{
				field:  "CallState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallResponseMultiError(errors)
	}

	return nil
}

// GetCallResponseMultiError is an error wrapping multiple validation errors
// returned by GetCallResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallResponseMultiError) AllErrors() []error { return m }

// GetCallResponseValidationError is the validation error returned by
// GetCallResponse.Validate if the designated constraints aren't met.
type GetCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallResponseValidationError) ErrorName() string { return "GetCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallResponseValidationError{}

// Validate checks the field values on CreateOrUpdateCallsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateCallsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCallsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCallsRequestMultiError, or nil if none found.
func (m *CreateOrUpdateCallsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCallsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCalls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrUpdateCallsRequestValidationError{
						field:  fmt.Sprintf("Calls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrUpdateCallsRequestValidationError{
						field:  fmt.Sprintf("Calls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrUpdateCallsRequestValidationError{
					field:  fmt.Sprintf("Calls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrUpdateCallsRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCallsRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateCallsRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateCallsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCallsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCallsRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateCallsRequestValidationError is the validation error returned
// by CreateOrUpdateCallsRequest.Validate if the designated constraints aren't met.
type CreateOrUpdateCallsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCallsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCallsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCallsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCallsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCallsRequestValidationError) ErrorName() string {
	return "CreateOrUpdateCallsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCallsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCallsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCallsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCallsRequestValidationError{}

// Validate checks the field values on CreateOrUpdateCallsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateCallsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCallsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCallsResponseMultiError, or nil if none found.
func (m *CreateOrUpdateCallsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCallsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCalls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrUpdateCallsResponseValidationError{
						field:  fmt.Sprintf("Calls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrUpdateCallsResponseValidationError{
						field:  fmt.Sprintf("Calls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrUpdateCallsResponseValidationError{
					field:  fmt.Sprintf("Calls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrUpdateCallsResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCallsResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateCallsResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateCallsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCallsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCallsResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateCallsResponseValidationError is the validation error returned
// by CreateOrUpdateCallsResponse.Validate if the designated constraints
// aren't met.
type CreateOrUpdateCallsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCallsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCallsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCallsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCallsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCallsResponseValidationError) ErrorName() string {
	return "CreateOrUpdateCallsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCallsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCallsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCallsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCallsResponseValidationError{}

// Validate checks the field values on CreateCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallRequestMultiError, or nil if none found.
func (m *CreateCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHlsBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "HlsBroadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "HlsBroadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHlsBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "HlsBroadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRtmp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRtmp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Rtmp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTranscribe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Transcribe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Transcribe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranscribe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Transcribe",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTranscribeOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "TranscribeOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "TranscribeOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranscribeOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "TranscribeOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecording()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Recording",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Recording",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecording()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Recording",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallRequestValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallRequestValidationError{
				field:  "Notify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCallRequestMultiError(errors)
	}

	return nil
}

// CreateCallRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCallRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallRequestMultiError) AllErrors() []error { return m }

// CreateCallRequestValidationError is the validation error returned by
// CreateCallRequest.Validate if the designated constraints aren't met.
type CreateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallRequestValidationError) ErrorName() string {
	return "CreateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallRequestValidationError{}

// Validate checks the field values on CreateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallResponseMultiError, or nil if none found.
func (m *CreateCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCall() == nil {
		err := CreateCallResponseValidationError{
			field:  "Call",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCallResponseMultiError(errors)
	}

	return nil
}

// CreateCallResponseMultiError is an error wrapping multiple validation errors
// returned by CreateCallResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallResponseMultiError) AllErrors() []error { return m }

// CreateCallResponseValidationError is the validation error returned by
// CreateCallResponse.Validate if the designated constraints aren't met.
type CreateCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallResponseValidationError) ErrorName() string {
	return "CreateCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallResponseValidationError{}

// Validate checks the field values on UpdateCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallRequestMultiError, or nil if none found.
func (m *UpdateCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for JsonEncodedCustomData

	if len(errors) > 0 {
		return UpdateCallRequestMultiError(errors)
	}

	return nil
}

// UpdateCallRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateCallRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallRequestMultiError) AllErrors() []error { return m }

// UpdateCallRequestValidationError is the validation error returned by
// UpdateCallRequest.Validate if the designated constraints aren't met.
type UpdateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallRequestValidationError) ErrorName() string {
	return "UpdateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallRequestValidationError{}

// Validate checks the field values on UpdateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallResponseMultiError, or nil if none found.
func (m *UpdateCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCallResponseMultiError(errors)
	}

	return nil
}

// UpdateCallResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateCallResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallResponseMultiError) AllErrors() []error { return m }

// UpdateCallResponseValidationError is the validation error returned by
// UpdateCallResponse.Validate if the designated constraints aren't met.
type UpdateCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallResponseValidationError) ErrorName() string {
	return "UpdateCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallResponseValidationError{}

// Validate checks the field values on DeleteCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallRequestMultiError, or nil if none found.
func (m *DeleteCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCallRequestMultiError(errors)
	}

	return nil
}

// DeleteCallRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteCallRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallRequestMultiError) AllErrors() []error { return m }

// DeleteCallRequestValidationError is the validation error returned by
// DeleteCallRequest.Validate if the designated constraints aren't met.
type DeleteCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallRequestValidationError) ErrorName() string {
	return "DeleteCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallRequestValidationError{}

// Validate checks the field values on DeleteCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCallResponseMultiError, or nil if none found.
func (m *DeleteCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCallResponseMultiError(errors)
	}

	return nil
}

// DeleteCallResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteCallResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCallResponseMultiError) AllErrors() []error { return m }

// DeleteCallResponseValidationError is the validation error returned by
// DeleteCallResponse.Validate if the designated constraints aren't met.
type DeleteCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCallResponseValidationError) ErrorName() string {
	return "DeleteCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCallResponseValidationError{}

// Validate checks the field values on SelectEdgeServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectEdgeServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectEdgeServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectEdgeServerRequestMultiError, or nil if none found.
func (m *SelectEdgeServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectEdgeServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	{
		sorted_keys := make([]string, len(m.GetLatencyByEdge()))
		i := 0
		for key := range m.GetLatencyByEdge() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLatencyByEdge()[key]
			_ = val

			// no validation rules for LatencyByEdge[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SelectEdgeServerRequestValidationError{
							field:  fmt.Sprintf("LatencyByEdge[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SelectEdgeServerRequestValidationError{
							field:  fmt.Sprintf("LatencyByEdge[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SelectEdgeServerRequestValidationError{
						field:  fmt.Sprintf("LatencyByEdge[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return SelectEdgeServerRequestMultiError(errors)
	}

	return nil
}

// SelectEdgeServerRequestMultiError is an error wrapping multiple validation
// errors returned by SelectEdgeServerRequest.ValidateAll() if the designated
// constraints aren't met.
type SelectEdgeServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectEdgeServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectEdgeServerRequestMultiError) AllErrors() []error { return m }

// SelectEdgeServerRequestValidationError is the validation error returned by
// SelectEdgeServerRequest.Validate if the designated constraints aren't met.
type SelectEdgeServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectEdgeServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectEdgeServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectEdgeServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectEdgeServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectEdgeServerRequestValidationError) ErrorName() string {
	return "SelectEdgeServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectEdgeServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectEdgeServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectEdgeServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectEdgeServerRequestValidationError{}

// Validate checks the field values on SelectEdgeServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectEdgeServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectEdgeServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectEdgeServerResponseMultiError, or nil if none found.
func (m *SelectEdgeServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectEdgeServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEdgeServer() == nil {
		err := SelectEdgeServerResponseValidationError{
			field:  "EdgeServer",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEdgeServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectEdgeServerResponseValidationError{
					field:  "EdgeServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectEdgeServerResponseValidationError{
					field:  "EdgeServer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEdgeServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectEdgeServerResponseValidationError{
				field:  "EdgeServer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := SelectEdgeServerResponseValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SelectEdgeServerResponseMultiError(errors)
	}

	return nil
}

// SelectEdgeServerResponseMultiError is an error wrapping multiple validation
// errors returned by SelectEdgeServerResponse.ValidateAll() if the designated
// constraints aren't met.
type SelectEdgeServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectEdgeServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectEdgeServerResponseMultiError) AllErrors() []error { return m }

// SelectEdgeServerResponseValidationError is the validation error returned by
// SelectEdgeServerResponse.Validate if the designated constraints aren't met.
type SelectEdgeServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectEdgeServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectEdgeServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectEdgeServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectEdgeServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectEdgeServerResponseValidationError) ErrorName() string {
	return "SelectEdgeServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SelectEdgeServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectEdgeServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectEdgeServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectEdgeServerResponseValidationError{}

// Validate checks the field values on AddDeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceRequestMultiError, or nil if none found.
func (m *AddDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PushProviderName

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddDeviceRequestMultiError(errors)
	}

	return nil
}

// AddDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by AddDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceRequestMultiError) AllErrors() []error { return m }

// AddDeviceRequestValidationError is the validation error returned by
// AddDeviceRequest.Validate if the designated constraints aren't met.
type AddDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceRequestValidationError) ErrorName() string { return "AddDeviceRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceRequestValidationError{}

// Validate checks the field values on AddDeviceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceResponseMultiError, or nil if none found.
func (m *AddDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDeviceResponseValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDeviceResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDeviceResponseMultiError(errors)
	}

	return nil
}

// AddDeviceResponseMultiError is an error wrapping multiple validation errors
// returned by AddDeviceResponse.ValidateAll() if the designated constraints
// aren't met.
type AddDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceResponseMultiError) AllErrors() []error { return m }

// AddDeviceResponseValidationError is the validation error returned by
// AddDeviceResponse.Validate if the designated constraints aren't met.
type AddDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceResponseValidationError) ErrorName() string {
	return "AddDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceResponseValidationError{}

// Validate checks the field values on RemoveDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDeviceRequestMultiError, or nil if none found.
func (m *RemoveDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	if len(errors) > 0 {
		return RemoveDeviceRequestMultiError(errors)
	}

	return nil
}

// RemoveDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDeviceRequestMultiError) AllErrors() []error { return m }

// RemoveDeviceRequestValidationError is the validation error returned by
// RemoveDeviceRequest.Validate if the designated constraints aren't met.
type RemoveDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDeviceRequestValidationError) ErrorName() string {
	return "RemoveDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDeviceRequestValidationError{}

// Validate checks the field values on RemoveDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDeviceResponseMultiError, or nil if none found.
func (m *RemoveDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveDeviceResponseMultiError(errors)
	}

	return nil
}

// RemoveDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDeviceResponseMultiError) AllErrors() []error { return m }

// RemoveDeviceResponseValidationError is the validation error returned by
// RemoveDeviceResponse.Validate if the designated constraints aren't met.
type RemoveDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDeviceResponseValidationError) ErrorName() string {
	return "RemoveDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDeviceResponseValidationError{}

// Validate checks the field values on ListDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesRequestMultiError, or nil if none found.
func (m *ListDevicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListDevicesRequestMultiError(errors)
	}

	return nil
}

// ListDevicesRequestMultiError is an error wrapping multiple validation errors
// returned by ListDevicesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDevicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesRequestMultiError) AllErrors() []error { return m }

// ListDevicesRequestValidationError is the validation error returned by
// ListDevicesRequest.Validate if the designated constraints aren't met.
type ListDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesRequestValidationError) ErrorName() string {
	return "ListDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesRequestValidationError{}

// Validate checks the field values on ListDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesResponseMultiError, or nil if none found.
func (m *ListDevicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDevicesResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDevicesResponseMultiError(errors)
	}

	return nil
}

// ListDevicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListDevicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDevicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesResponseMultiError) AllErrors() []error { return m }

// ListDevicesResponseValidationError is the validation error returned by
// ListDevicesResponse.Validate if the designated constraints aren't met.
type ListDevicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesResponseValidationError) ErrorName() string {
	return "ListDevicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateOrUpdateUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateUsersRequestMultiError, or nil if none found.
func (m *CreateOrUpdateUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrUpdateUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrUpdateUsersRequestValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrUpdateUsersRequestValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for FullUpdate

	if len(errors) > 0 {
		return CreateOrUpdateUsersRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateUsersRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateUsersRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateUsersRequestValidationError is the validation error returned
// by CreateOrUpdateUsersRequest.Validate if the designated constraints aren't met.
type CreateOrUpdateUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateUsersRequestValidationError) ErrorName() string {
	return "CreateOrUpdateUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateUsersRequestValidationError{}

// Validate checks the field values on CreateOrUpdateUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateUsersResponseMultiError, or nil if none found.
func (m *CreateOrUpdateUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrUpdateUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrUpdateUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrUpdateUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateOrUpdateUsersResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateUsersResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateUsersResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateUsersResponseValidationError is the validation error returned
// by CreateOrUpdateUsersResponse.Validate if the designated constraints
// aren't met.
type CreateOrUpdateUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateUsersResponseValidationError) ErrorName() string {
	return "CreateOrUpdateUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateUsersResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on ExportUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExportUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserRequestMultiError, or nil if none found.
func (m *ExportUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ExportUserRequestMultiError(errors)
	}

	return nil
}

// ExportUserRequestMultiError is an error wrapping multiple validation errors
// returned by ExportUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ExportUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserRequestMultiError) AllErrors() []error { return m }

// ExportUserRequestValidationError is the validation error returned by
// ExportUserRequest.Validate if the designated constraints aren't met.
type ExportUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserRequestValidationError) ErrorName() string {
	return "ExportUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserRequestValidationError{}

// Validate checks the field values on ExportUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserResponseMultiError, or nil if none found.
func (m *ExportUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ExportUserResponseMultiError(errors)
	}

	return nil
}

// ExportUserResponseMultiError is an error wrapping multiple validation errors
// returned by ExportUserResponse.ValidateAll() if the designated constraints
// aren't met.
type ExportUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserResponseMultiError) AllErrors() []error { return m }

// ExportUserResponseValidationError is the validation error returned by
// ExportUserResponse.Validate if the designated constraints aren't met.
type ExportUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserResponseValidationError) ErrorName() string {
	return "ExportUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserResponseValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on SendCustomEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCustomEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCustomEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCustomEventRequestMultiError, or nil if none found.
func (m *SendCustomEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCustomEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Data

	if len(errors) > 0 {
		return SendCustomEventRequestMultiError(errors)
	}

	return nil
}

// SendCustomEventRequestMultiError is an error wrapping multiple validation
// errors returned by SendCustomEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SendCustomEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCustomEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCustomEventRequestMultiError) AllErrors() []error { return m }

// SendCustomEventRequestValidationError is the validation error returned by
// SendCustomEventRequest.Validate if the designated constraints aren't met.
type SendCustomEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCustomEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCustomEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCustomEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCustomEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCustomEventRequestValidationError) ErrorName() string {
	return "SendCustomEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendCustomEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCustomEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCustomEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCustomEventRequestValidationError{}

// Validate checks the field values on SendCustomEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendCustomEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCustomEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendCustomEventResponseMultiError, or nil if none found.
func (m *SendCustomEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCustomEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendCustomEventResponseMultiError(errors)
	}

	return nil
}

// SendCustomEventResponseMultiError is an error wrapping multiple validation
// errors returned by SendCustomEventResponse.ValidateAll() if the designated
// constraints aren't met.
type SendCustomEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCustomEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCustomEventResponseMultiError) AllErrors() []error { return m }

// SendCustomEventResponseValidationError is the validation error returned by
// SendCustomEventResponse.Validate if the designated constraints aren't met.
type SendCustomEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCustomEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCustomEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCustomEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCustomEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCustomEventResponseValidationError) ErrorName() string {
	return "SendCustomEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendCustomEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCustomEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCustomEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCustomEventResponseValidationError{}

// Validate checks the field values on JoinCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinCallRequestMultiError, or nil if none found.
func (m *JoinCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if len(errors) > 0 {
		return JoinCallRequestMultiError(errors)
	}

	return nil
}

// JoinCallRequestMultiError is an error wrapping multiple validation errors
// returned by JoinCallRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinCallRequestMultiError) AllErrors() []error { return m }

// JoinCallRequestValidationError is the validation error returned by
// JoinCallRequest.Validate if the designated constraints aren't met.
type JoinCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinCallRequestValidationError) ErrorName() string { return "JoinCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinCallRequestValidationError{}

// Validate checks the field values on UserCapability with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserCapability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCapability with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserCapabilityMultiError,
// or nil if none found.
func (m *UserCapability) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCapability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for Description

	if len(errors) > 0 {
		return UserCapabilityMultiError(errors)
	}

	return nil
}

// UserCapabilityMultiError is an error wrapping multiple validation errors
// returned by UserCapability.ValidateAll() if the designated constraints
// aren't met.
type UserCapabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCapabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCapabilityMultiError) AllErrors() []error { return m }

// UserCapabilityValidationError is the validation error returned by
// UserCapability.Validate if the designated constraints aren't met.
type UserCapabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCapabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCapabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCapabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCapabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCapabilityValidationError) ErrorName() string { return "UserCapabilityValidationError" }

// Error satisfies the builtin error interface
func (e UserCapabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCapability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCapabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCapabilityValidationError{}

// Validate checks the field values on JoinCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinCallResponseMultiError, or nil if none found.
func (m *JoinCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinCallResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinCallResponseValidationError{
					field:  "CallState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinCallResponseValidationError{
				field:  "CallState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEdges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JoinCallResponseValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JoinCallResponseValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JoinCallResponseValidationError{
					field:  fmt.Sprintf("Edges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOwnCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JoinCallResponseValidationError{
						field:  fmt.Sprintf("OwnCapabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JoinCallResponseValidationError{
						field:  fmt.Sprintf("OwnCapabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JoinCallResponseValidationError{
					field:  fmt.Sprintf("OwnCapabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JoinCallResponseMultiError(errors)
	}

	return nil
}

// JoinCallResponseMultiError is an error wrapping multiple validation errors
// returned by JoinCallResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinCallResponseMultiError) AllErrors() []error { return m }

// JoinCallResponseValidationError is the validation error returned by
// JoinCallResponse.Validate if the designated constraints aren't met.
type JoinCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinCallResponseValidationError) ErrorName() string { return "JoinCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinCallResponseValidationError{}

// Validate checks the field values on LeaveCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveCallRequestMultiError, or nil if none found.
func (m *LeaveCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveCallRequestMultiError(errors)
	}

	return nil
}

// LeaveCallRequestMultiError is an error wrapping multiple validation errors
// returned by LeaveCallRequest.ValidateAll() if the designated constraints
// aren't met.
type LeaveCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveCallRequestMultiError) AllErrors() []error { return m }

// LeaveCallRequestValidationError is the validation error returned by
// LeaveCallRequest.Validate if the designated constraints aren't met.
type LeaveCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveCallRequestValidationError) ErrorName() string { return "LeaveCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e LeaveCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveCallRequestValidationError{}

// Validate checks the field values on LeaveCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveCallResponseMultiError, or nil if none found.
func (m *LeaveCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveCallResponseMultiError(errors)
	}

	return nil
}

// LeaveCallResponseMultiError is an error wrapping multiple validation errors
// returned by LeaveCallResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaveCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveCallResponseMultiError) AllErrors() []error { return m }

// LeaveCallResponseValidationError is the validation error returned by
// LeaveCallResponse.Validate if the designated constraints aren't met.
type LeaveCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveCallResponseValidationError) ErrorName() string {
	return "LeaveCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveCallResponseValidationError{}

// Validate checks the field values on EndCallRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndCallRequestMultiError,
// or nil if none found.
func (m *EndCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EndCallRequestMultiError(errors)
	}

	return nil
}

// EndCallRequestMultiError is an error wrapping multiple validation errors
// returned by EndCallRequest.ValidateAll() if the designated constraints
// aren't met.
type EndCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndCallRequestMultiError) AllErrors() []error { return m }

// EndCallRequestValidationError is the validation error returned by
// EndCallRequest.Validate if the designated constraints aren't met.
type EndCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndCallRequestValidationError) ErrorName() string { return "EndCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e EndCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndCallRequestValidationError{}

// Validate checks the field values on EndCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EndCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndCallResponseMultiError, or nil if none found.
func (m *EndCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EndCallResponseMultiError(errors)
	}

	return nil
}

// EndCallResponseMultiError is an error wrapping multiple validation errors
// returned by EndCallResponse.ValidateAll() if the designated constraints
// aren't met.
type EndCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndCallResponseMultiError) AllErrors() []error { return m }

// EndCallResponseValidationError is the validation error returned by
// EndCallResponse.Validate if the designated constraints aren't met.
type EndCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndCallResponseValidationError) ErrorName() string { return "EndCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e EndCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndCallResponseValidationError{}

// Validate checks the field values on StartBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBroadcastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBroadcastRequestMultiError, or nil if none found.
func (m *StartBroadcastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBroadcastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallId

	// no validation rules for CallType

	// no validation rules for HlsBroadcast

	if all {
		switch v := interface{}(m.GetRtmp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBroadcastRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBroadcastRequestValidationError{
					field:  "Rtmp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRtmp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBroadcastRequestValidationError{
				field:  "Rtmp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartBroadcastRequestMultiError(errors)
	}

	return nil
}

// StartBroadcastRequestMultiError is an error wrapping multiple validation
// errors returned by StartBroadcastRequest.ValidateAll() if the designated
// constraints aren't met.
type StartBroadcastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBroadcastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBroadcastRequestMultiError) AllErrors() []error { return m }

// StartBroadcastRequestValidationError is the validation error returned by
// StartBroadcastRequest.Validate if the designated constraints aren't met.
type StartBroadcastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBroadcastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBroadcastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBroadcastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBroadcastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBroadcastRequestValidationError) ErrorName() string {
	return "StartBroadcastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartBroadcastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBroadcastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBroadcastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBroadcastRequestValidationError{}

// Validate checks the field values on StartBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBroadcastResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBroadcastResponseMultiError, or nil if none found.
func (m *StartBroadcastResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBroadcastResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBroadcastResponseValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBroadcastResponseValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBroadcastResponseValidationError{
				field:  "Broadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartBroadcastResponseMultiError(errors)
	}

	return nil
}

// StartBroadcastResponseMultiError is an error wrapping multiple validation
// errors returned by StartBroadcastResponse.ValidateAll() if the designated
// constraints aren't met.
type StartBroadcastResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBroadcastResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBroadcastResponseMultiError) AllErrors() []error { return m }

// StartBroadcastResponseValidationError is the validation error returned by
// StartBroadcastResponse.Validate if the designated constraints aren't met.
type StartBroadcastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBroadcastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBroadcastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBroadcastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBroadcastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBroadcastResponseValidationError) ErrorName() string {
	return "StartBroadcastResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartBroadcastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBroadcastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBroadcastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBroadcastResponseValidationError{}

// Validate checks the field values on StopBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBroadcastRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBroadcastRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBroadcastRequestMultiError, or nil if none found.
func (m *StopBroadcastRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBroadcastRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopBroadcastRequestMultiError(errors)
	}

	return nil
}

// StopBroadcastRequestMultiError is an error wrapping multiple validation
// errors returned by StopBroadcastRequest.ValidateAll() if the designated
// constraints aren't met.
type StopBroadcastRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBroadcastRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBroadcastRequestMultiError) AllErrors() []error { return m }

// StopBroadcastRequestValidationError is the validation error returned by
// StopBroadcastRequest.Validate if the designated constraints aren't met.
type StopBroadcastRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBroadcastRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBroadcastRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBroadcastRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBroadcastRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBroadcastRequestValidationError) ErrorName() string {
	return "StopBroadcastRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopBroadcastRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBroadcastRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBroadcastRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBroadcastRequestValidationError{}

// Validate checks the field values on StopBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBroadcastResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBroadcastResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBroadcastResponseMultiError, or nil if none found.
func (m *StopBroadcastResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBroadcastResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopBroadcastResponseMultiError(errors)
	}

	return nil
}

// StopBroadcastResponseMultiError is an error wrapping multiple validation
// errors returned by StopBroadcastResponse.ValidateAll() if the designated
// constraints aren't met.
type StopBroadcastResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBroadcastResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBroadcastResponseMultiError) AllErrors() []error { return m }

// StopBroadcastResponseValidationError is the validation error returned by
// StopBroadcastResponse.Validate if the designated constraints aren't met.
type StopBroadcastResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBroadcastResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBroadcastResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBroadcastResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBroadcastResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBroadcastResponseValidationError) ErrorName() string {
	return "StopBroadcastResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopBroadcastResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBroadcastResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBroadcastResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBroadcastResponseValidationError{}

// Validate checks the field values on TranscribeCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TranscribeCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranscribeCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranscribeCallRequestMultiError, or nil if none found.
func (m *TranscribeCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TranscribeCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TranscribeCallRequestMultiError(errors)
	}

	return nil
}

// TranscribeCallRequestMultiError is an error wrapping multiple validation
// errors returned by TranscribeCallRequest.ValidateAll() if the designated
// constraints aren't met.
type TranscribeCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranscribeCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranscribeCallRequestMultiError) AllErrors() []error { return m }

// TranscribeCallRequestValidationError is the validation error returned by
// TranscribeCallRequest.Validate if the designated constraints aren't met.
type TranscribeCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeCallRequestValidationError) ErrorName() string {
	return "TranscribeCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TranscribeCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeCallRequestValidationError{}

// Validate checks the field values on TranscribeCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TranscribeCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranscribeCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranscribeCallResponseMultiError, or nil if none found.
func (m *TranscribeCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TranscribeCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TranscribeCallResponseMultiError(errors)
	}

	return nil
}

// TranscribeCallResponseMultiError is an error wrapping multiple validation
// errors returned by TranscribeCallResponse.ValidateAll() if the designated
// constraints aren't met.
type TranscribeCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranscribeCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranscribeCallResponseMultiError) AllErrors() []error { return m }

// TranscribeCallResponseValidationError is the validation error returned by
// TranscribeCallResponse.Validate if the designated constraints aren't met.
type TranscribeCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeCallResponseValidationError) ErrorName() string {
	return "TranscribeCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TranscribeCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeCallResponseValidationError{}

// Validate checks the field values on StopTranscribeCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopTranscribeCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopTranscribeCallRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopTranscribeCallRequestMultiError, or nil if none found.
func (m *StopTranscribeCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopTranscribeCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopTranscribeCallRequestMultiError(errors)
	}

	return nil
}

// StopTranscribeCallRequestMultiError is an error wrapping multiple validation
// errors returned by StopTranscribeCallRequest.ValidateAll() if the
// designated constraints aren't met.
type StopTranscribeCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopTranscribeCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopTranscribeCallRequestMultiError) AllErrors() []error { return m }

// StopTranscribeCallRequestValidationError is the validation error returned by
// StopTranscribeCallRequest.Validate if the designated constraints aren't met.
type StopTranscribeCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopTranscribeCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopTranscribeCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopTranscribeCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopTranscribeCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopTranscribeCallRequestValidationError) ErrorName() string {
	return "StopTranscribeCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopTranscribeCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopTranscribeCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopTranscribeCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopTranscribeCallRequestValidationError{}

// Validate checks the field values on StopTranscribeCallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopTranscribeCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopTranscribeCallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopTranscribeCallResponseMultiError, or nil if none found.
func (m *StopTranscribeCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopTranscribeCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopTranscribeCallResponseMultiError(errors)
	}

	return nil
}

// StopTranscribeCallResponseMultiError is an error wrapping multiple
// validation errors returned by StopTranscribeCallResponse.ValidateAll() if
// the designated constraints aren't met.
type StopTranscribeCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopTranscribeCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopTranscribeCallResponseMultiError) AllErrors() []error { return m }

// StopTranscribeCallResponseValidationError is the validation error returned
// by StopTranscribeCallResponse.Validate if the designated constraints aren't met.
type StopTranscribeCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopTranscribeCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopTranscribeCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopTranscribeCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopTranscribeCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopTranscribeCallResponseValidationError) ErrorName() string {
	return "StopTranscribeCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopTranscribeCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopTranscribeCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopTranscribeCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopTranscribeCallResponseValidationError{}

// Validate checks the field values on StoreLatencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreLatencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreLatencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreLatencyRequestMultiError, or nil if none found.
func (m *StoreLatencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreLatencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StoreLatencyRequestMultiError(errors)
	}

	return nil
}

// StoreLatencyRequestMultiError is an error wrapping multiple validation
// errors returned by StoreLatencyRequest.ValidateAll() if the designated
// constraints aren't met.
type StoreLatencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreLatencyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreLatencyRequestMultiError) AllErrors() []error { return m }

// StoreLatencyRequestValidationError is the validation error returned by
// StoreLatencyRequest.Validate if the designated constraints aren't met.
type StoreLatencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreLatencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreLatencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreLatencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreLatencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreLatencyRequestValidationError) ErrorName() string {
	return "StoreLatencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StoreLatencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreLatencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreLatencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreLatencyRequestValidationError{}

// Validate checks the field values on StoreLatencyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreLatencyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreLatencyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreLatencyResponseMultiError, or nil if none found.
func (m *StoreLatencyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreLatencyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StoreLatencyResponseMultiError(errors)
	}

	return nil
}

// StoreLatencyResponseMultiError is an error wrapping multiple validation
// errors returned by StoreLatencyResponse.ValidateAll() if the designated
// constraints aren't met.
type StoreLatencyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreLatencyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreLatencyResponseMultiError) AllErrors() []error { return m }

// StoreLatencyResponseValidationError is the validation error returned by
// StoreLatencyResponse.Validate if the designated constraints aren't met.
type StoreLatencyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreLatencyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreLatencyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreLatencyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreLatencyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreLatencyResponseValidationError) ErrorName() string {
	return "StoreLatencyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StoreLatencyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreLatencyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreLatencyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreLatencyResponseValidationError{}

// Validate checks the field values on StartRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartRecordingRequestMultiError, or nil if none found.
func (m *StartRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return StartRecordingRequestMultiError(errors)
	}

	return nil
}

// StartRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StartRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type StartRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecordingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecordingRequestMultiError) AllErrors() []error { return m }

// StartRecordingRequestValidationError is the validation error returned by
// StartRecordingRequest.Validate if the designated constraints aren't met.
type StartRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecordingRequestValidationError) ErrorName() string {
	return "StartRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecordingRequestValidationError{}

// Validate checks the field values on ReportCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCallStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCallStatsRequestMultiError, or nil if none found.
func (m *ReportCallStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCallStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportCallStatsRequestValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportCallStatsRequestValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportCallStatsRequestValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportCallStatsRequestMultiError(errors)
	}

	return nil
}

// ReportCallStatsRequestMultiError is an error wrapping multiple validation
// errors returned by ReportCallStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportCallStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCallStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCallStatsRequestMultiError) AllErrors() []error { return m }

// ReportCallStatsRequestValidationError is the validation error returned by
// ReportCallStatsRequest.Validate if the designated constraints aren't met.
type ReportCallStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCallStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCallStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCallStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCallStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCallStatsRequestValidationError) ErrorName() string {
	return "ReportCallStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCallStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCallStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCallStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCallStatsRequestValidationError{}

// Validate checks the field values on CallStatEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallStatEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallStatEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallStatEventMultiError, or
// nil if none found.
func (m *CallStatEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *CallStatEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if utf8.RuneCountInString(m.GetTime()) < 1 {
		err := CallStatEventValidationError{
			field:  "Time",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CallStatEventMultiError(errors)
	}

	return nil
}

// CallStatEventMultiError is an error wrapping multiple validation errors
// returned by CallStatEvent.ValidateAll() if the designated constraints
// aren't met.
type CallStatEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallStatEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallStatEventMultiError) AllErrors() []error { return m }

// CallStatEventValidationError is the validation error returned by
// CallStatEvent.Validate if the designated constraints aren't met.
type CallStatEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallStatEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallStatEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallStatEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallStatEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallStatEventValidationError) ErrorName() string { return "CallStatEventValidationError" }

// Error satisfies the builtin error interface
func (e CallStatEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallStatEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallStatEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallStatEventValidationError{}

// Validate checks the field values on ReportIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportIssueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportIssueRequestMultiError, or nil if none found.
func (m *ReportIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportIssueRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportIssueRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportIssueRequestValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportIssueRequestMultiError(errors)
	}

	return nil
}

// ReportIssueRequestMultiError is an error wrapping multiple validation errors
// returned by ReportIssueRequest.ValidateAll() if the designated constraints
// aren't met.
type ReportIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportIssueRequestMultiError) AllErrors() []error { return m }

// ReportIssueRequestValidationError is the validation error returned by
// ReportIssueRequest.Validate if the designated constraints aren't met.
type ReportIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportIssueRequestValidationError) ErrorName() string {
	return "ReportIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportIssueRequestValidationError{}

// Validate checks the field values on ReviewCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReviewCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCallRequestMultiError, or nil if none found.
func (m *ReviewCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	// no validation rules for Stars

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewCallRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewCallRequestValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewCallRequestValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReviewCallRequestMultiError(errors)
	}

	return nil
}

// ReviewCallRequestMultiError is an error wrapping multiple validation errors
// returned by ReviewCallRequest.ValidateAll() if the designated constraints
// aren't met.
type ReviewCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCallRequestMultiError) AllErrors() []error { return m }

// ReviewCallRequestValidationError is the validation error returned by
// ReviewCallRequest.Validate if the designated constraints aren't met.
type ReviewCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCallRequestValidationError) ErrorName() string {
	return "ReviewCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCallRequestValidationError{}

// Validate checks the field values on ReviewCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCallResponseMultiError, or nil if none found.
func (m *ReviewCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReviewCallResponseMultiError(errors)
	}

	return nil
}

// ReviewCallResponseMultiError is an error wrapping multiple validation errors
// returned by ReviewCallResponse.ValidateAll() if the designated constraints
// aren't met.
type ReviewCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCallResponseMultiError) AllErrors() []error { return m }

// ReviewCallResponseValidationError is the validation error returned by
// ReviewCallResponse.Validate if the designated constraints aren't met.
type ReviewCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCallResponseValidationError) ErrorName() string {
	return "ReviewCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCallResponseValidationError{}

// Validate checks the field values on ReportIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportIssueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportIssueResponseMultiError, or nil if none found.
func (m *ReportIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportIssueResponseMultiError(errors)
	}

	return nil
}

// ReportIssueResponseMultiError is an error wrapping multiple validation
// errors returned by ReportIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportIssueResponseMultiError) AllErrors() []error { return m }

// ReportIssueResponseValidationError is the validation error returned by
// ReportIssueResponse.Validate if the designated constraints aren't met.
type ReportIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportIssueResponseValidationError) ErrorName() string {
	return "ReportIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportIssueResponseValidationError{}

// Validate checks the field values on ParticipantCallStatEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantCallStatEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantCallStatEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantCallStatEventMultiError, or nil if none found.
func (m *ParticipantCallStatEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantCallStatEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParticipantId

	for idx, item := range m.GetCallTimelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParticipantCallStatEventValidationError{
						field:  fmt.Sprintf("CallTimelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParticipantCallStatEventValidationError{
						field:  fmt.Sprintf("CallTimelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParticipantCallStatEventValidationError{
					field:  fmt.Sprintf("CallTimelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParticipantCallStatEventMultiError(errors)
	}

	return nil
}

// ParticipantCallStatEventMultiError is an error wrapping multiple validation
// errors returned by ParticipantCallStatEvent.ValidateAll() if the designated
// constraints aren't met.
type ParticipantCallStatEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantCallStatEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantCallStatEventMultiError) AllErrors() []error { return m }

// ParticipantCallStatEventValidationError is the validation error returned by
// ParticipantCallStatEvent.Validate if the designated constraints aren't met.
type ParticipantCallStatEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantCallStatEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantCallStatEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantCallStatEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantCallStatEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantCallStatEventValidationError) ErrorName() string {
	return "ParticipantCallStatEventValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantCallStatEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantCallStatEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantCallStatEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantCallStatEventValidationError{}

// Validate checks the field values on GetCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallStatsRequestMultiError, or nil if none found.
func (m *GetCallStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return GetCallStatsRequestMultiError(errors)
	}

	return nil
}

// GetCallStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCallStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCallStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallStatsRequestMultiError) AllErrors() []error { return m }

// GetCallStatsRequestValidationError is the validation error returned by
// GetCallStatsRequest.Validate if the designated constraints aren't met.
type GetCallStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallStatsRequestValidationError) ErrorName() string {
	return "GetCallStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallStatsRequestValidationError{}

// Validate checks the field values on CallStats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallStatsMultiError, or nil
// if none found.
func (m *CallStats) ValidateAll() error {
	return m.validate(true)
}

func (m *CallStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCallTimelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CallStatsValidationError{
						field:  fmt.Sprintf("CallTimelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CallStatsValidationError{
						field:  fmt.Sprintf("CallTimelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallStatsValidationError{
					field:  fmt.Sprintf("CallTimelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetParticipantTimelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CallStatsValidationError{
						field:  fmt.Sprintf("ParticipantTimelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CallStatsValidationError{
						field:  fmt.Sprintf("ParticipantTimelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallStatsValidationError{
					field:  fmt.Sprintf("ParticipantTimelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CallStatsMultiError(errors)
	}

	return nil
}

// CallStatsMultiError is an error wrapping multiple validation errors returned
// by CallStats.ValidateAll() if the designated constraints aren't met.
type CallStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallStatsMultiError) AllErrors() []error { return m }

// CallStatsValidationError is the validation error returned by
// CallStats.Validate if the designated constraints aren't met.
type CallStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallStatsValidationError) ErrorName() string { return "CallStatsValidationError" }

// Error satisfies the builtin error interface
func (e CallStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallStatsValidationError{}

// Validate checks the field values on GetCallStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCallStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallStatsResponseMultiError, or nil if none found.
func (m *GetCallStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallStatsResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallStatsResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallStatsResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCallStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallStatsResponseValidationError{
					field:  "CallStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallStatsResponseValidationError{
					field:  "CallStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCallStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallStatsResponseValidationError{
				field:  "CallStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallStatsResponseMultiError(errors)
	}

	return nil
}

// GetCallStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCallStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCallStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallStatsResponseMultiError) AllErrors() []error { return m }

// GetCallStatsResponseValidationError is the validation error returned by
// GetCallStatsResponse.Validate if the designated constraints aren't met.
type GetCallStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallStatsResponseValidationError) ErrorName() string {
	return "GetCallStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCallStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallStatsResponseValidationError{}

// Validate checks the field values on ReportCallStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCallStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCallStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCallStatsResponseMultiError, or nil if none found.
func (m *ReportCallStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCallStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportCallStatsResponseMultiError(errors)
	}

	return nil
}

// ReportCallStatsResponseMultiError is an error wrapping multiple validation
// errors returned by ReportCallStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportCallStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCallStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCallStatsResponseMultiError) AllErrors() []error { return m }

// ReportCallStatsResponseValidationError is the validation error returned by
// ReportCallStatsResponse.Validate if the designated constraints aren't met.
type ReportCallStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCallStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCallStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCallStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCallStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCallStatsResponseValidationError) ErrorName() string {
	return "ReportCallStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCallStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCallStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCallStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCallStatsResponseValidationError{}

// Validate checks the field values on StartRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartRecordingResponseMultiError, or nil if none found.
func (m *StartRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartRecordingResponseMultiError(errors)
	}

	return nil
}

// StartRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by StartRecordingResponse.ValidateAll() if the designated
// constraints aren't met.
type StartRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecordingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecordingResponseMultiError) AllErrors() []error { return m }

// StartRecordingResponseValidationError is the validation error returned by
// StartRecordingResponse.Validate if the designated constraints aren't met.
type StartRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecordingResponseValidationError) ErrorName() string {
	return "StartRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecordingResponseValidationError{}

// Validate checks the field values on StopRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopRecordingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopRecordingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopRecordingRequestMultiError, or nil if none found.
func (m *StopRecordingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopRecordingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	if len(errors) > 0 {
		return StopRecordingRequestMultiError(errors)
	}

	return nil
}

// StopRecordingRequestMultiError is an error wrapping multiple validation
// errors returned by StopRecordingRequest.ValidateAll() if the designated
// constraints aren't met.
type StopRecordingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopRecordingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopRecordingRequestMultiError) AllErrors() []error { return m }

// StopRecordingRequestValidationError is the validation error returned by
// StopRecordingRequest.Validate if the designated constraints aren't met.
type StopRecordingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRecordingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRecordingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRecordingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRecordingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRecordingRequestValidationError) ErrorName() string {
	return "StopRecordingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopRecordingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRecordingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRecordingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRecordingRequestValidationError{}

// Validate checks the field values on StopRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopRecordingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopRecordingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopRecordingResponseMultiError, or nil if none found.
func (m *StopRecordingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopRecordingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for S3FileUrl

	if len(errors) > 0 {
		return StopRecordingResponseMultiError(errors)
	}

	return nil
}

// StopRecordingResponseMultiError is an error wrapping multiple validation
// errors returned by StopRecordingResponse.ValidateAll() if the designated
// constraints aren't met.
type StopRecordingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopRecordingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopRecordingResponseMultiError) AllErrors() []error { return m }

// StopRecordingResponseValidationError is the validation error returned by
// StopRecordingResponse.Validate if the designated constraints aren't met.
type StopRecordingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopRecordingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopRecordingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopRecordingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopRecordingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopRecordingResponseValidationError) ErrorName() string {
	return "StopRecordingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopRecordingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopRecordingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopRecordingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopRecordingResponseValidationError{}

// Validate checks the field values on GetRecordingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordingsRequestMultiError, or nil if none found.
func (m *GetRecordingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRecordingsRequestMultiError(errors)
	}

	return nil
}

// GetRecordingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetRecordingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRecordingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordingsRequestMultiError) AllErrors() []error { return m }

// GetRecordingsRequestValidationError is the validation error returned by
// GetRecordingsRequest.Validate if the designated constraints aren't met.
type GetRecordingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordingsRequestValidationError) ErrorName() string {
	return "GetRecordingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordingsRequestValidationError{}

// Validate checks the field values on GetRecordingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRecordingsResponseMultiError, or nil if none found.
func (m *GetRecordingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecordings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRecordingsResponseValidationError{
						field:  fmt.Sprintf("Recordings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRecordingsResponseValidationError{
						field:  fmt.Sprintf("Recordings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRecordingsResponseValidationError{
					field:  fmt.Sprintf("Recordings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRecordingsResponseMultiError(errors)
	}

	return nil
}

// GetRecordingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetRecordingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRecordingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordingsResponseMultiError) AllErrors() []error { return m }

// GetRecordingsResponseValidationError is the validation error returned by
// GetRecordingsResponse.Validate if the designated constraints aren't met.
type GetRecordingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordingsResponseValidationError) ErrorName() string {
	return "GetRecordingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordingsResponseValidationError{}

// Validate checks the field values on SendEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEventRequestMultiError, or nil if none found.
func (m *SendEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CallType

	// no validation rules for CallId

	// no validation rules for EventType

	if len(errors) > 0 {
		return SendEventRequestMultiError(errors)
	}

	return nil
}

// SendEventRequestMultiError is an error wrapping multiple validation errors
// returned by SendEventRequest.ValidateAll() if the designated constraints
// aren't met.
type SendEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEventRequestMultiError) AllErrors() []error { return m }

// SendEventRequestValidationError is the validation error returned by
// SendEventRequest.Validate if the designated constraints aren't met.
type SendEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEventRequestValidationError) ErrorName() string { return "SendEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEventRequestValidationError{}

// Validate checks the field values on SendEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEventResponseMultiError, or nil if none found.
func (m *SendEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEventResponseMultiError(errors)
	}

	return nil
}

// SendEventResponseMultiError is an error wrapping multiple validation errors
// returned by SendEventResponse.ValidateAll() if the designated constraints
// aren't met.
type SendEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEventResponseMultiError) AllErrors() []error { return m }

// SendEventResponseValidationError is the validation error returned by
// SendEventResponse.Validate if the designated constraints aren't met.
type SendEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEventResponseValidationError) ErrorName() string {
	return "SendEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEventResponseValidationError{}

// Validate checks the field values on GetRecordingsResponse_Recording with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRecordingsResponse_Recording) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRecordingsResponse_Recording with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRecordingsResponse_RecordingMultiError, or nil if none found.
func (m *GetRecordingsResponse_Recording) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRecordingsResponse_Recording) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallType

	// no validation rules for CallId

	// no validation rules for S3FileUrl

	// no validation rules for StartTime

	// no validation rules for StopTime

	if len(errors) > 0 {
		return GetRecordingsResponse_RecordingMultiError(errors)
	}

	return nil
}

// GetRecordingsResponse_RecordingMultiError is an error wrapping multiple
// validation errors returned by GetRecordingsResponse_Recording.ValidateAll()
// if the designated constraints aren't met.
type GetRecordingsResponse_RecordingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRecordingsResponse_RecordingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRecordingsResponse_RecordingMultiError) AllErrors() []error { return m }

// GetRecordingsResponse_RecordingValidationError is the validation error
// returned by GetRecordingsResponse_Recording.Validate if the designated
// constraints aren't met.
type GetRecordingsResponse_RecordingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRecordingsResponse_RecordingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRecordingsResponse_RecordingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRecordingsResponse_RecordingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRecordingsResponse_RecordingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRecordingsResponse_RecordingValidationError) ErrorName() string {
	return "GetRecordingsResponse_RecordingValidationError"
}

// Error satisfies the builtin error interface
func (e GetRecordingsResponse_RecordingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRecordingsResponse_Recording.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRecordingsResponse_RecordingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRecordingsResponse_RecordingValidationError{}
