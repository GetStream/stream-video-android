if (!rootProject.ext.sonar.ignoreModules.contains(name)) {
    apply plugin: 'jacoco'
    apply plugin: "org.sonarqube"

    def testTask = "testDebugUnitTest"
    def jacocoResults = "${buildDir}/reports/jacoco/report.xml"

    if (hasProperty('android')) {
        android {
            buildTypes {
                debug {
                    testCoverageEnabled = true
                    enableUnitTestCoverage = true
                    enableAndroidTestCoverage true
                }
            }
        }
    }

    afterEvaluate {
        tasks.withType(Test).configureEach {
            jacoco.includeNoLocationClasses = true
            jacoco.excludes = [
                'jdk.internal.*',
                'androidx.core.*',
                'com.android.*',
                'android.*'
            ]
        }

        tasks.register("testCoverage", JacocoReport) {
            dependsOn testTask

            reports {
                xml.required.set(true)
                xml.outputLocation.set(file(jacocoResults))
            }

            executionData.setFrom(fileTree(dir: buildDir, includes: [
                "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
            ]))

            sourceDirectories.setFrom(files([
                "src/main/kotlin"
            ]))

            classDirectories.setFrom(files([
                fileTree(
                    dir: "${buildDir}/tmp/kotlin-classes/debug",
                    excludes: rootProject.ext.sonar.excludeFilter
                )
            ]))
        }
    }

    sonarqube {
        properties {
            property "sonar.junit.reportPaths", "${buildDir}/test-results/${testTask}"
            property "sonar.coverage.jacoco.xmlReportPaths", jacocoResults
            property "sonar.sources", "src/main/kotlin"
        }
    }
}
