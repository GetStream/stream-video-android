ext.coverageModules = [
        'stream-video-android-core',
        'stream-video-android-ui-core',
        'stream-video-android-ui-xml',
        'stream-video-android-ui-compose',
]

ext.koverClassExcludes = [
        '*R',
        '*R$*',
        '*BuildConfig',
        '*Manifest*',
        '*Composable*',
        "io.getstream.android.video.generated.*",
        "io.getstream.video.android.core.model.*"
]
ext.koverAnnotationExcludes = [
        'androidx.compose.ui.tooling.preview.Preview'
]

def configureKoverReports(project) {
    project.kover {
        reports {
            verify {
                warningInsteadOfFailure = true
            }
            filters {
                excludes {
                    classes(rootProject.ext.koverClassExcludes as String[])
                    annotatedBy(rootProject.ext.koverAnnotationExcludes as String[])
                }
            }
        }
    }
}

def coverageModulesWithTests = subprojects.findAll {
    rootProject.ext.coverageModules.contains(it.name) && file("${it.projectDir}/src/test").exists()
}
println("\nSetting up coverage for:\n${coverageModulesWithTests.join("\n")}\n")

// Configure code coverage for modules with tests
subprojects {
    def isCoverageModule = coverageModulesWithTests.collect {it.name}.contains(name)

    sonar {
        skipProject = !isCoverageModule
    }

    if (isCoverageModule) {
        apply plugin: "org.jetbrains.kotlinx.kover"

        afterEvaluate {
            def isAndroidModule = plugins.hasPlugin("com.android.library") || plugins.hasPlugin("com.android.application")

            if (isAndroidModule) {
                android {
                    buildTypes {
                        debug {
                            testCoverageEnabled = true
                            enableUnitTestCoverage = true
                        }
                    }
                }
            }

            kover {
                currentProject {
                    // Variant configuration for aggregated coverage
                    createVariant("coverage") {
                        if (isAndroidModule) {
                            add(["debug"], true)
                        } else {
                            add(["jvm"], true)
                        }
                    }
                }
                configureKoverReports(project)
            }
        }
    }
}

// Configure root project to aggregate coverage reports
apply plugin: "org.jetbrains.kotlinx.kover"

// Specify the projects that should be included in the aggregate coverage report
coverageModulesWithTests.each { project -> dependencies { kover(project) } }

// Aggregate all submodules' testCoverage + merged reports
tasks.register("testCoverage") {
    group = "verification"
    description = "Run all tests in all modules and generate merged coverage report"

    def paparazziTests = coverageModulesWithTests.findAll {
        project(":${it.name}").plugins.hasPlugin("app.cash.paparazzi")
    }.collect { ":${it.name}:verifyPaparazziDebug" }
    // Run Paparazzi tests first (if any) to ensure they run before unit tests
    dependsOn(paparazziTests)

    // Then run Kover reports which automatically depends on the unit test tasks
    finalizedBy("koverXmlReportCoverage", "koverHtmlReportCoverage")
}

kover {
    currentProject {
        // Variant configuration for aggregated coverage (needs to be defined in the root project too)
        createVariant("coverage") {}
    }
    configureKoverReports(project)
}

sonar {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/kover/reportCoverage.xml"

        def sources = coverageModulesWithTests.collect { project ->
            "${project.projectDir}/src/main/kotlin"
        }.join(",")
        property "sonar.sources", sources

        def tests = coverageModulesWithTests.collect { project ->
            [
                    "${project.projectDir}/src/androidTest/kotlin",
                    "${project.projectDir}/src/test/kotlin"
            ]
        }.flatten().join(",")
        property "sonar.tests", tests
    }
}
