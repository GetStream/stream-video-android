default_platform :android
skip_docs

require 'json'
require 'net/http'

test_flavor = 'demo-app'
video_buddy_port = 5678
is_localhost = !is_ci
@force_check = false

before_all do |lane|
  if is_ci
    setup_ci
    setup_git_config
  end
end

lane :start_video_buddy do
  stop_video_buddy if is_localhost
  sh("stream-video-buddy server --port #{video_buddy_port} > video-buddy-server.log 2>&1 &")
end

lane :stop_video_buddy do
  Net::HTTP.get_response(URI("http://localhost:#{video_buddy_port}/stop")) rescue nil
end

lane :restart_video_buddy do
  stop_video_buddy
  start_video_buddy
end

lane :run_sonar_analysis do |options|
  next unless is_check_required(sources: sources_matrix[:sonar], force_check: @force_check)

  Dir.chdir('..') { sh('./gradlew sonar') }
end

lane :build_and_run_e2e_test do |options|
  build_e2e_test
  run_e2e_test(batch: options[:batch], batch_count: options[:batch_count])
end

lane :build_e2e_test do
  next unless is_check_required(sources: sources_matrix[:e2e], force_check: @force_check)

  gradle(
    tasks: [":#{test_flavor}:assembleE2eDevelopmentAndroidTest", ":#{test_flavor}:assembleE2eDevelopment"],
    flags: "--scan"
  )
end

lane :run_e2e_test do |options|
  next unless is_check_required(sources: sources_matrix[:e2e], force_check: @force_check)

  allure_results_path = 'allure-results'
  adb_test_results_path = '/sdcard/googletest/test_outputfiles'
  sh("rm -rf #{allure_results_path}")
  sh("adb shell rm -rf #{adb_test_results_path}/#{allure_results_path}")

  start_video_buddy
  install_test_services

  stream_apk_folder_path = is_ci ? '..' : "../#{test_flavor}/build/outputs/apk"
  stream_app_path = "#{stream_apk_folder_path}/e2e/development/demo-app-development-debug.apk"
  stream_test_path = "#{stream_apk_folder_path}/androidTest/e2e/development/demo-app-development-debug-androidTest.apk"
  sh("adb install -r #{stream_app_path}")
  sh("adb install -r #{stream_test_path}")

  app_package_name = 'io.getstream.video.android.e2etest.debug'
  test_package_name = "#{app_package_name}.test"
  runner_package_name = 'io.qameta.allure.android.runners.AllureAndroidJUnitRunner'
  orchestrator_package_name = 'androidx.test.orchestrator/.AndroidTestOrchestrator'
  androidx_test_services_path = sh('adb shell pm path androidx.test.services').strip

  run_tests_in_batches = batch_tests(
    batch: options[:batch],
    batch_count: options[:batch_count],
    test_apk_path: stream_test_path
  )

  result = sh(
    "adb shell 'CLASSPATH=#{androidx_test_services_path}' " \
    'app_process / androidx.test.services.shellexecutor.ShellMain am instrument -w -e clearPackageData true ' \
    "-e targetInstrumentation #{test_package_name}/#{runner_package_name} #{run_tests_in_batches} #{orchestrator_package_name}"
  )

  sh("adb exec-out sh -c 'cd #{adb_test_results_path} && tar cf - #{allure_results_path}' | tar xvf - -C .") if is_ci
  stop_video_buddy

  UI.user_error!('Tests have failed!') if result.include?('Failures')
end

private_lane :batch_tests do |options|
  if options[:batch] && options[:batch_count]
    install(tool: :test_parser)
    sh("java -jar test-parser.jar #{options[:test_apk_path]} ./")
    test_names = File.read('AllTests.txt').split
    current_batch = test_names.each_slice((test_names.size.to_f / options[:batch_count].to_i).ceil).to_a[options[:batch].to_i]
    "-e class #{current_batch.join(',')}"
  else
    ''
  end
end

private_lane :install_test_services do
  FileUtils.mkdir_p('apks')
  device_api_level = sh('adb shell getprop ro.build.version.sdk').strip.to_i
  install(tool: :test_orchestrator, api_level: device_api_level)
  install(tool: :test_services, api_level: device_api_level)
  install(tool: :allurectl, chmod: true) if is_ci
end

lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby], force_check: @force_check)

  sh('bundle exec rubocop')
end

lane :install_video_buddy do
  playwright_version = '1.51.1'
  sh("npm install -g playwright@#{playwright_version}")
  sh('npx playwright install chromium')

  stream_video_buddy_version = '1.6.24'
  sh("npm list -g stream-video-buddy | grep -q '#{stream_video_buddy_version}' || " \
     "npm install -g 'https://github.com/GetStream/stream-video-buddy##{stream_video_buddy_version}'")
end

private_lane :sources_matrix do
  {
    e2e: ['demo-app', 'stream-video-android-', '.github/workflows/e2e-test'],
    sonar: ['stream-video-android-'],
    ruby: ['fastlane', 'Gemfile', 'Gemfile.lock']
  }
end
