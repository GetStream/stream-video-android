syntax = "proto3";

package stream.video.sfu.remote_control;

import "google/protobuf/timestamp.proto";
import "video/sfu/models/models.proto";

option go_package = "remote_control_rpc";

// RemoteControlRPC is an internal RPC to control SFU from the Coordinator


// Marcelo joins the call
// coordinator picks SFU A for the call
// CreateCall RPC call to SFU A
// Tommaso joins the call
// coordinator picks SFU B for the call
// CreateCall RPC call to SFU B and sends cascading_sfus=[A]
// SFU B calls GossipRPC.JoinCall on SFU A

// TODO: better naming ideas?
service RemoteControlRPC {
  // DisconnectUser closes all user network connections, essentially kicking a user from the call.
  // A disconnect should happen in a way that does not trigger automatic reconnection, and the client should
  // get appropriate message.
  rpc KickUser(KickUserRequest) returns (KickUserResponse);
  // UpdateParticipantsMuteStatus allows changing muted status for users in a call.
  // Audio, Video and Screen share can be muted via this endpoint.
  rpc UpdateParticipantsMuteStatus(UpdateParticipantsMuteStatusRequest) returns (UpdateParticipantsMuteStatusResponse);
  // GetCall returns a call information
  rpc GetCall(GetCallRequest) returns (GetCallResponse);
  // CreateCall creates a Call on SFU
  rpc CreateCall(CreateCallRequest) returns (CreateCallResponse);
  // EndCall finalizes the call, disconnecting all remaining participants
  rpc EndCall(EndCallRequest) returns (EndCallResponse);
  // UpdateCallPermissions replaces the permissions for a call with the provided ones
  rpc UpdateCallPermissions(UpdateCallPermissionsRequest) returns (UpdateCallPermissionsResponse);
  rpc SendUserPermissionOverride(SendUserPermissionOverrideRequest) returns (SendUserPermissionOverrideResponse);
}

message ActionOverride {
  PermissionAction action = 1;
  PermissionActionOverrideType type = 2;
}

message SendUserPermissionOverrideRequest {
  // App PK
  int64 app_pk = 1;
  // Call ID
  string id = 2;
  // User ID
  string user_id = 3;
  repeated ActionOverride overrides = 4;
}

message SendUserPermissionOverrideResponse {
}

// A request message for UpdateCallPermissions endpoint
message UpdateCallPermissionsRequest {
  // App PK
  int64 app_pk = 1;
  // Call ID
  string id = 2;
  // The permissions for the call organized by their role
  map<string, Permissions> permissions_by_role = 3;
}

message UpdateCallPermissionsResponse {
}

// A request message for KickUser endpoint
message KickUserRequest {
  // App PK
  int64 app_pk = 1;
  // An ID of the user to disconnect
  string user_id = 2;
  // Call IDs to which this request applies.
  // If empty, should be treated as "all calls"
  repeated string call_ids = 3;
  // A message to display to a user when its disconnected
  string message = 4;
  // Optional. A timestamp which tells SFU to deny all tokens issued before this date
  google.protobuf.Timestamp not_before = 5;
  // When set, the user's tokens are invalidated
  bool invalidate_tokens = 6;
}

// A response message for KickUser endpoint
message KickUserResponse {
}

// A request message for UpdateParticipantsMuteStatus endpoint.
message UpdateParticipantsMuteStatusRequest {
  // App PK
  int64 app_pk = 1;
  // The call ID
  string call_id = 2;
  // List of users to mute
  repeated string user_ids = 3;
  // The message to send to users
  string message = 4;
  // Specifies what tracks to mute/unmute
  repeated models.TrackType tracks = 6;
  // Whether to set to muted or not
  bool muted = 7;
  // Whether to mute all users (user_ids is ignored)
  bool mute_all_users = 8;
  // The user IDs to exclude from mute_all
  repeated string mute_all_excluded_user_ids = 9;
}

// A response message for UpdateParticipantsMuteStatus endpoint.
message UpdateParticipantsMuteStatusResponse {
}

// A request message for InvaludateUserToken endpoint
message InvalidateTokenRequest {
  // App PK
  int64 app_pk = 1;
  // An ID of the user to invalidate tokens for
  string user_id = 2;
  // Call IDs to which this request applies.
  // If empty, should be treated as "all calls"
  repeated string call_ids = 3;
  // A message to display to a user in the event of disconnect
  string message = 4;
  // A cut-off date for all the tokens
  google.protobuf.Timestamp not_before = 5;
}

// A response message for InvaludateUserToken endpoint
message InvalidateTokenResponse {
}

// A request message for MuteParticipants endpoint
message MuteParticipantsRequest {
  // App PK
  int64 app_pk = 1;
  // List of part
  repeated models.Participant participants = 2;
}

// A message that tells which participant to mute
message MuteParticipantInput {
  // User ID to mute
  string user_id = 1;
  // Session ID to mute
  // If empty, all sessions of provided user ID should be muted
  optional string session_id = 2;
  // Whether to mute video
  optional bool mute_audio = 3;
  // Whether to mute audio
  optional bool mute_video = 4;
}

// A response message for MuteParticipants endpoint
message MuteParticipantsResponse {
}

// A request message for GetCall endpoint
message GetCallRequest {
  // App PK
  int64 app_pk = 1;
  // A call ID
  string id = 2;
  // Whether to include state information in the response
  bool with_state = 3;
}

// A response message for GetCall endpoint
message GetCallResponse {
  // Call model
  models.Call call = 1;
  // Call state
  models.CallState state = 2;
}

// Permission action enum
// Indicates the type of action a permission refers to
enum PermissionAction {
  PERMISSION_ACTION_UNSPECIFIED = 0;
  PERMISSION_ACTION_PUBLISH_VIDEO = 1;
  PERMISSION_ACTION_PUBLISH_AUDIO = 2;
  PERMISSION_ACTION_SCREENSHARE = 3;
}

enum PermissionActionOverrideType {
  PERMISSION_ACTION_OVERRIDE_TYPE_UNSPECIFIED = 0;
  PERMISSION_ACTION_OVERRIDE_TYPE_ALLOW = 1;
  PERMISSION_ACTION_OVERRIDE_TYPE_DENY = 2;
}

// A message that contains a permission
message Permission {
  // the action this permission refers to
  PermissionAction action = 1;
  // whether the permission is granted or not only to the call owner
  bool owner = 2;
}

// A message that contains a list of permissions
message Permissions {
  repeated Permission permissions = 1;
}

// A request message for CreateCall endpoint
message CreateCallRequest {
  // App PK
  int64 app_pk = 1;
  // Call ID
  string id = 2;
  // List of SFUs that are used for this call
  repeated string cascading_sfus_hostnames = 3;
  // The token the SFU can use to participate in the gossip protocol
  string gossip_rpc_auth_token = 4;
  // The permissions for the call organized by their role
  map<string, Permissions> permissions_by_role = 5;
  // the shard_id (i.e us_east:v1) where this app is allocated
  // used to publish session related events
  string shard_id = 6;
}

// A response message for CreateCall endpoint
message CreateCallResponse {
  // A model of created call
  models.Call call = 1;
}

// A request message for EndCall endpoint
message EndCallRequest {
  // App PK
  int64 app_pk = 1;
  // Call ID
  string id = 2;
  // A message to display to disconnected participants
  string message = 3;
}

// A response message for EndCall endpoint
message EndCallResponse {
  // A model of a call
  models.Call call = 1;
  // TODO: return some call stats?
}
