// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: video/sfu/remote_control_rpc/remote_control_v1.proto

package remote_control_rpc

import (
	models "github.com/GetStream/video-proto/protobuf/video/sfu/models"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message for KickUser endpoint
type KickUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App PK
	AppPk int64 `protobuf:"varint,1,opt,name=app_pk,json=appPk,proto3" json:"app_pk,omitempty"`
	// An ID of the user to disconnect
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Call IDs to which this request applies.
	// If empty, should be treated as "all calls"
	CallIds []string `protobuf:"bytes,3,rep,name=call_ids,json=callIds,proto3" json:"call_ids,omitempty"`
	// A message to display to a user when its disconnected
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Optional. A timestamp which tells SFU to deny all tokens issued before this date
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	// When set, the user's tokens are invalidated
	InvalidateTokens bool `protobuf:"varint,6,opt,name=invalidate_tokens,json=invalidateTokens,proto3" json:"invalidate_tokens,omitempty"`
}

func (x *KickUserRequest) Reset() {
	*x = KickUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserRequest) ProtoMessage() {}

func (x *KickUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserRequest.ProtoReflect.Descriptor instead.
func (*KickUserRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{0}
}

func (x *KickUserRequest) GetAppPk() int64 {
	if x != nil {
		return x.AppPk
	}
	return 0
}

func (x *KickUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *KickUserRequest) GetCallIds() []string {
	if x != nil {
		return x.CallIds
	}
	return nil
}

func (x *KickUserRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KickUserRequest) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *KickUserRequest) GetInvalidateTokens() bool {
	if x != nil {
		return x.InvalidateTokens
	}
	return false
}

// A response message for KickUser endpoint
type KickUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KickUserResponse) Reset() {
	*x = KickUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserResponse) ProtoMessage() {}

func (x *KickUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserResponse.ProtoReflect.Descriptor instead.
func (*KickUserResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{1}
}

// A request message for UpdateParticipantsMuteStatus endpoint.
type UpdateParticipantsMuteStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App PK
	AppPk int64 `protobuf:"varint,1,opt,name=app_pk,json=appPk,proto3" json:"app_pk,omitempty"`
	// The call ID
	CallId string `protobuf:"bytes,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	// List of users to mute
	UserIds []string `protobuf:"bytes,3,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// The message to send to users
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Specifies what tracks to mute/unmute
	Tracks []models.TrackType `protobuf:"varint,6,rep,packed,name=tracks,proto3,enum=stream.video.sfu.models.TrackType" json:"tracks,omitempty"`
	// Whether to set to muted or not
	Muted bool `protobuf:"varint,7,opt,name=muted,proto3" json:"muted,omitempty"`
}

func (x *UpdateParticipantsMuteStatusRequest) Reset() {
	*x = UpdateParticipantsMuteStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateParticipantsMuteStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParticipantsMuteStatusRequest) ProtoMessage() {}

func (x *UpdateParticipantsMuteStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParticipantsMuteStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateParticipantsMuteStatusRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateParticipantsMuteStatusRequest) GetAppPk() int64 {
	if x != nil {
		return x.AppPk
	}
	return 0
}

func (x *UpdateParticipantsMuteStatusRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *UpdateParticipantsMuteStatusRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *UpdateParticipantsMuteStatusRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateParticipantsMuteStatusRequest) GetTracks() []models.TrackType {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *UpdateParticipantsMuteStatusRequest) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

// A response message for UpdateParticipantsMuteStatus endpoint.
type UpdateParticipantsMuteStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateParticipantsMuteStatusResponse) Reset() {
	*x = UpdateParticipantsMuteStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateParticipantsMuteStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParticipantsMuteStatusResponse) ProtoMessage() {}

func (x *UpdateParticipantsMuteStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParticipantsMuteStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateParticipantsMuteStatusResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{3}
}

// A request message for InvaludateUserToken endpoint
type InvalidateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App PK
	AppPk int64 `protobuf:"varint,1,opt,name=app_pk,json=appPk,proto3" json:"app_pk,omitempty"`
	// An ID of the user to invalidate tokens for
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Call IDs to which this request applies.
	// If empty, should be treated as "all calls"
	CallIds []string `protobuf:"bytes,3,rep,name=call_ids,json=callIds,proto3" json:"call_ids,omitempty"`
	// A message to display to a user in the event of disconnect
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// A cut-off date for all the tokens
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
}

func (x *InvalidateTokenRequest) Reset() {
	*x = InvalidateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTokenRequest) ProtoMessage() {}

func (x *InvalidateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTokenRequest.ProtoReflect.Descriptor instead.
func (*InvalidateTokenRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{4}
}

func (x *InvalidateTokenRequest) GetAppPk() int64 {
	if x != nil {
		return x.AppPk
	}
	return 0
}

func (x *InvalidateTokenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InvalidateTokenRequest) GetCallIds() []string {
	if x != nil {
		return x.CallIds
	}
	return nil
}

func (x *InvalidateTokenRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InvalidateTokenRequest) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

// A response message for InvaludateUserToken endpoint
type InvalidateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidateTokenResponse) Reset() {
	*x = InvalidateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTokenResponse) ProtoMessage() {}

func (x *InvalidateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTokenResponse.ProtoReflect.Descriptor instead.
func (*InvalidateTokenResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{5}
}

// A request message for MuteParticipants endpoint
type MuteParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App PK
	AppPk int64 `protobuf:"varint,1,opt,name=app_pk,json=appPk,proto3" json:"app_pk,omitempty"`
	// List of part
	Participants []*models.Participant `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *MuteParticipantsRequest) Reset() {
	*x = MuteParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteParticipantsRequest) ProtoMessage() {}

func (x *MuteParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteParticipantsRequest.ProtoReflect.Descriptor instead.
func (*MuteParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{6}
}

func (x *MuteParticipantsRequest) GetAppPk() int64 {
	if x != nil {
		return x.AppPk
	}
	return 0
}

func (x *MuteParticipantsRequest) GetParticipants() []*models.Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

// A message that tells which participant to mute
type MuteParticipantInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID to mute
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Session ID to mute
	// If empty, all sessions of provided user ID should be muted
	SessionId *string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
	// Whether to mute video
	MuteAudio *bool `protobuf:"varint,3,opt,name=mute_audio,json=muteAudio,proto3,oneof" json:"mute_audio,omitempty"`
	// Whether to mute audio
	MuteVideo *bool `protobuf:"varint,4,opt,name=mute_video,json=muteVideo,proto3,oneof" json:"mute_video,omitempty"`
}

func (x *MuteParticipantInput) Reset() {
	*x = MuteParticipantInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteParticipantInput) ProtoMessage() {}

func (x *MuteParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteParticipantInput.ProtoReflect.Descriptor instead.
func (*MuteParticipantInput) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{7}
}

func (x *MuteParticipantInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MuteParticipantInput) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *MuteParticipantInput) GetMuteAudio() bool {
	if x != nil && x.MuteAudio != nil {
		return *x.MuteAudio
	}
	return false
}

func (x *MuteParticipantInput) GetMuteVideo() bool {
	if x != nil && x.MuteVideo != nil {
		return *x.MuteVideo
	}
	return false
}

// A response message for MuteParticipants endpoint
type MuteParticipantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MuteParticipantsResponse) Reset() {
	*x = MuteParticipantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteParticipantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteParticipantsResponse) ProtoMessage() {}

func (x *MuteParticipantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteParticipantsResponse.ProtoReflect.Descriptor instead.
func (*MuteParticipantsResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{8}
}

// A request message for GetCall endpoint
type GetCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App PK
	AppPk int64 `protobuf:"varint,1,opt,name=app_pk,json=appPk,proto3" json:"app_pk,omitempty"`
	// A call ID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Whether to include state information in the response
	WithState bool `protobuf:"varint,3,opt,name=with_state,json=withState,proto3" json:"with_state,omitempty"`
}

func (x *GetCallRequest) Reset() {
	*x = GetCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallRequest) ProtoMessage() {}

func (x *GetCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallRequest.ProtoReflect.Descriptor instead.
func (*GetCallRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{9}
}

func (x *GetCallRequest) GetAppPk() int64 {
	if x != nil {
		return x.AppPk
	}
	return 0
}

func (x *GetCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCallRequest) GetWithState() bool {
	if x != nil {
		return x.WithState
	}
	return false
}

// A response message for GetCall endpoint
type GetCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Call model
	Call *models.Call `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	// Call state
	State *models.CallState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetCallResponse) Reset() {
	*x = GetCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallResponse) ProtoMessage() {}

func (x *GetCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallResponse.ProtoReflect.Descriptor instead.
func (*GetCallResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{10}
}

func (x *GetCallResponse) GetCall() *models.Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *GetCallResponse) GetState() *models.CallState {
	if x != nil {
		return x.State
	}
	return nil
}

// A request message for CreateCall endpoint
type CreateCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App PK
	AppPk int64 `protobuf:"varint,1,opt,name=app_pk,json=appPk,proto3" json:"app_pk,omitempty"`
	// Call ID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// List of SFUs that are used for this call
	CascadingSfusHostnames []string `protobuf:"bytes,3,rep,name=cascading_sfus_hostnames,json=cascadingSfusHostnames,proto3" json:"cascading_sfus_hostnames,omitempty"`
	// The token the SFU can use to participate in the gossip protocol
	GossipRpcAuthToken string `protobuf:"bytes,4,opt,name=gossip_rpc_auth_token,json=gossipRpcAuthToken,proto3" json:"gossip_rpc_auth_token,omitempty"`
}

func (x *CreateCallRequest) Reset() {
	*x = CreateCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallRequest) ProtoMessage() {}

func (x *CreateCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallRequest.ProtoReflect.Descriptor instead.
func (*CreateCallRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{11}
}

func (x *CreateCallRequest) GetAppPk() int64 {
	if x != nil {
		return x.AppPk
	}
	return 0
}

func (x *CreateCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateCallRequest) GetCascadingSfusHostnames() []string {
	if x != nil {
		return x.CascadingSfusHostnames
	}
	return nil
}

func (x *CreateCallRequest) GetGossipRpcAuthToken() string {
	if x != nil {
		return x.GossipRpcAuthToken
	}
	return ""
}

// A response message for CreateCall endpoint
type CreateCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A model of created call
	Call *models.Call `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
}

func (x *CreateCallResponse) Reset() {
	*x = CreateCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallResponse) ProtoMessage() {}

func (x *CreateCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallResponse.ProtoReflect.Descriptor instead.
func (*CreateCallResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCallResponse) GetCall() *models.Call {
	if x != nil {
		return x.Call
	}
	return nil
}

// A request message for EndCall endpoint
type EndCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App PK
	AppPk int64 `protobuf:"varint,1,opt,name=app_pk,json=appPk,proto3" json:"app_pk,omitempty"`
	// Call ID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// A message to display to disconnected participants
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EndCallRequest) Reset() {
	*x = EndCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndCallRequest) ProtoMessage() {}

func (x *EndCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndCallRequest.ProtoReflect.Descriptor instead.
func (*EndCallRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{13}
}

func (x *EndCallRequest) GetAppPk() int64 {
	if x != nil {
		return x.AppPk
	}
	return 0
}

func (x *EndCallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EndCallRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A response message for EndCall endpoint
type EndCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A model of a call
	Call *models.Call `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"` // TODO: return some call stats?
}

func (x *EndCallResponse) Reset() {
	*x = EndCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndCallResponse) ProtoMessage() {}

func (x *EndCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndCallResponse.ProtoReflect.Descriptor instead.
func (*EndCallResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP(), []int{14}
}

func (x *EndCallResponse) GetCall() *models.Call {
	if x != nil {
		return x.Call
	}
	return nil
}

var File_video_sfu_remote_control_rpc_remote_control_v1_proto protoreflect.FileDescriptor

var file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDesc = []byte{
	0x0a, 0x34, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x70, 0x63, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f,
	0x73, 0x66, 0x75, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x4b, 0x69, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x50, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4b, 0x69, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x01, 0x0a,
	0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x50, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x24, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x50, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x17, 0x4d, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x50, 0x6b, 0x12, 0x48, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x4d, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d,
	0x75, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x50, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x50,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x66, 0x75, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x66,
	0x75, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x67,
	0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x52, 0x70, 0x63, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x47,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x51, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x50, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x0f, 0x45, 0x6e,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x32, 0x84, 0x05, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x50, 0x43, 0x12, 0x6f, 0x0a, 0x08, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4d, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4d, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73,
	0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x14, 0x5a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescOnce sync.Once
	file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescData = file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDesc
)

func file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescGZIP() []byte {
	file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescOnce.Do(func() {
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescData)
	})
	return file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDescData
}

var file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_video_sfu_remote_control_rpc_remote_control_v1_proto_goTypes = []interface{}{
	(*KickUserRequest)(nil),                      // 0: stream.video.sfu.remote_control.KickUserRequest
	(*KickUserResponse)(nil),                     // 1: stream.video.sfu.remote_control.KickUserResponse
	(*UpdateParticipantsMuteStatusRequest)(nil),  // 2: stream.video.sfu.remote_control.UpdateParticipantsMuteStatusRequest
	(*UpdateParticipantsMuteStatusResponse)(nil), // 3: stream.video.sfu.remote_control.UpdateParticipantsMuteStatusResponse
	(*InvalidateTokenRequest)(nil),               // 4: stream.video.sfu.remote_control.InvalidateTokenRequest
	(*InvalidateTokenResponse)(nil),              // 5: stream.video.sfu.remote_control.InvalidateTokenResponse
	(*MuteParticipantsRequest)(nil),              // 6: stream.video.sfu.remote_control.MuteParticipantsRequest
	(*MuteParticipantInput)(nil),                 // 7: stream.video.sfu.remote_control.MuteParticipantInput
	(*MuteParticipantsResponse)(nil),             // 8: stream.video.sfu.remote_control.MuteParticipantsResponse
	(*GetCallRequest)(nil),                       // 9: stream.video.sfu.remote_control.GetCallRequest
	(*GetCallResponse)(nil),                      // 10: stream.video.sfu.remote_control.GetCallResponse
	(*CreateCallRequest)(nil),                    // 11: stream.video.sfu.remote_control.CreateCallRequest
	(*CreateCallResponse)(nil),                   // 12: stream.video.sfu.remote_control.CreateCallResponse
	(*EndCallRequest)(nil),                       // 13: stream.video.sfu.remote_control.EndCallRequest
	(*EndCallResponse)(nil),                      // 14: stream.video.sfu.remote_control.EndCallResponse
	(*timestamppb.Timestamp)(nil),                // 15: google.protobuf.Timestamp
	(models.TrackType)(0),                        // 16: stream.video.sfu.models.TrackType
	(*models.Participant)(nil),                   // 17: stream.video.sfu.models.Participant
	(*models.Call)(nil),                          // 18: stream.video.sfu.models.Call
	(*models.CallState)(nil),                     // 19: stream.video.sfu.models.CallState
}
var file_video_sfu_remote_control_rpc_remote_control_v1_proto_depIdxs = []int32{
	15, // 0: stream.video.sfu.remote_control.KickUserRequest.not_before:type_name -> google.protobuf.Timestamp
	16, // 1: stream.video.sfu.remote_control.UpdateParticipantsMuteStatusRequest.tracks:type_name -> stream.video.sfu.models.TrackType
	15, // 2: stream.video.sfu.remote_control.InvalidateTokenRequest.not_before:type_name -> google.protobuf.Timestamp
	17, // 3: stream.video.sfu.remote_control.MuteParticipantsRequest.participants:type_name -> stream.video.sfu.models.Participant
	18, // 4: stream.video.sfu.remote_control.GetCallResponse.call:type_name -> stream.video.sfu.models.Call
	19, // 5: stream.video.sfu.remote_control.GetCallResponse.state:type_name -> stream.video.sfu.models.CallState
	18, // 6: stream.video.sfu.remote_control.CreateCallResponse.call:type_name -> stream.video.sfu.models.Call
	18, // 7: stream.video.sfu.remote_control.EndCallResponse.call:type_name -> stream.video.sfu.models.Call
	0,  // 8: stream.video.sfu.remote_control.RemoteControlRPC.KickUser:input_type -> stream.video.sfu.remote_control.KickUserRequest
	2,  // 9: stream.video.sfu.remote_control.RemoteControlRPC.UpdateParticipantsMuteStatus:input_type -> stream.video.sfu.remote_control.UpdateParticipantsMuteStatusRequest
	9,  // 10: stream.video.sfu.remote_control.RemoteControlRPC.GetCall:input_type -> stream.video.sfu.remote_control.GetCallRequest
	11, // 11: stream.video.sfu.remote_control.RemoteControlRPC.CreateCall:input_type -> stream.video.sfu.remote_control.CreateCallRequest
	13, // 12: stream.video.sfu.remote_control.RemoteControlRPC.EndCall:input_type -> stream.video.sfu.remote_control.EndCallRequest
	1,  // 13: stream.video.sfu.remote_control.RemoteControlRPC.KickUser:output_type -> stream.video.sfu.remote_control.KickUserResponse
	3,  // 14: stream.video.sfu.remote_control.RemoteControlRPC.UpdateParticipantsMuteStatus:output_type -> stream.video.sfu.remote_control.UpdateParticipantsMuteStatusResponse
	10, // 15: stream.video.sfu.remote_control.RemoteControlRPC.GetCall:output_type -> stream.video.sfu.remote_control.GetCallResponse
	12, // 16: stream.video.sfu.remote_control.RemoteControlRPC.CreateCall:output_type -> stream.video.sfu.remote_control.CreateCallResponse
	14, // 17: stream.video.sfu.remote_control.RemoteControlRPC.EndCall:output_type -> stream.video.sfu.remote_control.EndCallResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_video_sfu_remote_control_rpc_remote_control_v1_proto_init() }
func file_video_sfu_remote_control_rpc_remote_control_v1_proto_init() {
	if File_video_sfu_remote_control_rpc_remote_control_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateParticipantsMuteStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateParticipantsMuteStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteParticipantInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteParticipantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_video_sfu_remote_control_rpc_remote_control_v1_proto_goTypes,
		DependencyIndexes: file_video_sfu_remote_control_rpc_remote_control_v1_proto_depIdxs,
		MessageInfos:      file_video_sfu_remote_control_rpc_remote_control_v1_proto_msgTypes,
	}.Build()
	File_video_sfu_remote_control_rpc_remote_control_v1_proto = out.File
	file_video_sfu_remote_control_rpc_remote_control_v1_proto_rawDesc = nil
	file_video_sfu_remote_control_rpc_remote_control_v1_proto_goTypes = nil
	file_video_sfu_remote_control_rpc_remote_control_v1_proto_depIdxs = nil
}
