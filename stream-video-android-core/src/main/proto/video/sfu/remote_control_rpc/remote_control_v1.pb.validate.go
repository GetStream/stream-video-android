// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/sfu/remote_control_rpc/remote_control_v1.proto

package remote_control_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	sfu_models "github.com/GetStream/video-proto/protobuf/video/sfu/models"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = sfu_models.TrackType(0)
)

// Validate checks the field values on ActionOverride with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionOverride) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionOverride with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionOverrideMultiError,
// or nil if none found.
func (m *ActionOverride) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionOverride) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for Type

	if len(errors) > 0 {
		return ActionOverrideMultiError(errors)
	}

	return nil
}

// ActionOverrideMultiError is an error wrapping multiple validation errors
// returned by ActionOverride.ValidateAll() if the designated constraints
// aren't met.
type ActionOverrideMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionOverrideMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionOverrideMultiError) AllErrors() []error { return m }

// ActionOverrideValidationError is the validation error returned by
// ActionOverride.Validate if the designated constraints aren't met.
type ActionOverrideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionOverrideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionOverrideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionOverrideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionOverrideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionOverrideValidationError) ErrorName() string { return "ActionOverrideValidationError" }

// Error satisfies the builtin error interface
func (e ActionOverrideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionOverride.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionOverrideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionOverrideValidationError{}

// Validate checks the field values on SendUserPermissionOverrideRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendUserPermissionOverrideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserPermissionOverrideRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendUserPermissionOverrideRequestMultiError, or nil if none found.
func (m *SendUserPermissionOverrideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserPermissionOverrideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for Id

	// no validation rules for UserId

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendUserPermissionOverrideRequestValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendUserPermissionOverrideRequestValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendUserPermissionOverrideRequestValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendUserPermissionOverrideRequestMultiError(errors)
	}

	return nil
}

// SendUserPermissionOverrideRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendUserPermissionOverrideRequest.ValidateAll() if the designated
// constraints aren't met.
type SendUserPermissionOverrideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserPermissionOverrideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserPermissionOverrideRequestMultiError) AllErrors() []error { return m }

// SendUserPermissionOverrideRequestValidationError is the validation error
// returned by SendUserPermissionOverrideRequest.Validate if the designated
// constraints aren't met.
type SendUserPermissionOverrideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserPermissionOverrideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserPermissionOverrideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserPermissionOverrideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserPermissionOverrideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserPermissionOverrideRequestValidationError) ErrorName() string {
	return "SendUserPermissionOverrideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserPermissionOverrideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserPermissionOverrideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserPermissionOverrideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserPermissionOverrideRequestValidationError{}

// Validate checks the field values on SendUserPermissionOverrideResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendUserPermissionOverrideResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserPermissionOverrideResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendUserPermissionOverrideResponseMultiError, or nil if none found.
func (m *SendUserPermissionOverrideResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserPermissionOverrideResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendUserPermissionOverrideResponseMultiError(errors)
	}

	return nil
}

// SendUserPermissionOverrideResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendUserPermissionOverrideResponse.ValidateAll() if the designated
// constraints aren't met.
type SendUserPermissionOverrideResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserPermissionOverrideResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserPermissionOverrideResponseMultiError) AllErrors() []error { return m }

// SendUserPermissionOverrideResponseValidationError is the validation error
// returned by SendUserPermissionOverrideResponse.Validate if the designated
// constraints aren't met.
type SendUserPermissionOverrideResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserPermissionOverrideResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserPermissionOverrideResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserPermissionOverrideResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserPermissionOverrideResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserPermissionOverrideResponseValidationError) ErrorName() string {
	return "SendUserPermissionOverrideResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserPermissionOverrideResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserPermissionOverrideResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserPermissionOverrideResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserPermissionOverrideResponseValidationError{}

// Validate checks the field values on UpdateCallPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCallPermissionsRequestMultiError, or nil if none found.
func (m *UpdateCallPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for Id

	{
		sorted_keys := make([]string, len(m.GetPermissionsByRole()))
		i := 0
		for key := range m.GetPermissionsByRole() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPermissionsByRole()[key]
			_ = val

			// no validation rules for PermissionsByRole[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateCallPermissionsRequestValidationError{
							field:  fmt.Sprintf("PermissionsByRole[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateCallPermissionsRequestValidationError{
							field:  fmt.Sprintf("PermissionsByRole[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateCallPermissionsRequestValidationError{
						field:  fmt.Sprintf("PermissionsByRole[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UpdateCallPermissionsRequestMultiError(errors)
	}

	return nil
}

// UpdateCallPermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCallPermissionsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCallPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallPermissionsRequestMultiError) AllErrors() []error { return m }

// UpdateCallPermissionsRequestValidationError is the validation error returned
// by UpdateCallPermissionsRequest.Validate if the designated constraints
// aren't met.
type UpdateCallPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallPermissionsRequestValidationError) ErrorName() string {
	return "UpdateCallPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallPermissionsRequestValidationError{}

// Validate checks the field values on UpdateCallPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCallPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCallPermissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCallPermissionsResponseMultiError, or nil if none found.
func (m *UpdateCallPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCallPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCallPermissionsResponseMultiError(errors)
	}

	return nil
}

// UpdateCallPermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCallPermissionsResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateCallPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCallPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCallPermissionsResponseMultiError) AllErrors() []error { return m }

// UpdateCallPermissionsResponseValidationError is the validation error
// returned by UpdateCallPermissionsResponse.Validate if the designated
// constraints aren't met.
type UpdateCallPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCallPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCallPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCallPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCallPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCallPermissionsResponseValidationError) ErrorName() string {
	return "UpdateCallPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCallPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCallPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCallPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCallPermissionsResponseValidationError{}

// Validate checks the field values on KickUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KickUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickUserRequestMultiError, or nil if none found.
func (m *KickUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *KickUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for UserId

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetNotBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KickUserRequestValidationError{
					field:  "NotBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KickUserRequestValidationError{
					field:  "NotBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KickUserRequestValidationError{
				field:  "NotBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InvalidateTokens

	if len(errors) > 0 {
		return KickUserRequestMultiError(errors)
	}

	return nil
}

// KickUserRequestMultiError is an error wrapping multiple validation errors
// returned by KickUserRequest.ValidateAll() if the designated constraints
// aren't met.
type KickUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickUserRequestMultiError) AllErrors() []error { return m }

// KickUserRequestValidationError is the validation error returned by
// KickUserRequest.Validate if the designated constraints aren't met.
type KickUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickUserRequestValidationError) ErrorName() string { return "KickUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e KickUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickUserRequestValidationError{}

// Validate checks the field values on KickUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KickUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickUserResponseMultiError, or nil if none found.
func (m *KickUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *KickUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KickUserResponseMultiError(errors)
	}

	return nil
}

// KickUserResponseMultiError is an error wrapping multiple validation errors
// returned by KickUserResponse.ValidateAll() if the designated constraints
// aren't met.
type KickUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickUserResponseMultiError) AllErrors() []error { return m }

// KickUserResponseValidationError is the validation error returned by
// KickUserResponse.Validate if the designated constraints aren't met.
type KickUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickUserResponseValidationError) ErrorName() string { return "KickUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e KickUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickUserResponseValidationError{}

// Validate checks the field values on UpdateParticipantsMuteStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateParticipantsMuteStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateParticipantsMuteStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateParticipantsMuteStatusRequestMultiError, or nil if none found.
func (m *UpdateParticipantsMuteStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateParticipantsMuteStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for CallId

	// no validation rules for Message

	// no validation rules for Muted

	// no validation rules for MuteAllUsers

	if len(errors) > 0 {
		return UpdateParticipantsMuteStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateParticipantsMuteStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateParticipantsMuteStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateParticipantsMuteStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateParticipantsMuteStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateParticipantsMuteStatusRequestMultiError) AllErrors() []error { return m }

// UpdateParticipantsMuteStatusRequestValidationError is the validation error
// returned by UpdateParticipantsMuteStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateParticipantsMuteStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateParticipantsMuteStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateParticipantsMuteStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateParticipantsMuteStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateParticipantsMuteStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateParticipantsMuteStatusRequestValidationError) ErrorName() string {
	return "UpdateParticipantsMuteStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateParticipantsMuteStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateParticipantsMuteStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateParticipantsMuteStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateParticipantsMuteStatusRequestValidationError{}

// Validate checks the field values on UpdateParticipantsMuteStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateParticipantsMuteStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateParticipantsMuteStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateParticipantsMuteStatusResponseMultiError, or nil if none found.
func (m *UpdateParticipantsMuteStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateParticipantsMuteStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateParticipantsMuteStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateParticipantsMuteStatusResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateParticipantsMuteStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateParticipantsMuteStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateParticipantsMuteStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateParticipantsMuteStatusResponseMultiError) AllErrors() []error { return m }

// UpdateParticipantsMuteStatusResponseValidationError is the validation error
// returned by UpdateParticipantsMuteStatusResponse.Validate if the designated
// constraints aren't met.
type UpdateParticipantsMuteStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateParticipantsMuteStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateParticipantsMuteStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateParticipantsMuteStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateParticipantsMuteStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateParticipantsMuteStatusResponseValidationError) ErrorName() string {
	return "UpdateParticipantsMuteStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateParticipantsMuteStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateParticipantsMuteStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateParticipantsMuteStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateParticipantsMuteStatusResponseValidationError{}

// Validate checks the field values on InvalidateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenRequestMultiError, or nil if none found.
func (m *InvalidateTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for UserId

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetNotBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvalidateTokenRequestValidationError{
					field:  "NotBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvalidateTokenRequestValidationError{
					field:  "NotBefore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidateTokenRequestValidationError{
				field:  "NotBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InvalidateTokenRequestMultiError(errors)
	}

	return nil
}

// InvalidateTokenRequestMultiError is an error wrapping multiple validation
// errors returned by InvalidateTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type InvalidateTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenRequestMultiError) AllErrors() []error { return m }

// InvalidateTokenRequestValidationError is the validation error returned by
// InvalidateTokenRequest.Validate if the designated constraints aren't met.
type InvalidateTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenRequestValidationError) ErrorName() string {
	return "InvalidateTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenRequestValidationError{}

// Validate checks the field values on InvalidateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateTokenResponseMultiError, or nil if none found.
func (m *InvalidateTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InvalidateTokenResponseMultiError(errors)
	}

	return nil
}

// InvalidateTokenResponseMultiError is an error wrapping multiple validation
// errors returned by InvalidateTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type InvalidateTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateTokenResponseMultiError) AllErrors() []error { return m }

// InvalidateTokenResponseValidationError is the validation error returned by
// InvalidateTokenResponse.Validate if the designated constraints aren't met.
type InvalidateTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateTokenResponseValidationError) ErrorName() string {
	return "InvalidateTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateTokenResponseValidationError{}

// Validate checks the field values on MuteParticipantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteParticipantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteParticipantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteParticipantsRequestMultiError, or nil if none found.
func (m *MuteParticipantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteParticipantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MuteParticipantsRequestValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MuteParticipantsRequestValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MuteParticipantsRequestValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MuteParticipantsRequestMultiError(errors)
	}

	return nil
}

// MuteParticipantsRequestMultiError is an error wrapping multiple validation
// errors returned by MuteParticipantsRequest.ValidateAll() if the designated
// constraints aren't met.
type MuteParticipantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteParticipantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteParticipantsRequestMultiError) AllErrors() []error { return m }

// MuteParticipantsRequestValidationError is the validation error returned by
// MuteParticipantsRequest.Validate if the designated constraints aren't met.
type MuteParticipantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteParticipantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteParticipantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteParticipantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteParticipantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteParticipantsRequestValidationError) ErrorName() string {
	return "MuteParticipantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MuteParticipantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteParticipantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteParticipantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteParticipantsRequestValidationError{}

// Validate checks the field values on MuteParticipantInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteParticipantInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteParticipantInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteParticipantInputMultiError, or nil if none found.
func (m *MuteParticipantInput) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteParticipantInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.SessionId != nil {
		// no validation rules for SessionId
	}

	if m.MuteAudio != nil {
		// no validation rules for MuteAudio
	}

	if m.MuteVideo != nil {
		// no validation rules for MuteVideo
	}

	if len(errors) > 0 {
		return MuteParticipantInputMultiError(errors)
	}

	return nil
}

// MuteParticipantInputMultiError is an error wrapping multiple validation
// errors returned by MuteParticipantInput.ValidateAll() if the designated
// constraints aren't met.
type MuteParticipantInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteParticipantInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteParticipantInputMultiError) AllErrors() []error { return m }

// MuteParticipantInputValidationError is the validation error returned by
// MuteParticipantInput.Validate if the designated constraints aren't met.
type MuteParticipantInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteParticipantInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteParticipantInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteParticipantInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteParticipantInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteParticipantInputValidationError) ErrorName() string {
	return "MuteParticipantInputValidationError"
}

// Error satisfies the builtin error interface
func (e MuteParticipantInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteParticipantInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteParticipantInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteParticipantInputValidationError{}

// Validate checks the field values on MuteParticipantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteParticipantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteParticipantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteParticipantsResponseMultiError, or nil if none found.
func (m *MuteParticipantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteParticipantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MuteParticipantsResponseMultiError(errors)
	}

	return nil
}

// MuteParticipantsResponseMultiError is an error wrapping multiple validation
// errors returned by MuteParticipantsResponse.ValidateAll() if the designated
// constraints aren't met.
type MuteParticipantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteParticipantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteParticipantsResponseMultiError) AllErrors() []error { return m }

// MuteParticipantsResponseValidationError is the validation error returned by
// MuteParticipantsResponse.Validate if the designated constraints aren't met.
type MuteParticipantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteParticipantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteParticipantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteParticipantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteParticipantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteParticipantsResponseValidationError) ErrorName() string {
	return "MuteParticipantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MuteParticipantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteParticipantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteParticipantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteParticipantsResponseValidationError{}

// Validate checks the field values on GetCallRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCallRequestMultiError,
// or nil if none found.
func (m *GetCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for Id

	// no validation rules for WithState

	if len(errors) > 0 {
		return GetCallRequestMultiError(errors)
	}

	return nil
}

// GetCallRequestMultiError is an error wrapping multiple validation errors
// returned by GetCallRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallRequestMultiError) AllErrors() []error { return m }

// GetCallRequestValidationError is the validation error returned by
// GetCallRequest.Validate if the designated constraints aren't met.
type GetCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallRequestValidationError) ErrorName() string { return "GetCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallRequestValidationError{}

// Validate checks the field values on GetCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCallResponseMultiError, or nil if none found.
func (m *GetCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCallResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCallResponseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCallResponseMultiError(errors)
	}

	return nil
}

// GetCallResponseMultiError is an error wrapping multiple validation errors
// returned by GetCallResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCallResponseMultiError) AllErrors() []error { return m }

// GetCallResponseValidationError is the validation error returned by
// GetCallResponse.Validate if the designated constraints aren't met.
type GetCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCallResponseValidationError) ErrorName() string { return "GetCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCallResponseValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for Owner

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on Permissions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permissions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionsMultiError, or
// nil if none found.
func (m *Permissions) ValidateAll() error {
	return m.validate(true)
}

func (m *Permissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermissionsValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermissionsValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionsValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PermissionsMultiError(errors)
	}

	return nil
}

// PermissionsMultiError is an error wrapping multiple validation errors
// returned by Permissions.ValidateAll() if the designated constraints aren't met.
type PermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionsMultiError) AllErrors() []error { return m }

// PermissionsValidationError is the validation error returned by
// Permissions.Validate if the designated constraints aren't met.
type PermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionsValidationError) ErrorName() string { return "PermissionsValidationError" }

// Error satisfies the builtin error interface
func (e PermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionsValidationError{}

// Validate checks the field values on CreateCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallRequestMultiError, or nil if none found.
func (m *CreateCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for Id

	// no validation rules for GossipRpcAuthToken

	{
		sorted_keys := make([]string, len(m.GetPermissionsByRole()))
		i := 0
		for key := range m.GetPermissionsByRole() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPermissionsByRole()[key]
			_ = val

			// no validation rules for PermissionsByRole[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateCallRequestValidationError{
							field:  fmt.Sprintf("PermissionsByRole[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateCallRequestValidationError{
							field:  fmt.Sprintf("PermissionsByRole[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateCallRequestValidationError{
						field:  fmt.Sprintf("PermissionsByRole[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for ShardId

	if len(errors) > 0 {
		return CreateCallRequestMultiError(errors)
	}

	return nil
}

// CreateCallRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCallRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallRequestMultiError) AllErrors() []error { return m }

// CreateCallRequestValidationError is the validation error returned by
// CreateCallRequest.Validate if the designated constraints aren't met.
type CreateCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallRequestValidationError) ErrorName() string {
	return "CreateCallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallRequestValidationError{}

// Validate checks the field values on CreateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCallResponseMultiError, or nil if none found.
func (m *CreateCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCallResponseMultiError(errors)
	}

	return nil
}

// CreateCallResponseMultiError is an error wrapping multiple validation errors
// returned by CreateCallResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCallResponseMultiError) AllErrors() []error { return m }

// CreateCallResponseValidationError is the validation error returned by
// CreateCallResponse.Validate if the designated constraints aren't met.
type CreateCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCallResponseValidationError) ErrorName() string {
	return "CreateCallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCallResponseValidationError{}

// Validate checks the field values on EndCallRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndCallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndCallRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndCallRequestMultiError,
// or nil if none found.
func (m *EndCallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EndCallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPk

	// no validation rules for Id

	// no validation rules for Message

	if len(errors) > 0 {
		return EndCallRequestMultiError(errors)
	}

	return nil
}

// EndCallRequestMultiError is an error wrapping multiple validation errors
// returned by EndCallRequest.ValidateAll() if the designated constraints
// aren't met.
type EndCallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndCallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndCallRequestMultiError) AllErrors() []error { return m }

// EndCallRequestValidationError is the validation error returned by
// EndCallRequest.Validate if the designated constraints aren't met.
type EndCallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndCallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndCallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndCallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndCallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndCallRequestValidationError) ErrorName() string { return "EndCallRequestValidationError" }

// Error satisfies the builtin error interface
func (e EndCallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndCallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndCallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndCallRequestValidationError{}

// Validate checks the field values on EndCallResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EndCallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndCallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndCallResponseMultiError, or nil if none found.
func (m *EndCallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EndCallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndCallResponseValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndCallResponseValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EndCallResponseMultiError(errors)
	}

	return nil
}

// EndCallResponseMultiError is an error wrapping multiple validation errors
// returned by EndCallResponse.ValidateAll() if the designated constraints
// aren't met.
type EndCallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndCallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndCallResponseMultiError) AllErrors() []error { return m }

// EndCallResponseValidationError is the validation error returned by
// EndCallResponse.Validate if the designated constraints aren't met.
type EndCallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndCallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndCallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndCallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndCallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndCallResponseValidationError) ErrorName() string { return "EndCallResponseValidationError" }

// Error satisfies the builtin error interface
func (e EndCallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndCallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndCallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndCallResponseValidationError{}
