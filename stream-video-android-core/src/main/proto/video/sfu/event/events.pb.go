// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: video/sfu/event/events.proto

package event

import (
	models "github.com/GetStream/protocol/protobuf/video/sfu/models"
	signal_rpc "github.com/GetStream/protocol/protobuf/video/sfu/signal_rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoLayerSetting_Priority int32

const (
	VideoLayerSetting_PRIORITY_HIGH_UNSPECIFIED VideoLayerSetting_Priority = 0
	VideoLayerSetting_PRIORITY_LOW              VideoLayerSetting_Priority = 1
	VideoLayerSetting_PRIORITY_MEDIUM           VideoLayerSetting_Priority = 2
	VideoLayerSetting_PRIORITY_VERY_LOW         VideoLayerSetting_Priority = 3
)

// Enum value maps for VideoLayerSetting_Priority.
var (
	VideoLayerSetting_Priority_name = map[int32]string{
		0: "PRIORITY_HIGH_UNSPECIFIED",
		1: "PRIORITY_LOW",
		2: "PRIORITY_MEDIUM",
		3: "PRIORITY_VERY_LOW",
	}
	VideoLayerSetting_Priority_value = map[string]int32{
		"PRIORITY_HIGH_UNSPECIFIED": 0,
		"PRIORITY_LOW":              1,
		"PRIORITY_MEDIUM":           2,
		"PRIORITY_VERY_LOW":         3,
	}
)

func (x VideoLayerSetting_Priority) Enum() *VideoLayerSetting_Priority {
	p := new(VideoLayerSetting_Priority)
	*p = x
	return p
}

func (x VideoLayerSetting_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoLayerSetting_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_event_events_proto_enumTypes[0].Descriptor()
}

func (VideoLayerSetting_Priority) Type() protoreflect.EnumType {
	return &file_video_sfu_event_events_proto_enumTypes[0]
}

func (x VideoLayerSetting_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoLayerSetting_Priority.Descriptor instead.
func (VideoLayerSetting_Priority) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{26, 0}
}

// SFUEvent is a message that is sent from the SFU to the client.
type SfuEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventPayload:
	//
	//	*SfuEvent_SubscriberOffer
	//	*SfuEvent_PublisherAnswer
	//	*SfuEvent_ConnectionQualityChanged
	//	*SfuEvent_AudioLevelChanged
	//	*SfuEvent_IceTrickle
	//	*SfuEvent_ChangePublishQuality
	//	*SfuEvent_ParticipantJoined
	//	*SfuEvent_ParticipantLeft
	//	*SfuEvent_DominantSpeakerChanged
	//	*SfuEvent_JoinResponse
	//	*SfuEvent_HealthCheckResponse
	//	*SfuEvent_TrackPublished
	//	*SfuEvent_TrackUnpublished
	//	*SfuEvent_Error
	//	*SfuEvent_CallGrantsUpdated
	//	*SfuEvent_GoAway
	//	*SfuEvent_IceRestart
	//	*SfuEvent_PinsUpdated
	//	*SfuEvent_CallEnded
	//	*SfuEvent_ParticipantUpdated
	EventPayload isSfuEvent_EventPayload `protobuf_oneof:"event_payload"`
}

func (x *SfuEvent) Reset() {
	*x = SfuEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfuEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfuEvent) ProtoMessage() {}

func (x *SfuEvent) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfuEvent.ProtoReflect.Descriptor instead.
func (*SfuEvent) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{0}
}

func (m *SfuEvent) GetEventPayload() isSfuEvent_EventPayload {
	if m != nil {
		return m.EventPayload
	}
	return nil
}

func (x *SfuEvent) GetSubscriberOffer() *SubscriberOffer {
	if x, ok := x.GetEventPayload().(*SfuEvent_SubscriberOffer); ok {
		return x.SubscriberOffer
	}
	return nil
}

func (x *SfuEvent) GetPublisherAnswer() *PublisherAnswer {
	if x, ok := x.GetEventPayload().(*SfuEvent_PublisherAnswer); ok {
		return x.PublisherAnswer
	}
	return nil
}

func (x *SfuEvent) GetConnectionQualityChanged() *ConnectionQualityChanged {
	if x, ok := x.GetEventPayload().(*SfuEvent_ConnectionQualityChanged); ok {
		return x.ConnectionQualityChanged
	}
	return nil
}

func (x *SfuEvent) GetAudioLevelChanged() *AudioLevelChanged {
	if x, ok := x.GetEventPayload().(*SfuEvent_AudioLevelChanged); ok {
		return x.AudioLevelChanged
	}
	return nil
}

func (x *SfuEvent) GetIceTrickle() *models.ICETrickle {
	if x, ok := x.GetEventPayload().(*SfuEvent_IceTrickle); ok {
		return x.IceTrickle
	}
	return nil
}

func (x *SfuEvent) GetChangePublishQuality() *ChangePublishQuality {
	if x, ok := x.GetEventPayload().(*SfuEvent_ChangePublishQuality); ok {
		return x.ChangePublishQuality
	}
	return nil
}

func (x *SfuEvent) GetParticipantJoined() *ParticipantJoined {
	if x, ok := x.GetEventPayload().(*SfuEvent_ParticipantJoined); ok {
		return x.ParticipantJoined
	}
	return nil
}

func (x *SfuEvent) GetParticipantLeft() *ParticipantLeft {
	if x, ok := x.GetEventPayload().(*SfuEvent_ParticipantLeft); ok {
		return x.ParticipantLeft
	}
	return nil
}

func (x *SfuEvent) GetDominantSpeakerChanged() *DominantSpeakerChanged {
	if x, ok := x.GetEventPayload().(*SfuEvent_DominantSpeakerChanged); ok {
		return x.DominantSpeakerChanged
	}
	return nil
}

func (x *SfuEvent) GetJoinResponse() *JoinResponse {
	if x, ok := x.GetEventPayload().(*SfuEvent_JoinResponse); ok {
		return x.JoinResponse
	}
	return nil
}

func (x *SfuEvent) GetHealthCheckResponse() *HealthCheckResponse {
	if x, ok := x.GetEventPayload().(*SfuEvent_HealthCheckResponse); ok {
		return x.HealthCheckResponse
	}
	return nil
}

func (x *SfuEvent) GetTrackPublished() *TrackPublished {
	if x, ok := x.GetEventPayload().(*SfuEvent_TrackPublished); ok {
		return x.TrackPublished
	}
	return nil
}

func (x *SfuEvent) GetTrackUnpublished() *TrackUnpublished {
	if x, ok := x.GetEventPayload().(*SfuEvent_TrackUnpublished); ok {
		return x.TrackUnpublished
	}
	return nil
}

func (x *SfuEvent) GetError() *Error {
	if x, ok := x.GetEventPayload().(*SfuEvent_Error); ok {
		return x.Error
	}
	return nil
}

func (x *SfuEvent) GetCallGrantsUpdated() *CallGrantsUpdated {
	if x, ok := x.GetEventPayload().(*SfuEvent_CallGrantsUpdated); ok {
		return x.CallGrantsUpdated
	}
	return nil
}

func (x *SfuEvent) GetGoAway() *GoAway {
	if x, ok := x.GetEventPayload().(*SfuEvent_GoAway); ok {
		return x.GoAway
	}
	return nil
}

func (x *SfuEvent) GetIceRestart() *ICERestart {
	if x, ok := x.GetEventPayload().(*SfuEvent_IceRestart); ok {
		return x.IceRestart
	}
	return nil
}

func (x *SfuEvent) GetPinsUpdated() *PinsChanged {
	if x, ok := x.GetEventPayload().(*SfuEvent_PinsUpdated); ok {
		return x.PinsUpdated
	}
	return nil
}

func (x *SfuEvent) GetCallEnded() *CallEnded {
	if x, ok := x.GetEventPayload().(*SfuEvent_CallEnded); ok {
		return x.CallEnded
	}
	return nil
}

func (x *SfuEvent) GetParticipantUpdated() *ParticipantUpdated {
	if x, ok := x.GetEventPayload().(*SfuEvent_ParticipantUpdated); ok {
		return x.ParticipantUpdated
	}
	return nil
}

type isSfuEvent_EventPayload interface {
	isSfuEvent_EventPayload()
}

type SfuEvent_SubscriberOffer struct {
	// SubscriberOffer sends the SDP offer for establishing the
	// subscriber PeerConnection.
	SubscriberOffer *SubscriberOffer `protobuf:"bytes,1,opt,name=subscriber_offer,json=subscriberOffer,proto3,oneof"`
}

type SfuEvent_PublisherAnswer struct {
	// PublisherAnswer sends the SDP answer to the offer sent by
	// the client for establishing the Publisher PeerConnection.
	PublisherAnswer *PublisherAnswer `protobuf:"bytes,2,opt,name=publisher_answer,json=publisherAnswer,proto3,oneof"`
}

type SfuEvent_ConnectionQualityChanged struct {
	// ConnectionQualityChanged is sent to inform the connection
	// quality of the participants in the call. It does not have
	// to contain the full list of call participants in it.
	ConnectionQualityChanged *ConnectionQualityChanged `protobuf:"bytes,3,opt,name=connection_quality_changed,json=connectionQualityChanged,proto3,oneof"`
}

type SfuEvent_AudioLevelChanged struct {
	// AudioLevelChanged is sent for change in audio levels of
	// the participants.
	AudioLevelChanged *AudioLevelChanged `protobuf:"bytes,4,opt,name=audio_level_changed,json=audioLevelChanged,proto3,oneof"`
}

type SfuEvent_IceTrickle struct {
	// ICETrickle contains the ICE candidate required to establish
	// the ICE transport: part of establishing the PeerConnection
	// and also for ICE restarts.
	IceTrickle *models.ICETrickle `protobuf:"bytes,5,opt,name=ice_trickle,json=iceTrickle,proto3,oneof"`
}

type SfuEvent_ChangePublishQuality struct {
	// ChangePublishQuality advises the publisher to switch on/off
	// various qualities of their video stream based on the subscription.
	// This is done to save the bandwidth and the CPU of the publisher.
	ChangePublishQuality *ChangePublishQuality `protobuf:"bytes,6,opt,name=change_publish_quality,json=changePublishQuality,proto3,oneof"`
}

type SfuEvent_ParticipantJoined struct {
	// ParticipantJoined notifies the client that a new participant
	// has joined the call. This is not sent for anonymous users.
	ParticipantJoined *ParticipantJoined `protobuf:"bytes,10,opt,name=participant_joined,json=participantJoined,proto3,oneof"`
}

type SfuEvent_ParticipantLeft struct {
	// ParticipantLeft notifies the client that a call participant
	// has left the call. This is not sent for anonymous users.
	ParticipantLeft *ParticipantLeft `protobuf:"bytes,11,opt,name=participant_left,json=participantLeft,proto3,oneof"`
}

type SfuEvent_DominantSpeakerChanged struct {
	// DominantSpeakerChanged notifies the client about the current
	// dominant speaker. This is required for certain use cases like
	// the spotlight view.
	DominantSpeakerChanged *DominantSpeakerChanged `protobuf:"bytes,12,opt,name=dominant_speaker_changed,json=dominantSpeakerChanged,proto3,oneof"`
}

type SfuEvent_JoinResponse struct {
	// JoinResponse acknowledges a participant successfully joining
	// the call. This is sent in response to the JoinRequest.
	JoinResponse *JoinResponse `protobuf:"bytes,13,opt,name=join_response,json=joinResponse,proto3,oneof"`
}

type SfuEvent_HealthCheckResponse struct {
	// HealthCheckResponse is sent in response to the HealthCheckRequest.
	// It contains the participant count in the call.
	HealthCheckResponse *HealthCheckResponse `protobuf:"bytes,14,opt,name=health_check_response,json=healthCheckResponse,proto3,oneof"`
}

type SfuEvent_TrackPublished struct {
	// TrackPublished is sent when a new track (like audio, video, screenshare)
	// is published by a participant in the call. It is also sent on mute/unmute.
	TrackPublished *TrackPublished `protobuf:"bytes,16,opt,name=track_published,json=trackPublished,proto3,oneof"`
}

type SfuEvent_TrackUnpublished struct {
	// TrackUnpublished is sent when a track (like audio, video, screenshare)
	// is no longer published. It is sent on muting a track or when the participant
	// is leaving the call.
	TrackUnpublished *TrackUnpublished `protobuf:"bytes,17,opt,name=track_unpublished,json=trackUnpublished,proto3,oneof"`
}

type SfuEvent_Error struct {
	// Error is used to communicate any error related to the participant. The
	// error code and the message explain what went wrong. Whether the participant
	// can retry is also indicated.
	Error *Error `protobuf:"bytes,18,opt,name=error,proto3,oneof"`
}

type SfuEvent_CallGrantsUpdated struct {
	// CallGrantsUpdated tells what tracks a participant is allowed to publish.
	CallGrantsUpdated *CallGrantsUpdated `protobuf:"bytes,19,opt,name=call_grants_updated,json=callGrantsUpdated,proto3,oneof"`
}

type SfuEvent_GoAway struct {
	// GoAway tells the client to migrate away from the SFU it is connected to.
	// The reason field indicates why this message was sent.
	GoAway *GoAway `protobuf:"bytes,20,opt,name=go_away,json=goAway,proto3,oneof"`
}

type SfuEvent_IceRestart struct {
	// ICERestart tells the client to perform ICE restart.
	IceRestart *ICERestart `protobuf:"bytes,21,opt,name=ice_restart,json=iceRestart,proto3,oneof"`
}

type SfuEvent_PinsUpdated struct {
	// PinsChanged is sent the list of pins in the call changes. This event contains the entire list of pins.
	PinsUpdated *PinsChanged `protobuf:"bytes,22,opt,name=pins_updated,json=pinsUpdated,proto3,oneof"`
}

type SfuEvent_CallEnded struct {
	// CallEnded is sent by the SFU to the client to signal that the call has ended.
	// The reason may specify why the call has ended.
	CallEnded *CallEnded `protobuf:"bytes,23,opt,name=call_ended,json=callEnded,proto3,oneof"`
}

type SfuEvent_ParticipantUpdated struct {
	// ParticipantUpdated is sent when user data is updated
	ParticipantUpdated *ParticipantUpdated `protobuf:"bytes,24,opt,name=participant_updated,json=participantUpdated,proto3,oneof"`
}

func (*SfuEvent_SubscriberOffer) isSfuEvent_EventPayload() {}

func (*SfuEvent_PublisherAnswer) isSfuEvent_EventPayload() {}

func (*SfuEvent_ConnectionQualityChanged) isSfuEvent_EventPayload() {}

func (*SfuEvent_AudioLevelChanged) isSfuEvent_EventPayload() {}

func (*SfuEvent_IceTrickle) isSfuEvent_EventPayload() {}

func (*SfuEvent_ChangePublishQuality) isSfuEvent_EventPayload() {}

func (*SfuEvent_ParticipantJoined) isSfuEvent_EventPayload() {}

func (*SfuEvent_ParticipantLeft) isSfuEvent_EventPayload() {}

func (*SfuEvent_DominantSpeakerChanged) isSfuEvent_EventPayload() {}

func (*SfuEvent_JoinResponse) isSfuEvent_EventPayload() {}

func (*SfuEvent_HealthCheckResponse) isSfuEvent_EventPayload() {}

func (*SfuEvent_TrackPublished) isSfuEvent_EventPayload() {}

func (*SfuEvent_TrackUnpublished) isSfuEvent_EventPayload() {}

func (*SfuEvent_Error) isSfuEvent_EventPayload() {}

func (*SfuEvent_CallGrantsUpdated) isSfuEvent_EventPayload() {}

func (*SfuEvent_GoAway) isSfuEvent_EventPayload() {}

func (*SfuEvent_IceRestart) isSfuEvent_EventPayload() {}

func (*SfuEvent_PinsUpdated) isSfuEvent_EventPayload() {}

func (*SfuEvent_CallEnded) isSfuEvent_EventPayload() {}

func (*SfuEvent_ParticipantUpdated) isSfuEvent_EventPayload() {}

type PinsChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the list of pins in the call.
	// Pins are ordered in descending order (most important first).
	Pins []*models.Pin `protobuf:"bytes,1,rep,name=pins,proto3" json:"pins,omitempty"`
}

func (x *PinsChanged) Reset() {
	*x = PinsChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinsChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinsChanged) ProtoMessage() {}

func (x *PinsChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinsChanged.ProtoReflect.Descriptor instead.
func (*PinsChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{1}
}

func (x *PinsChanged) GetPins() []*models.Pin {
	if x != nil {
		return x.Pins
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *models.Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// returns the reconnect strategy to be used by the client
	ReconnectStrategy models.WebsocketReconnectStrategy `protobuf:"varint,5,opt,name=reconnect_strategy,json=reconnectStrategy,proto3,enum=stream.video.sfu.models.WebsocketReconnectStrategy" json:"reconnect_strategy,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetError() *models.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Error) GetReconnectStrategy() models.WebsocketReconnectStrategy {
	if x != nil {
		return x.ReconnectStrategy
	}
	return models.WebsocketReconnectStrategy(0)
}

type ICETrickle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerType     models.PeerType `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=stream.video.sfu.models.PeerType" json:"peer_type,omitempty"`
	IceCandidate string          `protobuf:"bytes,2,opt,name=ice_candidate,json=iceCandidate,proto3" json:"ice_candidate,omitempty"`
}

func (x *ICETrickle) Reset() {
	*x = ICETrickle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICETrickle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICETrickle) ProtoMessage() {}

func (x *ICETrickle) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICETrickle.ProtoReflect.Descriptor instead.
func (*ICETrickle) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{3}
}

func (x *ICETrickle) GetPeerType() models.PeerType {
	if x != nil {
		return x.PeerType
	}
	return models.PeerType(0)
}

func (x *ICETrickle) GetIceCandidate() string {
	if x != nil {
		return x.IceCandidate
	}
	return ""
}

type ICERestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerType models.PeerType `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=stream.video.sfu.models.PeerType" json:"peer_type,omitempty"`
}

func (x *ICERestart) Reset() {
	*x = ICERestart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICERestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICERestart) ProtoMessage() {}

func (x *ICERestart) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICERestart.ProtoReflect.Descriptor instead.
func (*ICERestart) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{4}
}

func (x *ICERestart) GetPeerType() models.PeerType {
	if x != nil {
		return x.PeerType
	}
	return models.PeerType(0)
}

// SfuRequest is a message that is sent from the client to the SFU.
type SfuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestPayload:
	//
	//	*SfuRequest_JoinRequest
	//	*SfuRequest_HealthCheckRequest
	RequestPayload isSfuRequest_RequestPayload `protobuf_oneof:"request_payload"`
}

func (x *SfuRequest) Reset() {
	*x = SfuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfuRequest) ProtoMessage() {}

func (x *SfuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfuRequest.ProtoReflect.Descriptor instead.
func (*SfuRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{5}
}

func (m *SfuRequest) GetRequestPayload() isSfuRequest_RequestPayload {
	if m != nil {
		return m.RequestPayload
	}
	return nil
}

func (x *SfuRequest) GetJoinRequest() *JoinRequest {
	if x, ok := x.GetRequestPayload().(*SfuRequest_JoinRequest); ok {
		return x.JoinRequest
	}
	return nil
}

func (x *SfuRequest) GetHealthCheckRequest() *HealthCheckRequest {
	if x, ok := x.GetRequestPayload().(*SfuRequest_HealthCheckRequest); ok {
		return x.HealthCheckRequest
	}
	return nil
}

type isSfuRequest_RequestPayload interface {
	isSfuRequest_RequestPayload()
}

type SfuRequest_JoinRequest struct {
	JoinRequest *JoinRequest `protobuf:"bytes,1,opt,name=join_request,json=joinRequest,proto3,oneof"`
}

type SfuRequest_HealthCheckRequest struct {
	HealthCheckRequest *HealthCheckRequest `protobuf:"bytes,2,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof"`
}

func (*SfuRequest_JoinRequest) isSfuRequest_RequestPayload() {}

func (*SfuRequest_HealthCheckRequest) isSfuRequest_RequestPayload() {}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{6}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantCount *models.ParticipantCount `protobuf:"bytes,1,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{7}
}

func (x *HealthCheckResponse) GetParticipantCount() *models.ParticipantCount {
	if x != nil {
		return x.ParticipantCount
	}
	return nil
}

type TrackPublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string           `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type      models.TrackType `protobuf:"varint,3,opt,name=type,proto3,enum=stream.video.sfu.models.TrackType" json:"type,omitempty"`
	// Participant information here is included as an optimisation
	// for large calls where broadcasting on every participant join
	// is expensive. You should **NOT** assume that this will always
	// be available though you can use it to update the participant
	// list when it is there.
	Participant *models.Participant `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *TrackPublished) Reset() {
	*x = TrackPublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPublished) ProtoMessage() {}

func (x *TrackPublished) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPublished.ProtoReflect.Descriptor instead.
func (*TrackPublished) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{8}
}

func (x *TrackPublished) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackPublished) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackPublished) GetType() models.TrackType {
	if x != nil {
		return x.Type
	}
	return models.TrackType(0)
}

func (x *TrackPublished) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type TrackUnpublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string                      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string                      `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type      models.TrackType            `protobuf:"varint,3,opt,name=type,proto3,enum=stream.video.sfu.models.TrackType" json:"type,omitempty"`
	Cause     models.TrackUnpublishReason `protobuf:"varint,4,opt,name=cause,proto3,enum=stream.video.sfu.models.TrackUnpublishReason" json:"cause,omitempty"`
	// Participant information here is included as an optimisation
	// for large calls where broadcasting on every participant join
	// is expensive. You should **NOT** assume that this will always
	// be available though you can use it to update the participant
	// list when it is there.
	Participant *models.Participant `protobuf:"bytes,5,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *TrackUnpublished) Reset() {
	*x = TrackUnpublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackUnpublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUnpublished) ProtoMessage() {}

func (x *TrackUnpublished) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUnpublished.ProtoReflect.Descriptor instead.
func (*TrackUnpublished) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{9}
}

func (x *TrackUnpublished) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackUnpublished) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackUnpublished) GetType() models.TrackType {
	if x != nil {
		return x.Type
	}
	return models.TrackType(0)
}

func (x *TrackUnpublished) GetCause() models.TrackUnpublishReason {
	if x != nil {
		return x.Cause
	}
	return models.TrackUnpublishReason(0)
}

func (x *TrackUnpublished) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// dumb SDP that allow us to extract subscriber's decode codecs
	SubscriberSdp string                `protobuf:"bytes,3,opt,name=subscriber_sdp,json=subscriberSdp,proto3" json:"subscriber_sdp,omitempty"`
	ClientDetails *models.ClientDetails `protobuf:"bytes,4,opt,name=client_details,json=clientDetails,proto3" json:"client_details,omitempty"`
	// TODO: we should know if this is going to be
	// - publishing and subscribing, or just subscribing for future routing
	Migration *Migration `protobuf:"bytes,5,opt,name=migration,proto3" json:"migration,omitempty"`
	// Fast reconnect flag explicitly indicates that if the participant session
	// and the associated state is still present in the SFU, the client is ready
	// to restore the PeerConnection with an ICE restart. If the SFU replies with
	// "reconnected: true" in its JoinResponse, then it is safe to perform an ICE
	// restart or else the existing PeerConnections must be cleaned up.
	//
	// For the SFU, fast_reconnect:false indicates that even if it has the state
	// cached, the client state is not in sync and hence it must be cleaned up before
	// proceeding further.
	FastReconnect bool `protobuf:"varint,6,opt,name=fast_reconnect,json=fastReconnect,proto3" json:"fast_reconnect,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{10}
}

func (x *JoinRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JoinRequest) GetSubscriberSdp() string {
	if x != nil {
		return x.SubscriberSdp
	}
	return ""
}

func (x *JoinRequest) GetClientDetails() *models.ClientDetails {
	if x != nil {
		return x.ClientDetails
	}
	return nil
}

func (x *JoinRequest) GetMigration() *Migration {
	if x != nil {
		return x.Migration
	}
	return nil
}

func (x *JoinRequest) GetFastReconnect() bool {
	if x != nil {
		return x.FastReconnect
	}
	return false
}

type Migration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromSfuId       string                                 `protobuf:"bytes,1,opt,name=from_sfu_id,json=fromSfuId,proto3" json:"from_sfu_id,omitempty"`
	AnnouncedTracks []*models.TrackInfo                    `protobuf:"bytes,2,rep,name=announced_tracks,json=announcedTracks,proto3" json:"announced_tracks,omitempty"`
	Subscriptions   []*signal_rpc.TrackSubscriptionDetails `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *Migration) Reset() {
	*x = Migration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Migration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Migration) ProtoMessage() {}

func (x *Migration) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Migration.ProtoReflect.Descriptor instead.
func (*Migration) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{11}
}

func (x *Migration) GetFromSfuId() string {
	if x != nil {
		return x.FromSfuId
	}
	return ""
}

func (x *Migration) GetAnnouncedTracks() []*models.TrackInfo {
	if x != nil {
		return x.AnnouncedTracks
	}
	return nil
}

func (x *Migration) GetSubscriptions() []*signal_rpc.TrackSubscriptionDetails {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type JoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallState   *models.CallState `protobuf:"bytes,1,opt,name=call_state,json=callState,proto3" json:"call_state,omitempty"`
	Reconnected bool              `protobuf:"varint,2,opt,name=reconnected,proto3" json:"reconnected,omitempty"`
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{12}
}

func (x *JoinResponse) GetCallState() *models.CallState {
	if x != nil {
		return x.CallState
	}
	return nil
}

func (x *JoinResponse) GetReconnected() bool {
	if x != nil {
		return x.Reconnected
	}
	return false
}

// ParticipantJoined is fired when a user joins a call
type ParticipantJoined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallCid     string              `protobuf:"bytes,1,opt,name=call_cid,json=callCid,proto3" json:"call_cid,omitempty"`
	Participant *models.Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantJoined) Reset() {
	*x = ParticipantJoined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantJoined) ProtoMessage() {}

func (x *ParticipantJoined) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantJoined.ProtoReflect.Descriptor instead.
func (*ParticipantJoined) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{13}
}

func (x *ParticipantJoined) GetCallCid() string {
	if x != nil {
		return x.CallCid
	}
	return ""
}

func (x *ParticipantJoined) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// ParticipantJoined is fired when a user leaves a call
type ParticipantLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallCid     string              `protobuf:"bytes,1,opt,name=call_cid,json=callCid,proto3" json:"call_cid,omitempty"`
	Participant *models.Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantLeft) Reset() {
	*x = ParticipantLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantLeft) ProtoMessage() {}

func (x *ParticipantLeft) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantLeft.ProtoReflect.Descriptor instead.
func (*ParticipantLeft) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{14}
}

func (x *ParticipantLeft) GetCallCid() string {
	if x != nil {
		return x.CallCid
	}
	return ""
}

func (x *ParticipantLeft) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// ParticipantUpdated is fired when user data is updated
type ParticipantUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallCid     string              `protobuf:"bytes,1,opt,name=call_cid,json=callCid,proto3" json:"call_cid,omitempty"`
	Participant *models.Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantUpdated) Reset() {
	*x = ParticipantUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantUpdated) ProtoMessage() {}

func (x *ParticipantUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantUpdated.ProtoReflect.Descriptor instead.
func (*ParticipantUpdated) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{15}
}

func (x *ParticipantUpdated) GetCallCid() string {
	if x != nil {
		return x.CallCid
	}
	return ""
}

func (x *ParticipantUpdated) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// SubscriberOffer is sent when the SFU adds tracks to a subscription
type SubscriberOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IceRestart bool   `protobuf:"varint,1,opt,name=ice_restart,json=iceRestart,proto3" json:"ice_restart,omitempty"`
	Sdp        string `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *SubscriberOffer) Reset() {
	*x = SubscriberOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberOffer) ProtoMessage() {}

func (x *SubscriberOffer) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberOffer.ProtoReflect.Descriptor instead.
func (*SubscriberOffer) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{16}
}

func (x *SubscriberOffer) GetIceRestart() bool {
	if x != nil {
		return x.IceRestart
	}
	return false
}

func (x *SubscriberOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type PublisherAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *PublisherAnswer) Reset() {
	*x = PublisherAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherAnswer) ProtoMessage() {}

func (x *PublisherAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherAnswer.ProtoReflect.Descriptor instead.
func (*PublisherAnswer) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{17}
}

func (x *PublisherAnswer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// ConnectionQuality is sent to inform about connection quality changes
// eg. thierry's connection is not good -> render a red icon Zoom style
type ConnectionQualityChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionQualityUpdates []*ConnectionQualityInfo `protobuf:"bytes,1,rep,name=connection_quality_updates,json=connectionQualityUpdates,proto3" json:"connection_quality_updates,omitempty"`
}

func (x *ConnectionQualityChanged) Reset() {
	*x = ConnectionQualityChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionQualityChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionQualityChanged) ProtoMessage() {}

func (x *ConnectionQualityChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionQualityChanged.ProtoReflect.Descriptor instead.
func (*ConnectionQualityChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{18}
}

func (x *ConnectionQualityChanged) GetConnectionQualityUpdates() []*ConnectionQualityInfo {
	if x != nil {
		return x.ConnectionQualityUpdates
	}
	return nil
}

type ConnectionQualityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string                   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId         string                   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ConnectionQuality models.ConnectionQuality `protobuf:"varint,3,opt,name=connection_quality,json=connectionQuality,proto3,enum=stream.video.sfu.models.ConnectionQuality" json:"connection_quality,omitempty"`
}

func (x *ConnectionQualityInfo) Reset() {
	*x = ConnectionQualityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionQualityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionQualityInfo) ProtoMessage() {}

func (x *ConnectionQualityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionQualityInfo.ProtoReflect.Descriptor instead.
func (*ConnectionQualityInfo) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{19}
}

func (x *ConnectionQualityInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConnectionQualityInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ConnectionQualityInfo) GetConnectionQuality() models.ConnectionQuality {
	if x != nil {
		return x.ConnectionQuality
	}
	return models.ConnectionQuality(0)
}

// DominantSpeakerChanged is sent by the SFU to notify when there is a new dominant speaker in the call
type DominantSpeakerChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *DominantSpeakerChanged) Reset() {
	*x = DominantSpeakerChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DominantSpeakerChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DominantSpeakerChanged) ProtoMessage() {}

func (x *DominantSpeakerChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DominantSpeakerChanged.ProtoReflect.Descriptor instead.
func (*DominantSpeakerChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{20}
}

func (x *DominantSpeakerChanged) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DominantSpeakerChanged) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type AudioLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 0.0 means complete silence, 1.0 loudest
	Level      float32 `protobuf:"fixed32,3,opt,name=level,proto3" json:"level,omitempty"`
	IsSpeaking bool    `protobuf:"varint,4,opt,name=is_speaking,json=isSpeaking,proto3" json:"is_speaking,omitempty"`
}

func (x *AudioLevel) Reset() {
	*x = AudioLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLevel) ProtoMessage() {}

func (x *AudioLevel) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLevel.ProtoReflect.Descriptor instead.
func (*AudioLevel) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{21}
}

func (x *AudioLevel) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AudioLevel) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AudioLevel) GetLevel() float32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AudioLevel) GetIsSpeaking() bool {
	if x != nil {
		return x.IsSpeaking
	}
	return false
}

// AudioLevelChanged is sent by the SFU to notify about audio levels by user
type AudioLevelChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioLevels []*AudioLevel `protobuf:"bytes,1,rep,name=audio_levels,json=audioLevels,proto3" json:"audio_levels,omitempty"`
}

func (x *AudioLevelChanged) Reset() {
	*x = AudioLevelChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLevelChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLevelChanged) ProtoMessage() {}

func (x *AudioLevelChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLevelChanged.ProtoReflect.Descriptor instead.
func (*AudioLevelChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{22}
}

func (x *AudioLevelChanged) GetAudioLevels() []*AudioLevel {
	if x != nil {
		return x.AudioLevels
	}
	return nil
}

type AudioMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelCount int32 `protobuf:"varint,1,opt,name=channel_count,json=channelCount,proto3" json:"channel_count,omitempty"`
}

func (x *AudioMediaRequest) Reset() {
	*x = AudioMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMediaRequest) ProtoMessage() {}

func (x *AudioMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMediaRequest.ProtoReflect.Descriptor instead.
func (*AudioMediaRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{23}
}

func (x *AudioMediaRequest) GetChannelCount() int32 {
	if x != nil {
		return x.ChannelCount
	}
	return 0
}

type AudioSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaRequest *AudioMediaRequest `protobuf:"bytes,1,opt,name=media_request,json=mediaRequest,proto3" json:"media_request,omitempty"`
	Codec        *models.Codec      `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
}

func (x *AudioSender) Reset() {
	*x = AudioSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSender) ProtoMessage() {}

func (x *AudioSender) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSender.ProtoReflect.Descriptor instead.
func (*AudioSender) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{24}
}

func (x *AudioSender) GetMediaRequest() *AudioMediaRequest {
	if x != nil {
		return x.MediaRequest
	}
	return nil
}

func (x *AudioSender) GetCodec() *models.Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

type VideoMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdealHeight    int32 `protobuf:"varint,1,opt,name=ideal_height,json=idealHeight,proto3" json:"ideal_height,omitempty"`
	IdealWidth     int32 `protobuf:"varint,2,opt,name=ideal_width,json=idealWidth,proto3" json:"ideal_width,omitempty"`
	IdealFrameRate int32 `protobuf:"varint,3,opt,name=ideal_frame_rate,json=idealFrameRate,proto3" json:"ideal_frame_rate,omitempty"`
}

func (x *VideoMediaRequest) Reset() {
	*x = VideoMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMediaRequest) ProtoMessage() {}

func (x *VideoMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMediaRequest.ProtoReflect.Descriptor instead.
func (*VideoMediaRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{25}
}

func (x *VideoMediaRequest) GetIdealHeight() int32 {
	if x != nil {
		return x.IdealHeight
	}
	return 0
}

func (x *VideoMediaRequest) GetIdealWidth() int32 {
	if x != nil {
		return x.IdealWidth
	}
	return 0
}

func (x *VideoMediaRequest) GetIdealFrameRate() int32 {
	if x != nil {
		return x.IdealFrameRate
	}
	return 0
}

// VideoLayerSetting is used to specify various parameters of a particular encoding in simulcast.
// The parameters are specified here - https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters
// SDKs use these parameters sent from the server to dynamically adjust these parameters to save CPU, bandwidth
type VideoLayerSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Active                bool                       `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	MaxBitrate            int32                      `protobuf:"varint,3,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate,omitempty"`
	ScaleResolutionDownBy float32                    `protobuf:"fixed32,4,opt,name=scale_resolution_down_by,json=scaleResolutionDownBy,proto3" json:"scale_resolution_down_by,omitempty"`
	Priority              VideoLayerSetting_Priority `protobuf:"varint,5,opt,name=priority,proto3,enum=stream.video.sfu.event.VideoLayerSetting_Priority" json:"priority,omitempty"`
	Codec                 *models.Codec              `protobuf:"bytes,6,opt,name=codec,proto3" json:"codec,omitempty"`
	MaxFramerate          uint32                     `protobuf:"varint,7,opt,name=max_framerate,json=maxFramerate,proto3" json:"max_framerate,omitempty"`
}

func (x *VideoLayerSetting) Reset() {
	*x = VideoLayerSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoLayerSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoLayerSetting) ProtoMessage() {}

func (x *VideoLayerSetting) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoLayerSetting.ProtoReflect.Descriptor instead.
func (*VideoLayerSetting) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{26}
}

func (x *VideoLayerSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoLayerSetting) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VideoLayerSetting) GetMaxBitrate() int32 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *VideoLayerSetting) GetScaleResolutionDownBy() float32 {
	if x != nil {
		return x.ScaleResolutionDownBy
	}
	return 0
}

func (x *VideoLayerSetting) GetPriority() VideoLayerSetting_Priority {
	if x != nil {
		return x.Priority
	}
	return VideoLayerSetting_PRIORITY_HIGH_UNSPECIFIED
}

func (x *VideoLayerSetting) GetCodec() *models.Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *VideoLayerSetting) GetMaxFramerate() uint32 {
	if x != nil {
		return x.MaxFramerate
	}
	return 0
}

type VideoSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaRequest *VideoMediaRequest   `protobuf:"bytes,1,opt,name=media_request,json=mediaRequest,proto3" json:"media_request,omitempty"`
	Codec        *models.Codec        `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	Layers       []*VideoLayerSetting `protobuf:"bytes,3,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *VideoSender) Reset() {
	*x = VideoSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSender) ProtoMessage() {}

func (x *VideoSender) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSender.ProtoReflect.Descriptor instead.
func (*VideoSender) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{27}
}

func (x *VideoSender) GetMediaRequest() *VideoMediaRequest {
	if x != nil {
		return x.MediaRequest
	}
	return nil
}

func (x *VideoSender) GetCodec() *models.Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *VideoSender) GetLayers() []*VideoLayerSetting {
	if x != nil {
		return x.Layers
	}
	return nil
}

// sent to users when they need to change the quality of their video
type ChangePublishQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioSenders []*AudioSender `protobuf:"bytes,1,rep,name=audio_senders,json=audioSenders,proto3" json:"audio_senders,omitempty"`
	VideoSenders []*VideoSender `protobuf:"bytes,2,rep,name=video_senders,json=videoSenders,proto3" json:"video_senders,omitempty"`
}

func (x *ChangePublishQuality) Reset() {
	*x = ChangePublishQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePublishQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePublishQuality) ProtoMessage() {}

func (x *ChangePublishQuality) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePublishQuality.ProtoReflect.Descriptor instead.
func (*ChangePublishQuality) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{28}
}

func (x *ChangePublishQuality) GetAudioSenders() []*AudioSender {
	if x != nil {
		return x.AudioSenders
	}
	return nil
}

func (x *ChangePublishQuality) GetVideoSenders() []*VideoSender {
	if x != nil {
		return x.VideoSenders
	}
	return nil
}

// CallGrants is sent to users when there is a change in the call permissions
// to publish audio, video or share the screen for a user or a role. This is
// idempotent and can be sent at any time. Only the current_grants in the latest
// message should be considered. In other words, this is not dependent on any
// other message (including previous call_grants_updated message)
//
// When this message is received, the client (say, React component) should mute
// the tracks which are not allowed anymore. For example, if the message has
// grants {audio:true, video:false} while the user is publishing video, then the
// client component should mute the video track and gray out the video button.
// This way, the user will not be able to publish video until the permissions
// are granted again. Also, muting the track on the client side will prevent
// the SFU from receiving the video track and will save bandwidth.
//
// In simple words, this is exactly the same as muting a track on the client.
// Here, instead of the user instructing the client, SFU would be doing it.
type CallGrantsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGrants *models.CallGrants `protobuf:"bytes,1,opt,name=current_grants,json=currentGrants,proto3" json:"current_grants,omitempty"`
	Message       string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CallGrantsUpdated) Reset() {
	*x = CallGrantsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallGrantsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallGrantsUpdated) ProtoMessage() {}

func (x *CallGrantsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallGrantsUpdated.ProtoReflect.Descriptor instead.
func (*CallGrantsUpdated) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{29}
}

func (x *CallGrantsUpdated) GetCurrentGrants() *models.CallGrants {
	if x != nil {
		return x.CurrentGrants
	}
	return nil
}

func (x *CallGrantsUpdated) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Go away is sent by the SFU to the client to signal to migrate away from the SFU.
// The evict reason may specify why the user is being evicted.
type GoAway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason models.GoAwayReason `protobuf:"varint,1,opt,name=reason,proto3,enum=stream.video.sfu.models.GoAwayReason" json:"reason,omitempty"`
}

func (x *GoAway) Reset() {
	*x = GoAway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoAway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoAway) ProtoMessage() {}

func (x *GoAway) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoAway.ProtoReflect.Descriptor instead.
func (*GoAway) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{30}
}

func (x *GoAway) GetReason() models.GoAwayReason {
	if x != nil {
		return x.Reason
	}
	return models.GoAwayReason(0)
}

// CallEnded is sent by the SFU to the client to signal that the call has ended.
// The reason may specify why the call has ended.
type CallEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason models.CallEndedReason `protobuf:"varint,1,opt,name=reason,proto3,enum=stream.video.sfu.models.CallEndedReason" json:"reason,omitempty"`
}

func (x *CallEnded) Reset() {
	*x = CallEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallEnded) ProtoMessage() {}

func (x *CallEnded) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallEnded.ProtoReflect.Descriptor instead.
func (*CallEnded) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{31}
}

func (x *CallEnded) GetReason() models.CallEndedReason {
	if x != nil {
		return x.Reason
	}
	return models.CallEndedReason(0)
}

var File_video_sfu_event_events_proto protoreflect.FileDescriptor

var file_video_sfu_event_events_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66,
	0x75, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75,
	0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x0d, 0x0a, 0x08, 0x53, 0x66, 0x75,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73,
	0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x70, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x46, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x49, 0x43, 0x45, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x63,
	0x65, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5a,
	0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x6a, 0x0a, 0x18, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0d,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x57, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x5b, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07,
	0x67, 0x6f, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6f, 0x41, 0x77, 0x61, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x67, 0x6f, 0x41, 0x77, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x43, 0x45, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x48,
	0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x69,
	0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x6e,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x13,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3f, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x70,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x22, 0xa1, 0x01,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x62, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x11,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x22, 0x71, 0x0a, 0x0a, 0x49, 0x43, 0x45, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x0a, 0x49, 0x43, 0x45, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0a, 0x53, 0x66, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x8f,
	0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x4d, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x66, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x66, 0x75, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x57, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73, 0x0a, 0x0c, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x76,
	0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x69, 0x64, 0x12, 0x46,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6c,
	0x6c, 0x43, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x12,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x69, 0x64, 0x12, 0x46, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x23, 0x0a, 0x0f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70,
	0x22, 0x87, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x6b, 0x0a,
	0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x16, 0x44, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x0a, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x22, 0x38, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x61,
	0x6c, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x69, 0x64, 0x65, 0x61, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e,
	0x42, 0x79, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0x67, 0x0a,
	0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22,
	0xaa, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73,
	0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x11,
	0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x06, 0x47, 0x6f, 0x41, 0x77, 0x61,
	0x79, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x47, 0x6f, 0x41, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x4d, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x64, 0x42, 0x0b, 0x53, 0x66, 0x75, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x50, 0x01,
	0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73,
	0x66, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xaa, 0x02, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x66, 0x75, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_sfu_event_events_proto_rawDescOnce sync.Once
	file_video_sfu_event_events_proto_rawDescData = file_video_sfu_event_events_proto_rawDesc
)

func file_video_sfu_event_events_proto_rawDescGZIP() []byte {
	file_video_sfu_event_events_proto_rawDescOnce.Do(func() {
		file_video_sfu_event_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_sfu_event_events_proto_rawDescData)
	})
	return file_video_sfu_event_events_proto_rawDescData
}

var file_video_sfu_event_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_video_sfu_event_events_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_video_sfu_event_events_proto_goTypes = []interface{}{
	(VideoLayerSetting_Priority)(0),             // 0: stream.video.sfu.event.VideoLayerSetting.Priority
	(*SfuEvent)(nil),                            // 1: stream.video.sfu.event.SfuEvent
	(*PinsChanged)(nil),                         // 2: stream.video.sfu.event.PinsChanged
	(*Error)(nil),                               // 3: stream.video.sfu.event.Error
	(*ICETrickle)(nil),                          // 4: stream.video.sfu.event.ICETrickle
	(*ICERestart)(nil),                          // 5: stream.video.sfu.event.ICERestart
	(*SfuRequest)(nil),                          // 6: stream.video.sfu.event.SfuRequest
	(*HealthCheckRequest)(nil),                  // 7: stream.video.sfu.event.HealthCheckRequest
	(*HealthCheckResponse)(nil),                 // 8: stream.video.sfu.event.HealthCheckResponse
	(*TrackPublished)(nil),                      // 9: stream.video.sfu.event.TrackPublished
	(*TrackUnpublished)(nil),                    // 10: stream.video.sfu.event.TrackUnpublished
	(*JoinRequest)(nil),                         // 11: stream.video.sfu.event.JoinRequest
	(*Migration)(nil),                           // 12: stream.video.sfu.event.Migration
	(*JoinResponse)(nil),                        // 13: stream.video.sfu.event.JoinResponse
	(*ParticipantJoined)(nil),                   // 14: stream.video.sfu.event.ParticipantJoined
	(*ParticipantLeft)(nil),                     // 15: stream.video.sfu.event.ParticipantLeft
	(*ParticipantUpdated)(nil),                  // 16: stream.video.sfu.event.ParticipantUpdated
	(*SubscriberOffer)(nil),                     // 17: stream.video.sfu.event.SubscriberOffer
	(*PublisherAnswer)(nil),                     // 18: stream.video.sfu.event.PublisherAnswer
	(*ConnectionQualityChanged)(nil),            // 19: stream.video.sfu.event.ConnectionQualityChanged
	(*ConnectionQualityInfo)(nil),               // 20: stream.video.sfu.event.ConnectionQualityInfo
	(*DominantSpeakerChanged)(nil),              // 21: stream.video.sfu.event.DominantSpeakerChanged
	(*AudioLevel)(nil),                          // 22: stream.video.sfu.event.AudioLevel
	(*AudioLevelChanged)(nil),                   // 23: stream.video.sfu.event.AudioLevelChanged
	(*AudioMediaRequest)(nil),                   // 24: stream.video.sfu.event.AudioMediaRequest
	(*AudioSender)(nil),                         // 25: stream.video.sfu.event.AudioSender
	(*VideoMediaRequest)(nil),                   // 26: stream.video.sfu.event.VideoMediaRequest
	(*VideoLayerSetting)(nil),                   // 27: stream.video.sfu.event.VideoLayerSetting
	(*VideoSender)(nil),                         // 28: stream.video.sfu.event.VideoSender
	(*ChangePublishQuality)(nil),                // 29: stream.video.sfu.event.ChangePublishQuality
	(*CallGrantsUpdated)(nil),                   // 30: stream.video.sfu.event.CallGrantsUpdated
	(*GoAway)(nil),                              // 31: stream.video.sfu.event.GoAway
	(*CallEnded)(nil),                           // 32: stream.video.sfu.event.CallEnded
	(*models.ICETrickle)(nil),                   // 33: stream.video.sfu.models.ICETrickle
	(*models.Pin)(nil),                          // 34: stream.video.sfu.models.Pin
	(*models.Error)(nil),                        // 35: stream.video.sfu.models.Error
	(models.WebsocketReconnectStrategy)(0),      // 36: stream.video.sfu.models.WebsocketReconnectStrategy
	(models.PeerType)(0),                        // 37: stream.video.sfu.models.PeerType
	(*models.ParticipantCount)(nil),             // 38: stream.video.sfu.models.ParticipantCount
	(models.TrackType)(0),                       // 39: stream.video.sfu.models.TrackType
	(*models.Participant)(nil),                  // 40: stream.video.sfu.models.Participant
	(models.TrackUnpublishReason)(0),            // 41: stream.video.sfu.models.TrackUnpublishReason
	(*models.ClientDetails)(nil),                // 42: stream.video.sfu.models.ClientDetails
	(*models.TrackInfo)(nil),                    // 43: stream.video.sfu.models.TrackInfo
	(*signal_rpc.TrackSubscriptionDetails)(nil), // 44: stream.video.sfu.signal.TrackSubscriptionDetails
	(*models.CallState)(nil),                    // 45: stream.video.sfu.models.CallState
	(models.ConnectionQuality)(0),               // 46: stream.video.sfu.models.ConnectionQuality
	(*models.Codec)(nil),                        // 47: stream.video.sfu.models.Codec
	(*models.CallGrants)(nil),                   // 48: stream.video.sfu.models.CallGrants
	(models.GoAwayReason)(0),                    // 49: stream.video.sfu.models.GoAwayReason
	(models.CallEndedReason)(0),                 // 50: stream.video.sfu.models.CallEndedReason
}
var file_video_sfu_event_events_proto_depIdxs = []int32{
	17, // 0: stream.video.sfu.event.SfuEvent.subscriber_offer:type_name -> stream.video.sfu.event.SubscriberOffer
	18, // 1: stream.video.sfu.event.SfuEvent.publisher_answer:type_name -> stream.video.sfu.event.PublisherAnswer
	19, // 2: stream.video.sfu.event.SfuEvent.connection_quality_changed:type_name -> stream.video.sfu.event.ConnectionQualityChanged
	23, // 3: stream.video.sfu.event.SfuEvent.audio_level_changed:type_name -> stream.video.sfu.event.AudioLevelChanged
	33, // 4: stream.video.sfu.event.SfuEvent.ice_trickle:type_name -> stream.video.sfu.models.ICETrickle
	29, // 5: stream.video.sfu.event.SfuEvent.change_publish_quality:type_name -> stream.video.sfu.event.ChangePublishQuality
	14, // 6: stream.video.sfu.event.SfuEvent.participant_joined:type_name -> stream.video.sfu.event.ParticipantJoined
	15, // 7: stream.video.sfu.event.SfuEvent.participant_left:type_name -> stream.video.sfu.event.ParticipantLeft
	21, // 8: stream.video.sfu.event.SfuEvent.dominant_speaker_changed:type_name -> stream.video.sfu.event.DominantSpeakerChanged
	13, // 9: stream.video.sfu.event.SfuEvent.join_response:type_name -> stream.video.sfu.event.JoinResponse
	8,  // 10: stream.video.sfu.event.SfuEvent.health_check_response:type_name -> stream.video.sfu.event.HealthCheckResponse
	9,  // 11: stream.video.sfu.event.SfuEvent.track_published:type_name -> stream.video.sfu.event.TrackPublished
	10, // 12: stream.video.sfu.event.SfuEvent.track_unpublished:type_name -> stream.video.sfu.event.TrackUnpublished
	3,  // 13: stream.video.sfu.event.SfuEvent.error:type_name -> stream.video.sfu.event.Error
	30, // 14: stream.video.sfu.event.SfuEvent.call_grants_updated:type_name -> stream.video.sfu.event.CallGrantsUpdated
	31, // 15: stream.video.sfu.event.SfuEvent.go_away:type_name -> stream.video.sfu.event.GoAway
	5,  // 16: stream.video.sfu.event.SfuEvent.ice_restart:type_name -> stream.video.sfu.event.ICERestart
	2,  // 17: stream.video.sfu.event.SfuEvent.pins_updated:type_name -> stream.video.sfu.event.PinsChanged
	32, // 18: stream.video.sfu.event.SfuEvent.call_ended:type_name -> stream.video.sfu.event.CallEnded
	16, // 19: stream.video.sfu.event.SfuEvent.participant_updated:type_name -> stream.video.sfu.event.ParticipantUpdated
	34, // 20: stream.video.sfu.event.PinsChanged.pins:type_name -> stream.video.sfu.models.Pin
	35, // 21: stream.video.sfu.event.Error.error:type_name -> stream.video.sfu.models.Error
	36, // 22: stream.video.sfu.event.Error.reconnect_strategy:type_name -> stream.video.sfu.models.WebsocketReconnectStrategy
	37, // 23: stream.video.sfu.event.ICETrickle.peer_type:type_name -> stream.video.sfu.models.PeerType
	37, // 24: stream.video.sfu.event.ICERestart.peer_type:type_name -> stream.video.sfu.models.PeerType
	11, // 25: stream.video.sfu.event.SfuRequest.join_request:type_name -> stream.video.sfu.event.JoinRequest
	7,  // 26: stream.video.sfu.event.SfuRequest.health_check_request:type_name -> stream.video.sfu.event.HealthCheckRequest
	38, // 27: stream.video.sfu.event.HealthCheckResponse.participant_count:type_name -> stream.video.sfu.models.ParticipantCount
	39, // 28: stream.video.sfu.event.TrackPublished.type:type_name -> stream.video.sfu.models.TrackType
	40, // 29: stream.video.sfu.event.TrackPublished.participant:type_name -> stream.video.sfu.models.Participant
	39, // 30: stream.video.sfu.event.TrackUnpublished.type:type_name -> stream.video.sfu.models.TrackType
	41, // 31: stream.video.sfu.event.TrackUnpublished.cause:type_name -> stream.video.sfu.models.TrackUnpublishReason
	40, // 32: stream.video.sfu.event.TrackUnpublished.participant:type_name -> stream.video.sfu.models.Participant
	42, // 33: stream.video.sfu.event.JoinRequest.client_details:type_name -> stream.video.sfu.models.ClientDetails
	12, // 34: stream.video.sfu.event.JoinRequest.migration:type_name -> stream.video.sfu.event.Migration
	43, // 35: stream.video.sfu.event.Migration.announced_tracks:type_name -> stream.video.sfu.models.TrackInfo
	44, // 36: stream.video.sfu.event.Migration.subscriptions:type_name -> stream.video.sfu.signal.TrackSubscriptionDetails
	45, // 37: stream.video.sfu.event.JoinResponse.call_state:type_name -> stream.video.sfu.models.CallState
	40, // 38: stream.video.sfu.event.ParticipantJoined.participant:type_name -> stream.video.sfu.models.Participant
	40, // 39: stream.video.sfu.event.ParticipantLeft.participant:type_name -> stream.video.sfu.models.Participant
	40, // 40: stream.video.sfu.event.ParticipantUpdated.participant:type_name -> stream.video.sfu.models.Participant
	20, // 41: stream.video.sfu.event.ConnectionQualityChanged.connection_quality_updates:type_name -> stream.video.sfu.event.ConnectionQualityInfo
	46, // 42: stream.video.sfu.event.ConnectionQualityInfo.connection_quality:type_name -> stream.video.sfu.models.ConnectionQuality
	22, // 43: stream.video.sfu.event.AudioLevelChanged.audio_levels:type_name -> stream.video.sfu.event.AudioLevel
	24, // 44: stream.video.sfu.event.AudioSender.media_request:type_name -> stream.video.sfu.event.AudioMediaRequest
	47, // 45: stream.video.sfu.event.AudioSender.codec:type_name -> stream.video.sfu.models.Codec
	0,  // 46: stream.video.sfu.event.VideoLayerSetting.priority:type_name -> stream.video.sfu.event.VideoLayerSetting.Priority
	47, // 47: stream.video.sfu.event.VideoLayerSetting.codec:type_name -> stream.video.sfu.models.Codec
	26, // 48: stream.video.sfu.event.VideoSender.media_request:type_name -> stream.video.sfu.event.VideoMediaRequest
	47, // 49: stream.video.sfu.event.VideoSender.codec:type_name -> stream.video.sfu.models.Codec
	27, // 50: stream.video.sfu.event.VideoSender.layers:type_name -> stream.video.sfu.event.VideoLayerSetting
	25, // 51: stream.video.sfu.event.ChangePublishQuality.audio_senders:type_name -> stream.video.sfu.event.AudioSender
	28, // 52: stream.video.sfu.event.ChangePublishQuality.video_senders:type_name -> stream.video.sfu.event.VideoSender
	48, // 53: stream.video.sfu.event.CallGrantsUpdated.current_grants:type_name -> stream.video.sfu.models.CallGrants
	49, // 54: stream.video.sfu.event.GoAway.reason:type_name -> stream.video.sfu.models.GoAwayReason
	50, // 55: stream.video.sfu.event.CallEnded.reason:type_name -> stream.video.sfu.models.CallEndedReason
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_video_sfu_event_events_proto_init() }
func file_video_sfu_event_events_proto_init() {
	if File_video_sfu_event_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_sfu_event_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfuEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinsChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICETrickle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICERestart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackUnpublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Migration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantJoined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionQualityChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionQualityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DominantSpeakerChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLevelChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoLayerSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePublishQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallGrantsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoAway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_sfu_event_events_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SfuEvent_SubscriberOffer)(nil),
		(*SfuEvent_PublisherAnswer)(nil),
		(*SfuEvent_ConnectionQualityChanged)(nil),
		(*SfuEvent_AudioLevelChanged)(nil),
		(*SfuEvent_IceTrickle)(nil),
		(*SfuEvent_ChangePublishQuality)(nil),
		(*SfuEvent_ParticipantJoined)(nil),
		(*SfuEvent_ParticipantLeft)(nil),
		(*SfuEvent_DominantSpeakerChanged)(nil),
		(*SfuEvent_JoinResponse)(nil),
		(*SfuEvent_HealthCheckResponse)(nil),
		(*SfuEvent_TrackPublished)(nil),
		(*SfuEvent_TrackUnpublished)(nil),
		(*SfuEvent_Error)(nil),
		(*SfuEvent_CallGrantsUpdated)(nil),
		(*SfuEvent_GoAway)(nil),
		(*SfuEvent_IceRestart)(nil),
		(*SfuEvent_PinsUpdated)(nil),
		(*SfuEvent_CallEnded)(nil),
		(*SfuEvent_ParticipantUpdated)(nil),
	}
	file_video_sfu_event_events_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SfuRequest_JoinRequest)(nil),
		(*SfuRequest_HealthCheckRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_sfu_event_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_sfu_event_events_proto_goTypes,
		DependencyIndexes: file_video_sfu_event_events_proto_depIdxs,
		EnumInfos:         file_video_sfu_event_events_proto_enumTypes,
		MessageInfos:      file_video_sfu_event_events_proto_msgTypes,
	}.Build()
	File_video_sfu_event_events_proto = out.File
	file_video_sfu_event_events_proto_rawDesc = nil
	file_video_sfu_event_events_proto_goTypes = nil
	file_video_sfu_event_events_proto_depIdxs = nil
}
