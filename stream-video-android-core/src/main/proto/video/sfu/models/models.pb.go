// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: video/sfu/models/models.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerType int32

const (
	// todo fix me (marcelo)
	PeerType_PEER_TYPE_PUBLISHER_UNSPECIFIED PeerType = 0
	PeerType_PEER_TYPE_SUBSCRIBER            PeerType = 1
)

// Enum value maps for PeerType.
var (
	PeerType_name = map[int32]string{
		0: "PEER_TYPE_PUBLISHER_UNSPECIFIED",
		1: "PEER_TYPE_SUBSCRIBER",
	}
	PeerType_value = map[string]int32{
		"PEER_TYPE_PUBLISHER_UNSPECIFIED": 0,
		"PEER_TYPE_SUBSCRIBER":            1,
	}
)

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[0].Descriptor()
}

func (PeerType) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[0]
}

func (x PeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerType.Descriptor instead.
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{0}
}

type ConnectionQuality int32

const (
	ConnectionQuality_CONNECTION_QUALITY_UNSPECIFIED ConnectionQuality = 0
	ConnectionQuality_CONNECTION_QUALITY_POOR        ConnectionQuality = 1
	ConnectionQuality_CONNECTION_QUALITY_GOOD        ConnectionQuality = 2
	ConnectionQuality_CONNECTION_QUALITY_EXCELLENT   ConnectionQuality = 3
)

// Enum value maps for ConnectionQuality.
var (
	ConnectionQuality_name = map[int32]string{
		0: "CONNECTION_QUALITY_UNSPECIFIED",
		1: "CONNECTION_QUALITY_POOR",
		2: "CONNECTION_QUALITY_GOOD",
		3: "CONNECTION_QUALITY_EXCELLENT",
	}
	ConnectionQuality_value = map[string]int32{
		"CONNECTION_QUALITY_UNSPECIFIED": 0,
		"CONNECTION_QUALITY_POOR":        1,
		"CONNECTION_QUALITY_GOOD":        2,
		"CONNECTION_QUALITY_EXCELLENT":   3,
	}
)

func (x ConnectionQuality) Enum() *ConnectionQuality {
	p := new(ConnectionQuality)
	*p = x
	return p
}

func (x ConnectionQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[1].Descriptor()
}

func (ConnectionQuality) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[1]
}

func (x ConnectionQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionQuality.Descriptor instead.
func (ConnectionQuality) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{1}
}

type VideoQuality int32

const (
	VideoQuality_VIDEO_QUALITY_LOW_UNSPECIFIED VideoQuality = 0
	VideoQuality_VIDEO_QUALITY_MID             VideoQuality = 1
	VideoQuality_VIDEO_QUALITY_HIGH            VideoQuality = 2
	VideoQuality_VIDEO_QUALITY_OFF             VideoQuality = 3
)

// Enum value maps for VideoQuality.
var (
	VideoQuality_name = map[int32]string{
		0: "VIDEO_QUALITY_LOW_UNSPECIFIED",
		1: "VIDEO_QUALITY_MID",
		2: "VIDEO_QUALITY_HIGH",
		3: "VIDEO_QUALITY_OFF",
	}
	VideoQuality_value = map[string]int32{
		"VIDEO_QUALITY_LOW_UNSPECIFIED": 0,
		"VIDEO_QUALITY_MID":             1,
		"VIDEO_QUALITY_HIGH":            2,
		"VIDEO_QUALITY_OFF":             3,
	}
)

func (x VideoQuality) Enum() *VideoQuality {
	p := new(VideoQuality)
	*p = x
	return p
}

func (x VideoQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[2].Descriptor()
}

func (VideoQuality) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[2]
}

func (x VideoQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoQuality.Descriptor instead.
func (VideoQuality) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{2}
}

type TrackType int32

const (
	TrackType_TRACK_TYPE_UNSPECIFIED        TrackType = 0
	TrackType_TRACK_TYPE_AUDIO              TrackType = 1
	TrackType_TRACK_TYPE_VIDEO              TrackType = 2
	TrackType_TRACK_TYPE_SCREEN_SHARE       TrackType = 3
	TrackType_TRACK_TYPE_SCREEN_SHARE_AUDIO TrackType = 4
)

// Enum value maps for TrackType.
var (
	TrackType_name = map[int32]string{
		0: "TRACK_TYPE_UNSPECIFIED",
		1: "TRACK_TYPE_AUDIO",
		2: "TRACK_TYPE_VIDEO",
		3: "TRACK_TYPE_SCREEN_SHARE",
		4: "TRACK_TYPE_SCREEN_SHARE_AUDIO",
	}
	TrackType_value = map[string]int32{
		"TRACK_TYPE_UNSPECIFIED":        0,
		"TRACK_TYPE_AUDIO":              1,
		"TRACK_TYPE_VIDEO":              2,
		"TRACK_TYPE_SCREEN_SHARE":       3,
		"TRACK_TYPE_SCREEN_SHARE_AUDIO": 4,
	}
)

func (x TrackType) Enum() *TrackType {
	p := new(TrackType)
	*p = x
	return p
}

func (x TrackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[3].Descriptor()
}

func (TrackType) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[3]
}

func (x TrackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackType.Descriptor instead.
func (TrackType) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{3}
}

// must be aligned with kit
type ParticipantSource int32

const (
	ParticipantSource_PARTICIPANT_SOURCE_WEBRTC_UNSPECIFIED ParticipantSource = 0
	ParticipantSource_PARTICIPANT_SOURCE_RTMP               ParticipantSource = 1
	ParticipantSource_PARTICIPANT_SOURCE_WHIP               ParticipantSource = 2
	ParticipantSource_PARTICIPANT_SOURCE_SIP                ParticipantSource = 3
	ParticipantSource_PARTICIPANT_SOURCE_RTSP               ParticipantSource = 4
	ParticipantSource_PARTICIPANT_SOURCE_SRT                ParticipantSource = 5
)

// Enum value maps for ParticipantSource.
var (
	ParticipantSource_name = map[int32]string{
		0: "PARTICIPANT_SOURCE_WEBRTC_UNSPECIFIED",
		1: "PARTICIPANT_SOURCE_RTMP",
		2: "PARTICIPANT_SOURCE_WHIP",
		3: "PARTICIPANT_SOURCE_SIP",
		4: "PARTICIPANT_SOURCE_RTSP",
		5: "PARTICIPANT_SOURCE_SRT",
	}
	ParticipantSource_value = map[string]int32{
		"PARTICIPANT_SOURCE_WEBRTC_UNSPECIFIED": 0,
		"PARTICIPANT_SOURCE_RTMP":               1,
		"PARTICIPANT_SOURCE_WHIP":               2,
		"PARTICIPANT_SOURCE_SIP":                3,
		"PARTICIPANT_SOURCE_RTSP":               4,
		"PARTICIPANT_SOURCE_SRT":                5,
	}
)

func (x ParticipantSource) Enum() *ParticipantSource {
	p := new(ParticipantSource)
	*p = x
	return p
}

func (x ParticipantSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantSource) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[4].Descriptor()
}

func (ParticipantSource) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[4]
}

func (x ParticipantSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantSource.Descriptor instead.
func (ParticipantSource) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{4}
}

type AudioBitrateProfile int32

const (
	AudioBitrateProfile_AUDIO_BITRATE_PROFILE_VOICE_STANDARD_UNSPECIFIED AudioBitrateProfile = 0
	AudioBitrateProfile_AUDIO_BITRATE_PROFILE_VOICE_HIGH_QUALITY         AudioBitrateProfile = 1
	AudioBitrateProfile_AUDIO_BITRATE_PROFILE_MUSIC_HIGH_QUALITY         AudioBitrateProfile = 2
)

// Enum value maps for AudioBitrateProfile.
var (
	AudioBitrateProfile_name = map[int32]string{
		0: "AUDIO_BITRATE_PROFILE_VOICE_STANDARD_UNSPECIFIED",
		1: "AUDIO_BITRATE_PROFILE_VOICE_HIGH_QUALITY",
		2: "AUDIO_BITRATE_PROFILE_MUSIC_HIGH_QUALITY",
	}
	AudioBitrateProfile_value = map[string]int32{
		"AUDIO_BITRATE_PROFILE_VOICE_STANDARD_UNSPECIFIED": 0,
		"AUDIO_BITRATE_PROFILE_VOICE_HIGH_QUALITY":         1,
		"AUDIO_BITRATE_PROFILE_MUSIC_HIGH_QUALITY":         2,
	}
)

func (x AudioBitrateProfile) Enum() *AudioBitrateProfile {
	p := new(AudioBitrateProfile)
	*p = x
	return p
}

func (x AudioBitrateProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioBitrateProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[5].Descriptor()
}

func (AudioBitrateProfile) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[5]
}

func (x AudioBitrateProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioBitrateProfile.Descriptor instead.
func (AudioBitrateProfile) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{5}
}

type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED                         ErrorCode = 0
	ErrorCode_ERROR_CODE_PUBLISH_TRACK_NOT_FOUND             ErrorCode = 100
	ErrorCode_ERROR_CODE_PUBLISH_TRACKS_MISMATCH             ErrorCode = 101
	ErrorCode_ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER          ErrorCode = 102
	ErrorCode_ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND ErrorCode = 103
	ErrorCode_ERROR_CODE_LIVE_ENDED                          ErrorCode = 104
	ErrorCode_ERROR_CODE_PARTICIPANT_NOT_FOUND               ErrorCode = 200
	ErrorCode_ERROR_CODE_PARTICIPANT_MIGRATING_OUT           ErrorCode = 201
	ErrorCode_ERROR_CODE_PARTICIPANT_MIGRATION_FAILED        ErrorCode = 202
	ErrorCode_ERROR_CODE_PARTICIPANT_MIGRATING               ErrorCode = 203
	ErrorCode_ERROR_CODE_PARTICIPANT_RECONNECT_FAILED        ErrorCode = 204
	ErrorCode_ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE ErrorCode = 205
	ErrorCode_ERROR_CODE_PARTICIPANT_SIGNAL_LOST             ErrorCode = 206
	ErrorCode_ERROR_CODE_CALL_NOT_FOUND                      ErrorCode = 300
	ErrorCode_ERROR_CODE_CALL_PARTICIPANT_LIMIT_REACHED      ErrorCode = 301
	ErrorCode_ERROR_CODE_REQUEST_VALIDATION_FAILED           ErrorCode = 400
	ErrorCode_ERROR_CODE_UNAUTHENTICATED                     ErrorCode = 401
	ErrorCode_ERROR_CODE_PERMISSION_DENIED                   ErrorCode = 403
	ErrorCode_ERROR_CODE_TOO_MANY_REQUESTS                   ErrorCode = 429
	ErrorCode_ERROR_CODE_INTERNAL_SERVER_ERROR               ErrorCode = 500
	ErrorCode_ERROR_CODE_SFU_SHUTTING_DOWN                   ErrorCode = 600
	ErrorCode_ERROR_CODE_SFU_FULL                            ErrorCode = 700
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "ERROR_CODE_UNSPECIFIED",
		100: "ERROR_CODE_PUBLISH_TRACK_NOT_FOUND",
		101: "ERROR_CODE_PUBLISH_TRACKS_MISMATCH",
		102: "ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER",
		103: "ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND",
		104: "ERROR_CODE_LIVE_ENDED",
		200: "ERROR_CODE_PARTICIPANT_NOT_FOUND",
		201: "ERROR_CODE_PARTICIPANT_MIGRATING_OUT",
		202: "ERROR_CODE_PARTICIPANT_MIGRATION_FAILED",
		203: "ERROR_CODE_PARTICIPANT_MIGRATING",
		204: "ERROR_CODE_PARTICIPANT_RECONNECT_FAILED",
		205: "ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE",
		206: "ERROR_CODE_PARTICIPANT_SIGNAL_LOST",
		300: "ERROR_CODE_CALL_NOT_FOUND",
		301: "ERROR_CODE_CALL_PARTICIPANT_LIMIT_REACHED",
		400: "ERROR_CODE_REQUEST_VALIDATION_FAILED",
		401: "ERROR_CODE_UNAUTHENTICATED",
		403: "ERROR_CODE_PERMISSION_DENIED",
		429: "ERROR_CODE_TOO_MANY_REQUESTS",
		500: "ERROR_CODE_INTERNAL_SERVER_ERROR",
		600: "ERROR_CODE_SFU_SHUTTING_DOWN",
		700: "ERROR_CODE_SFU_FULL",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":                         0,
		"ERROR_CODE_PUBLISH_TRACK_NOT_FOUND":             100,
		"ERROR_CODE_PUBLISH_TRACKS_MISMATCH":             101,
		"ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER":          102,
		"ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND": 103,
		"ERROR_CODE_LIVE_ENDED":                          104,
		"ERROR_CODE_PARTICIPANT_NOT_FOUND":               200,
		"ERROR_CODE_PARTICIPANT_MIGRATING_OUT":           201,
		"ERROR_CODE_PARTICIPANT_MIGRATION_FAILED":        202,
		"ERROR_CODE_PARTICIPANT_MIGRATING":               203,
		"ERROR_CODE_PARTICIPANT_RECONNECT_FAILED":        204,
		"ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE": 205,
		"ERROR_CODE_PARTICIPANT_SIGNAL_LOST":             206,
		"ERROR_CODE_CALL_NOT_FOUND":                      300,
		"ERROR_CODE_CALL_PARTICIPANT_LIMIT_REACHED":      301,
		"ERROR_CODE_REQUEST_VALIDATION_FAILED":           400,
		"ERROR_CODE_UNAUTHENTICATED":                     401,
		"ERROR_CODE_PERMISSION_DENIED":                   403,
		"ERROR_CODE_TOO_MANY_REQUESTS":                   429,
		"ERROR_CODE_INTERNAL_SERVER_ERROR":               500,
		"ERROR_CODE_SFU_SHUTTING_DOWN":                   600,
		"ERROR_CODE_SFU_FULL":                            700,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[6].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[6]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{6}
}

type SdkType int32

const (
	SdkType_SDK_TYPE_UNSPECIFIED      SdkType = 0
	SdkType_SDK_TYPE_REACT            SdkType = 1
	SdkType_SDK_TYPE_ANGULAR          SdkType = 2
	SdkType_SDK_TYPE_ANDROID          SdkType = 3
	SdkType_SDK_TYPE_IOS              SdkType = 4
	SdkType_SDK_TYPE_FLUTTER          SdkType = 5
	SdkType_SDK_TYPE_REACT_NATIVE     SdkType = 6
	SdkType_SDK_TYPE_UNITY            SdkType = 7
	SdkType_SDK_TYPE_GO               SdkType = 8
	SdkType_SDK_TYPE_PLAIN_JAVASCRIPT SdkType = 9
)

// Enum value maps for SdkType.
var (
	SdkType_name = map[int32]string{
		0: "SDK_TYPE_UNSPECIFIED",
		1: "SDK_TYPE_REACT",
		2: "SDK_TYPE_ANGULAR",
		3: "SDK_TYPE_ANDROID",
		4: "SDK_TYPE_IOS",
		5: "SDK_TYPE_FLUTTER",
		6: "SDK_TYPE_REACT_NATIVE",
		7: "SDK_TYPE_UNITY",
		8: "SDK_TYPE_GO",
		9: "SDK_TYPE_PLAIN_JAVASCRIPT",
	}
	SdkType_value = map[string]int32{
		"SDK_TYPE_UNSPECIFIED":      0,
		"SDK_TYPE_REACT":            1,
		"SDK_TYPE_ANGULAR":          2,
		"SDK_TYPE_ANDROID":          3,
		"SDK_TYPE_IOS":              4,
		"SDK_TYPE_FLUTTER":          5,
		"SDK_TYPE_REACT_NATIVE":     6,
		"SDK_TYPE_UNITY":            7,
		"SDK_TYPE_GO":               8,
		"SDK_TYPE_PLAIN_JAVASCRIPT": 9,
	}
)

func (x SdkType) Enum() *SdkType {
	p := new(SdkType)
	*p = x
	return p
}

func (x SdkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[7].Descriptor()
}

func (SdkType) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[7]
}

func (x SdkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkType.Descriptor instead.
func (SdkType) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{7}
}

type TrackUnpublishReason int32

const (
	// Default value which is used when the specific reason
	// for muting the track is not known.
	TrackUnpublishReason_TRACK_UNPUBLISH_REASON_UNSPECIFIED TrackUnpublishReason = 0
	// Represents user muting their tracks.
	TrackUnpublishReason_TRACK_UNPUBLISH_REASON_USER_MUTED TrackUnpublishReason = 1
	// Represents muting the track because the permission to
	// publish the track has been revoked.
	TrackUnpublishReason_TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED TrackUnpublishReason = 2
	// Represents muting the track due to moderation actions.
	// This is different from permission revoked because the
	// participant can unmute themselves here whereas in case
	// of "permission revoke" it is not possible until the
	// call permissions are updated.
	TrackUnpublishReason_TRACK_UNPUBLISH_REASON_MODERATION TrackUnpublishReason = 3
)

// Enum value maps for TrackUnpublishReason.
var (
	TrackUnpublishReason_name = map[int32]string{
		0: "TRACK_UNPUBLISH_REASON_UNSPECIFIED",
		1: "TRACK_UNPUBLISH_REASON_USER_MUTED",
		2: "TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED",
		3: "TRACK_UNPUBLISH_REASON_MODERATION",
	}
	TrackUnpublishReason_value = map[string]int32{
		"TRACK_UNPUBLISH_REASON_UNSPECIFIED":        0,
		"TRACK_UNPUBLISH_REASON_USER_MUTED":         1,
		"TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED": 2,
		"TRACK_UNPUBLISH_REASON_MODERATION":         3,
	}
)

func (x TrackUnpublishReason) Enum() *TrackUnpublishReason {
	p := new(TrackUnpublishReason)
	*p = x
	return p
}

func (x TrackUnpublishReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackUnpublishReason) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[8].Descriptor()
}

func (TrackUnpublishReason) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[8]
}

func (x TrackUnpublishReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackUnpublishReason.Descriptor instead.
func (TrackUnpublishReason) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{8}
}

// GoAwayReason represents the reason for the SFU to
// disconnect the client.
type GoAwayReason int32

const (
	GoAwayReason_GO_AWAY_REASON_UNSPECIFIED   GoAwayReason = 0
	GoAwayReason_GO_AWAY_REASON_SHUTTING_DOWN GoAwayReason = 1
	GoAwayReason_GO_AWAY_REASON_REBALANCE     GoAwayReason = 2
)

// Enum value maps for GoAwayReason.
var (
	GoAwayReason_name = map[int32]string{
		0: "GO_AWAY_REASON_UNSPECIFIED",
		1: "GO_AWAY_REASON_SHUTTING_DOWN",
		2: "GO_AWAY_REASON_REBALANCE",
	}
	GoAwayReason_value = map[string]int32{
		"GO_AWAY_REASON_UNSPECIFIED":   0,
		"GO_AWAY_REASON_SHUTTING_DOWN": 1,
		"GO_AWAY_REASON_REBALANCE":     2,
	}
)

func (x GoAwayReason) Enum() *GoAwayReason {
	p := new(GoAwayReason)
	*p = x
	return p
}

func (x GoAwayReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoAwayReason) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[9].Descriptor()
}

func (GoAwayReason) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[9]
}

func (x GoAwayReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoAwayReason.Descriptor instead.
func (GoAwayReason) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{9}
}

// CallEndedReason represents the reason for the call to end.
type CallEndedReason int32

const (
	CallEndedReason_CALL_ENDED_REASON_UNSPECIFIED   CallEndedReason = 0
	CallEndedReason_CALL_ENDED_REASON_ENDED         CallEndedReason = 1
	CallEndedReason_CALL_ENDED_REASON_LIVE_ENDED    CallEndedReason = 2
	CallEndedReason_CALL_ENDED_REASON_KICKED        CallEndedReason = 3
	CallEndedReason_CALL_ENDED_REASON_SESSION_ENDED CallEndedReason = 4
)

// Enum value maps for CallEndedReason.
var (
	CallEndedReason_name = map[int32]string{
		0: "CALL_ENDED_REASON_UNSPECIFIED",
		1: "CALL_ENDED_REASON_ENDED",
		2: "CALL_ENDED_REASON_LIVE_ENDED",
		3: "CALL_ENDED_REASON_KICKED",
		4: "CALL_ENDED_REASON_SESSION_ENDED",
	}
	CallEndedReason_value = map[string]int32{
		"CALL_ENDED_REASON_UNSPECIFIED":   0,
		"CALL_ENDED_REASON_ENDED":         1,
		"CALL_ENDED_REASON_LIVE_ENDED":    2,
		"CALL_ENDED_REASON_KICKED":        3,
		"CALL_ENDED_REASON_SESSION_ENDED": 4,
	}
)

func (x CallEndedReason) Enum() *CallEndedReason {
	p := new(CallEndedReason)
	*p = x
	return p
}

func (x CallEndedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallEndedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[10].Descriptor()
}

func (CallEndedReason) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[10]
}

func (x CallEndedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallEndedReason.Descriptor instead.
func (CallEndedReason) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{10}
}

// WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.
type WebsocketReconnectStrategy int32

const (
	WebsocketReconnectStrategy_WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED WebsocketReconnectStrategy = 0
	// Sent after reaching the maximum reconnection attempts, or any other unrecoverable error leading to permanent disconnect.
	WebsocketReconnectStrategy_WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT WebsocketReconnectStrategy = 1
	// SDK should maintaining existing publisher/subscriber pc instances
	// and establish a new WebSocket connection.
	WebsocketReconnectStrategy_WEBSOCKET_RECONNECT_STRATEGY_FAST WebsocketReconnectStrategy = 2
	// SDK should obtain new credentials from the coordinator, drops existing pc instances, set a new session_id and initializes
	// a completely new WebSocket connection, ensuring a comprehensive reset.
	WebsocketReconnectStrategy_WEBSOCKET_RECONNECT_STRATEGY_REJOIN WebsocketReconnectStrategy = 3
	// SDK should migrate to a new SFU instance
	WebsocketReconnectStrategy_WEBSOCKET_RECONNECT_STRATEGY_MIGRATE WebsocketReconnectStrategy = 4
)

// Enum value maps for WebsocketReconnectStrategy.
var (
	WebsocketReconnectStrategy_name = map[int32]string{
		0: "WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED",
		1: "WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT",
		2: "WEBSOCKET_RECONNECT_STRATEGY_FAST",
		3: "WEBSOCKET_RECONNECT_STRATEGY_REJOIN",
		4: "WEBSOCKET_RECONNECT_STRATEGY_MIGRATE",
	}
	WebsocketReconnectStrategy_value = map[string]int32{
		"WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED": 0,
		"WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT":  1,
		"WEBSOCKET_RECONNECT_STRATEGY_FAST":        2,
		"WEBSOCKET_RECONNECT_STRATEGY_REJOIN":      3,
		"WEBSOCKET_RECONNECT_STRATEGY_MIGRATE":     4,
	}
)

func (x WebsocketReconnectStrategy) Enum() *WebsocketReconnectStrategy {
	p := new(WebsocketReconnectStrategy)
	*p = x
	return p
}

func (x WebsocketReconnectStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebsocketReconnectStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[11].Descriptor()
}

func (WebsocketReconnectStrategy) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[11]
}

func (x WebsocketReconnectStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebsocketReconnectStrategy.Descriptor instead.
func (WebsocketReconnectStrategy) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{11}
}

// AndroidThermalState is reported by the Android API. The full list of values is documented here
// https://developer.android.com/reference/android/os/PowerManager.html#getCurrentThermalStatus()
type AndroidThermalState int32

const (
	AndroidThermalState_ANDROID_THERMAL_STATE_UNSPECIFIED AndroidThermalState = 0
	AndroidThermalState_ANDROID_THERMAL_STATE_NONE        AndroidThermalState = 1
	AndroidThermalState_ANDROID_THERMAL_STATE_LIGHT       AndroidThermalState = 2
	AndroidThermalState_ANDROID_THERMAL_STATE_MODERATE    AndroidThermalState = 3
	AndroidThermalState_ANDROID_THERMAL_STATE_SEVERE      AndroidThermalState = 4
	AndroidThermalState_ANDROID_THERMAL_STATE_CRITICAL    AndroidThermalState = 5
	AndroidThermalState_ANDROID_THERMAL_STATE_EMERGENCY   AndroidThermalState = 6
	AndroidThermalState_ANDROID_THERMAL_STATE_SHUTDOWN    AndroidThermalState = 7
)

// Enum value maps for AndroidThermalState.
var (
	AndroidThermalState_name = map[int32]string{
		0: "ANDROID_THERMAL_STATE_UNSPECIFIED",
		1: "ANDROID_THERMAL_STATE_NONE",
		2: "ANDROID_THERMAL_STATE_LIGHT",
		3: "ANDROID_THERMAL_STATE_MODERATE",
		4: "ANDROID_THERMAL_STATE_SEVERE",
		5: "ANDROID_THERMAL_STATE_CRITICAL",
		6: "ANDROID_THERMAL_STATE_EMERGENCY",
		7: "ANDROID_THERMAL_STATE_SHUTDOWN",
	}
	AndroidThermalState_value = map[string]int32{
		"ANDROID_THERMAL_STATE_UNSPECIFIED": 0,
		"ANDROID_THERMAL_STATE_NONE":        1,
		"ANDROID_THERMAL_STATE_LIGHT":       2,
		"ANDROID_THERMAL_STATE_MODERATE":    3,
		"ANDROID_THERMAL_STATE_SEVERE":      4,
		"ANDROID_THERMAL_STATE_CRITICAL":    5,
		"ANDROID_THERMAL_STATE_EMERGENCY":   6,
		"ANDROID_THERMAL_STATE_SHUTDOWN":    7,
	}
)

func (x AndroidThermalState) Enum() *AndroidThermalState {
	p := new(AndroidThermalState)
	*p = x
	return p
}

func (x AndroidThermalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AndroidThermalState) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[12].Descriptor()
}

func (AndroidThermalState) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[12]
}

func (x AndroidThermalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AndroidThermalState.Descriptor instead.
func (AndroidThermalState) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{12}
}

// AppleThermalState is the thermal state as reported by Apple devices when available or applicable to the platform.
// The full list of states (enum) is available here: https://developer.apple.com/documentation/foundation/processinfo/thermalstate
type AppleThermalState int32

const (
	AppleThermalState_APPLE_THERMAL_STATE_UNSPECIFIED AppleThermalState = 0
	AppleThermalState_APPLE_THERMAL_STATE_NOMINAL     AppleThermalState = 1
	AppleThermalState_APPLE_THERMAL_STATE_FAIR        AppleThermalState = 2
	AppleThermalState_APPLE_THERMAL_STATE_SERIOUS     AppleThermalState = 3
	AppleThermalState_APPLE_THERMAL_STATE_CRITICAL    AppleThermalState = 4
)

// Enum value maps for AppleThermalState.
var (
	AppleThermalState_name = map[int32]string{
		0: "APPLE_THERMAL_STATE_UNSPECIFIED",
		1: "APPLE_THERMAL_STATE_NOMINAL",
		2: "APPLE_THERMAL_STATE_FAIR",
		3: "APPLE_THERMAL_STATE_SERIOUS",
		4: "APPLE_THERMAL_STATE_CRITICAL",
	}
	AppleThermalState_value = map[string]int32{
		"APPLE_THERMAL_STATE_UNSPECIFIED": 0,
		"APPLE_THERMAL_STATE_NOMINAL":     1,
		"APPLE_THERMAL_STATE_FAIR":        2,
		"APPLE_THERMAL_STATE_SERIOUS":     3,
		"APPLE_THERMAL_STATE_CRITICAL":    4,
	}
)

func (x AppleThermalState) Enum() *AppleThermalState {
	p := new(AppleThermalState)
	*p = x
	return p
}

func (x AppleThermalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppleThermalState) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[13].Descriptor()
}

func (AppleThermalState) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[13]
}

func (x AppleThermalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppleThermalState.Descriptor instead.
func (AppleThermalState) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{13}
}

// ClientCapability defines a feature that client supports
type ClientCapability int32

const (
	ClientCapability_CLIENT_CAPABILITY_UNSPECIFIED ClientCapability = 0
	// Enables SFU pausing inbound video
	ClientCapability_CLIENT_CAPABILITY_SUBSCRIBER_VIDEO_PAUSE ClientCapability = 1
)

// Enum value maps for ClientCapability.
var (
	ClientCapability_name = map[int32]string{
		0: "CLIENT_CAPABILITY_UNSPECIFIED",
		1: "CLIENT_CAPABILITY_SUBSCRIBER_VIDEO_PAUSE",
	}
	ClientCapability_value = map[string]int32{
		"CLIENT_CAPABILITY_UNSPECIFIED":            0,
		"CLIENT_CAPABILITY_SUBSCRIBER_VIDEO_PAUSE": 1,
	}
)

func (x ClientCapability) Enum() *ClientCapability {
	p := new(ClientCapability)
	*p = x
	return p
}

func (x ClientCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[14].Descriptor()
}

func (ClientCapability) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[14]
}

func (x ClientCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientCapability.Descriptor instead.
func (ClientCapability) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{14}
}

// CallState is the current state of the call
// as seen by an SFU.
type CallState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// participants is the list of participants in the call.
	// In large calls, the list could be truncated in which
	// case, the list of participants contains fewer participants
	// than the counts returned in participant_count. Anonymous
	// participants are **NOT** included in the list.
	Participants []*Participant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	// started_at is the time the call session actually started.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// participant_count contains the summary of the counts.
	ParticipantCount *ParticipantCount `protobuf:"bytes,3,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	// the list of pins in the call.
	// Pins are ordered in descending order (most important first).
	Pins []*Pin `protobuf:"bytes,4,rep,name=pins,proto3" json:"pins,omitempty"`
}

func (x *CallState) Reset() {
	*x = CallState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallState) ProtoMessage() {}

func (x *CallState) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallState.ProtoReflect.Descriptor instead.
func (*CallState) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{0}
}

func (x *CallState) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *CallState) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *CallState) GetParticipantCount() *ParticipantCount {
	if x != nil {
		return x.ParticipantCount
	}
	return nil
}

func (x *CallState) GetPins() []*Pin {
	if x != nil {
		return x.Pins
	}
	return nil
}

type ParticipantCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of participants in the call including
	// the anonymous participants.
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Total number of anonymous participants in the call.
	Anonymous uint32 `protobuf:"varint,2,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
}

func (x *ParticipantCount) Reset() {
	*x = ParticipantCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantCount) ProtoMessage() {}

func (x *ParticipantCount) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantCount.ProtoReflect.Descriptor instead.
func (*ParticipantCount) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipantCount) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ParticipantCount) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

type Pin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the user to pin
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the user sesion_id to pin, if not provided, applies to all sessions
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *Pin) Reset() {
	*x = Pin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pin) ProtoMessage() {}

func (x *Pin) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pin.ProtoReflect.Descriptor instead.
func (*Pin) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{2}
}

func (x *Pin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Pin) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// those who are online in the call
type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// map of track id to track type
	PublishedTracks   []TrackType            `protobuf:"varint,3,rep,packed,name=published_tracks,json=publishedTracks,proto3,enum=stream.video.sfu.models.TrackType" json:"published_tracks,omitempty"`
	JoinedAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	TrackLookupPrefix string                 `protobuf:"bytes,5,opt,name=track_lookup_prefix,json=trackLookupPrefix,proto3" json:"track_lookup_prefix,omitempty"`
	ConnectionQuality ConnectionQuality      `protobuf:"varint,6,opt,name=connection_quality,json=connectionQuality,proto3,enum=stream.video.sfu.models.ConnectionQuality" json:"connection_quality,omitempty"`
	IsSpeaking        bool                   `protobuf:"varint,7,opt,name=is_speaking,json=isSpeaking,proto3" json:"is_speaking,omitempty"`
	IsDominantSpeaker bool                   `protobuf:"varint,8,opt,name=is_dominant_speaker,json=isDominantSpeaker,proto3" json:"is_dominant_speaker,omitempty"`
	AudioLevel        float32                `protobuf:"fixed32,9,opt,name=audio_level,json=audioLevel,proto3" json:"audio_level,omitempty"`
	Name              string                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Image             string                 `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
	Custom            *structpb.Struct       `protobuf:"bytes,12,opt,name=custom,proto3" json:"custom,omitempty"`
	Roles             []string               `protobuf:"bytes,13,rep,name=roles,proto3" json:"roles,omitempty"`
	Source            ParticipantSource      `protobuf:"varint,14,opt,name=source,proto3,enum=stream.video.sfu.models.ParticipantSource" json:"source,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{3}
}

func (x *Participant) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Participant) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Participant) GetPublishedTracks() []TrackType {
	if x != nil {
		return x.PublishedTracks
	}
	return nil
}

func (x *Participant) GetJoinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *Participant) GetTrackLookupPrefix() string {
	if x != nil {
		return x.TrackLookupPrefix
	}
	return ""
}

func (x *Participant) GetConnectionQuality() ConnectionQuality {
	if x != nil {
		return x.ConnectionQuality
	}
	return ConnectionQuality_CONNECTION_QUALITY_UNSPECIFIED
}

func (x *Participant) GetIsSpeaking() bool {
	if x != nil {
		return x.IsSpeaking
	}
	return false
}

func (x *Participant) GetIsDominantSpeaker() bool {
	if x != nil {
		return x.IsDominantSpeaker
	}
	return false
}

func (x *Participant) GetAudioLevel() float32 {
	if x != nil {
		return x.AudioLevel
	}
	return 0
}

func (x *Participant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Participant) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Participant) GetCustom() *structpb.Struct {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *Participant) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Participant) GetSource() ParticipantSource {
	if x != nil {
		return x.Source
	}
	return ParticipantSource_PARTICIPANT_SOURCE_WEBRTC_UNSPECIFIED
}

type StreamQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoQuality VideoQuality `protobuf:"varint,1,opt,name=video_quality,json=videoQuality,proto3,enum=stream.video.sfu.models.VideoQuality" json:"video_quality,omitempty"`
	UserId       string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StreamQuality) Reset() {
	*x = StreamQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamQuality) ProtoMessage() {}

func (x *StreamQuality) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamQuality.ProtoReflect.Descriptor instead.
func (*StreamQuality) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{4}
}

func (x *StreamQuality) GetVideoQuality() VideoQuality {
	if x != nil {
		return x.VideoQuality
	}
	return VideoQuality_VIDEO_QUALITY_LOW_UNSPECIFIED
}

func (x *StreamQuality) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type VideoDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *VideoDimension) Reset() {
	*x = VideoDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDimension) ProtoMessage() {}

func (x *VideoDimension) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDimension.ProtoReflect.Descriptor instead.
func (*VideoDimension) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{5}
}

func (x *VideoDimension) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoDimension) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type VideoLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for tracks with a single layer, this should be HIGH
	Rid            string          `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	VideoDimension *VideoDimension `protobuf:"bytes,2,opt,name=video_dimension,json=videoDimension,proto3" json:"video_dimension,omitempty"`
	// target bitrate, server will measure actual
	Bitrate uint32       `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Fps     uint32       `protobuf:"varint,5,opt,name=fps,proto3" json:"fps,omitempty"`
	Quality VideoQuality `protobuf:"varint,6,opt,name=quality,proto3,enum=stream.video.sfu.models.VideoQuality" json:"quality,omitempty"`
}

func (x *VideoLayer) Reset() {
	*x = VideoLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoLayer) ProtoMessage() {}

func (x *VideoLayer) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoLayer.ProtoReflect.Descriptor instead.
func (*VideoLayer) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{6}
}

func (x *VideoLayer) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *VideoLayer) GetVideoDimension() *VideoDimension {
	if x != nil {
		return x.VideoDimension
	}
	return nil
}

func (x *VideoLayer) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VideoLayer) GetFps() uint32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VideoLayer) GetQuality() VideoQuality {
	if x != nil {
		return x.Quality
	}
	return VideoQuality_VIDEO_QUALITY_LOW_UNSPECIFIED
}

// SubscribeOption represents the configuration options for subscribing to a track.
type SubscribeOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the track being subscribed (e.g., video, screenshare).
	TrackType TrackType `protobuf:"varint,1,opt,name=track_type,json=trackType,proto3,enum=stream.video.sfu.models.TrackType" json:"track_type,omitempty"`
	// The codecs supported by the subscriber for decoding tracks.
	Codecs []*Codec `protobuf:"bytes,2,rep,name=codecs,proto3" json:"codecs,omitempty"`
}

func (x *SubscribeOption) Reset() {
	*x = SubscribeOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOption) ProtoMessage() {}

func (x *SubscribeOption) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOption.ProtoReflect.Descriptor instead.
func (*SubscribeOption) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeOption) GetTrackType() TrackType {
	if x != nil {
		return x.TrackType
	}
	return TrackType_TRACK_TYPE_UNSPECIFIED
}

func (x *SubscribeOption) GetCodecs() []*Codec {
	if x != nil {
		return x.Codecs
	}
	return nil
}

// PublishOption represents the configuration options for publishing a track.
type PublishOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the track being published (e.g., video, screenshare).
	TrackType TrackType `protobuf:"varint,1,opt,name=track_type,json=trackType,proto3,enum=stream.video.sfu.models.TrackType" json:"track_type,omitempty"`
	// The codec to be used for encoding the track (e.g., VP8, VP9, H264).
	Codec *Codec `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	// The target bitrate for the published track, in bits per second.
	Bitrate int32 `protobuf:"varint,3,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// The target frames per second (FPS) for video encoding.
	Fps int32 `protobuf:"varint,4,opt,name=fps,proto3" json:"fps,omitempty"`
	// The maximum number of spatial layers to send.
	// - For SVC (e.g., VP9), spatial layers downscale by a factor of 2:
	//   - 1 layer: full resolution
	//   - 2 layers: full resolution + half resolution
	//   - 3 layers: full resolution + half resolution + quarter resolution
	//   - For non-SVC codecs (e.g., VP8/H264), this determines the number of
	//     encoded resolutions (e.g., quarter, half, full) sent for simulcast.
	MaxSpatialLayers int32 `protobuf:"varint,5,opt,name=max_spatial_layers,json=maxSpatialLayers,proto3" json:"max_spatial_layers,omitempty"`
	// The maximum number of temporal layers for scalable video coding (SVC).
	// Temporal layers allow varying frame rates for different bandwidths.
	MaxTemporalLayers int32 `protobuf:"varint,6,opt,name=max_temporal_layers,json=maxTemporalLayers,proto3" json:"max_temporal_layers,omitempty"`
	// The dimensions of the video (e.g., width and height in pixels).
	// Spatial layers are based on this base resolution. For example, if the base
	// resolution is 1280x720:
	// - Full resolution (1 layer) = 1280x720
	// - Half resolution (2 layers) = 640x360
	// - Quarter resolution (3 layers) = 320x180
	VideoDimension *VideoDimension `protobuf:"bytes,7,opt,name=video_dimension,json=videoDimension,proto3" json:"video_dimension,omitempty"`
	// The unique identifier for the publish request.
	//   - This `id` is assigned exclusively by the SFU. Any `id` set by the client
	//     in the `PublishOption` will be ignored and overwritten by the SFU.
	//   - The primary purpose of this `id` is to uniquely identify each publish
	//     request, even in scenarios where multiple publish requests for the same
	//     `track_type` and `codec` are active simultaneously.
	//     For example:
	//   - A user may publish two tracks of the same type (e.g., video) and codec
	//     (e.g., VP9) concurrently.
	//   - This uniqueness ensures that individual requests can be managed
	//     independently. For instance, an `id` is critical when stopping a specific
	//     publish request without affecting others.
	Id int32 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// If true, instructs the publisher to send only the highest available simulcast layer,
	// disabling all lower layers. This applies to simulcast encodings.
	// For SVC codecs, prefer using the L1T3 (single spatial, 3 temporal layers) mode instead.
	UseSingleLayer bool `protobuf:"varint,9,opt,name=use_single_layer,json=useSingleLayer,proto3" json:"use_single_layer,omitempty"`
	// Audio bitrate profiles for different audio quality profiles.
	AudioBitrateProfiles []*AudioBitrate `protobuf:"bytes,10,rep,name=audio_bitrate_profiles,json=audioBitrateProfiles,proto3" json:"audio_bitrate_profiles,omitempty"`
}

func (x *PublishOption) Reset() {
	*x = PublishOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishOption) ProtoMessage() {}

func (x *PublishOption) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishOption.ProtoReflect.Descriptor instead.
func (*PublishOption) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{8}
}

func (x *PublishOption) GetTrackType() TrackType {
	if x != nil {
		return x.TrackType
	}
	return TrackType_TRACK_TYPE_UNSPECIFIED
}

func (x *PublishOption) GetCodec() *Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *PublishOption) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *PublishOption) GetFps() int32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *PublishOption) GetMaxSpatialLayers() int32 {
	if x != nil {
		return x.MaxSpatialLayers
	}
	return 0
}

func (x *PublishOption) GetMaxTemporalLayers() int32 {
	if x != nil {
		return x.MaxTemporalLayers
	}
	return 0
}

func (x *PublishOption) GetVideoDimension() *VideoDimension {
	if x != nil {
		return x.VideoDimension
	}
	return nil
}

func (x *PublishOption) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PublishOption) GetUseSingleLayer() bool {
	if x != nil {
		return x.UseSingleLayer
	}
	return false
}

func (x *PublishOption) GetAudioBitrateProfiles() []*AudioBitrate {
	if x != nil {
		return x.AudioBitrateProfiles
	}
	return nil
}

type Codec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadType        uint32 `protobuf:"varint,16,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Name               string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	ClockRate          uint32 `protobuf:"varint,14,opt,name=clock_rate,json=clockRate,proto3" json:"clock_rate,omitempty"`
	EncodingParameters string `protobuf:"bytes,15,opt,name=encoding_parameters,json=encodingParameters,proto3" json:"encoding_parameters,omitempty"`
	Fmtp               string `protobuf:"bytes,12,opt,name=fmtp,proto3" json:"fmtp,omitempty"`
}

func (x *Codec) Reset() {
	*x = Codec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Codec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Codec) ProtoMessage() {}

func (x *Codec) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Codec.ProtoReflect.Descriptor instead.
func (*Codec) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{9}
}

func (x *Codec) GetPayloadType() uint32 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *Codec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Codec) GetClockRate() uint32 {
	if x != nil {
		return x.ClockRate
	}
	return 0
}

func (x *Codec) GetEncodingParameters() string {
	if x != nil {
		return x.EncodingParameters
	}
	return ""
}

func (x *Codec) GetFmtp() string {
	if x != nil {
		return x.Fmtp
	}
	return ""
}

type ICETrickle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerType     PeerType `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=stream.video.sfu.models.PeerType" json:"peer_type,omitempty"`
	IceCandidate string   `protobuf:"bytes,2,opt,name=ice_candidate,json=iceCandidate,proto3" json:"ice_candidate,omitempty"`
	SessionId    string   `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *ICETrickle) Reset() {
	*x = ICETrickle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICETrickle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICETrickle) ProtoMessage() {}

func (x *ICETrickle) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICETrickle.ProtoReflect.Descriptor instead.
func (*ICETrickle) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{10}
}

func (x *ICETrickle) GetPeerType() PeerType {
	if x != nil {
		return x.PeerType
	}
	return PeerType_PEER_TYPE_PUBLISHER_UNSPECIFIED
}

func (x *ICETrickle) GetIceCandidate() string {
	if x != nil {
		return x.IceCandidate
	}
	return ""
}

func (x *ICETrickle) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type AudioBitrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile AudioBitrateProfile `protobuf:"varint,1,opt,name=profile,proto3,enum=stream.video.sfu.models.AudioBitrateProfile" json:"profile,omitempty"`
	Bitrate int32               `protobuf:"varint,2,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
}

func (x *AudioBitrate) Reset() {
	*x = AudioBitrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioBitrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioBitrate) ProtoMessage() {}

func (x *AudioBitrate) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioBitrate.ProtoReflect.Descriptor instead.
func (*AudioBitrate) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{11}
}

func (x *AudioBitrate) GetProfile() AudioBitrateProfile {
	if x != nil {
		return x.Profile
	}
	return AudioBitrateProfile_AUDIO_BITRATE_PROFILE_VOICE_STANDARD_UNSPECIFIED
}

func (x *AudioBitrate) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

type TrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId   string        `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	TrackType TrackType     `protobuf:"varint,2,opt,name=track_type,json=trackType,proto3,enum=stream.video.sfu.models.TrackType" json:"track_type,omitempty"`
	Layers    []*VideoLayer `protobuf:"bytes,5,rep,name=layers,proto3" json:"layers,omitempty"`
	Mid       string        `protobuf:"bytes,6,opt,name=mid,proto3" json:"mid,omitempty"`
	// for audio tracks
	Dtx             bool   `protobuf:"varint,7,opt,name=dtx,proto3" json:"dtx,omitempty"`
	Stereo          bool   `protobuf:"varint,8,opt,name=stereo,proto3" json:"stereo,omitempty"`
	Red             bool   `protobuf:"varint,9,opt,name=red,proto3" json:"red,omitempty"`
	Muted           bool   `protobuf:"varint,10,opt,name=muted,proto3" json:"muted,omitempty"`
	Codec           *Codec `protobuf:"bytes,11,opt,name=codec,proto3" json:"codec,omitempty"`
	PublishOptionId int32  `protobuf:"varint,12,opt,name=publish_option_id,json=publishOptionId,proto3" json:"publish_option_id,omitempty"`
}

func (x *TrackInfo) Reset() {
	*x = TrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackInfo) ProtoMessage() {}

func (x *TrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackInfo.ProtoReflect.Descriptor instead.
func (*TrackInfo) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{12}
}

func (x *TrackInfo) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *TrackInfo) GetTrackType() TrackType {
	if x != nil {
		return x.TrackType
	}
	return TrackType_TRACK_TYPE_UNSPECIFIED
}

func (x *TrackInfo) GetLayers() []*VideoLayer {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *TrackInfo) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *TrackInfo) GetDtx() bool {
	if x != nil {
		return x.Dtx
	}
	return false
}

func (x *TrackInfo) GetStereo() bool {
	if x != nil {
		return x.Stereo
	}
	return false
}

func (x *TrackInfo) GetRed() bool {
	if x != nil {
		return x.Red
	}
	return false
}

func (x *TrackInfo) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *TrackInfo) GetCodec() *Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *TrackInfo) GetPublishOptionId() int32 {
	if x != nil {
		return x.PublishOptionId
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=stream.video.sfu.models.ErrorCode" json:"code,omitempty"`
	Message     string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ShouldRetry bool      `protobuf:"varint,3,opt,name=should_retry,json=shouldRetry,proto3" json:"should_retry,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{13}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetShouldRetry() bool {
	if x != nil {
		return x.ShouldRetry
	}
	return false
}

type ClientDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdk     *Sdk     `protobuf:"bytes,1,opt,name=sdk,proto3" json:"sdk,omitempty"`
	Os      *OS      `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Browser *Browser `protobuf:"bytes,3,opt,name=browser,proto3" json:"browser,omitempty"`
	Device  *Device  `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *ClientDetails) Reset() {
	*x = ClientDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDetails) ProtoMessage() {}

func (x *ClientDetails) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDetails.ProtoReflect.Descriptor instead.
func (*ClientDetails) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{14}
}

func (x *ClientDetails) GetSdk() *Sdk {
	if x != nil {
		return x.Sdk
	}
	return nil
}

func (x *ClientDetails) GetOs() *OS {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *ClientDetails) GetBrowser() *Browser {
	if x != nil {
		return x.Browser
	}
	return nil
}

func (x *ClientDetails) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type Sdk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  SdkType `protobuf:"varint,1,opt,name=type,proto3,enum=stream.video.sfu.models.SdkType" json:"type,omitempty"`
	Major string  `protobuf:"bytes,2,opt,name=major,proto3" json:"major,omitempty"`
	Minor string  `protobuf:"bytes,3,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch string  `protobuf:"bytes,4,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *Sdk) Reset() {
	*x = Sdk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sdk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sdk) ProtoMessage() {}

func (x *Sdk) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sdk.ProtoReflect.Descriptor instead.
func (*Sdk) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{15}
}

func (x *Sdk) GetType() SdkType {
	if x != nil {
		return x.Type
	}
	return SdkType_SDK_TYPE_UNSPECIFIED
}

func (x *Sdk) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

func (x *Sdk) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

func (x *Sdk) GetPatch() string {
	if x != nil {
		return x.Patch
	}
	return ""
}

type OS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Architecture string `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
}

func (x *OS) Reset() {
	*x = OS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OS) ProtoMessage() {}

func (x *OS) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OS.ProtoReflect.Descriptor instead.
func (*OS) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{16}
}

func (x *OS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OS) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OS) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

type Browser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Browser) Reset() {
	*x = Browser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Browser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Browser) ProtoMessage() {}

func (x *Browser) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Browser.ProtoReflect.Descriptor instead.
func (*Browser) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{17}
}

func (x *Browser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Browser) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type RTMPIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Video dimensions and frame rate
	Width     uint32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height    uint32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	FrameRate float64 `protobuf:"fixed64,3,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// Client info
	Software string `protobuf:"bytes,4,opt,name=software,proto3" json:"software,omitempty"` // e.g. "obs-studio"
	Version  string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`   // e.g. "29.1.3"
	Encoder  string `protobuf:"bytes,6,opt,name=encoder,proto3" json:"encoder,omitempty"`   // e.g. "x264" or "NVIDIA NVENC"
	// Connection info
	RemoteAddr string `protobuf:"bytes,7,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
}

func (x *RTMPIngress) Reset() {
	*x = RTMPIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTMPIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTMPIngress) ProtoMessage() {}

func (x *RTMPIngress) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTMPIngress.ProtoReflect.Descriptor instead.
func (*RTMPIngress) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{18}
}

func (x *RTMPIngress) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RTMPIngress) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RTMPIngress) GetFrameRate() float64 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

func (x *RTMPIngress) GetSoftware() string {
	if x != nil {
		return x.Software
	}
	return ""
}

func (x *RTMPIngress) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RTMPIngress) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

func (x *RTMPIngress) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{19}
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the call type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// the call id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// the id of the user that created this call
	CreatedByUserId string `protobuf:"bytes,3,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// the id of the current host for this call
	HostUserId string                 `protobuf:"bytes,4,opt,name=host_user_id,json=hostUserId,proto3" json:"host_user_id,omitempty"`
	Custom     *structpb.Struct       `protobuf:"bytes,5,opt,name=custom,proto3" json:"custom,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{20}
}

func (x *Call) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Call) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Call) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *Call) GetHostUserId() string {
	if x != nil {
		return x.HostUserId
	}
	return ""
}

func (x *Call) GetCustom() *structpb.Struct {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *Call) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Call) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// CallGrants represents the set of permissions given
// to the user for the current call.
type CallGrants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanPublishAudio bool `protobuf:"varint,1,opt,name=can_publish_audio,json=canPublishAudio,proto3" json:"can_publish_audio,omitempty"`
	CanPublishVideo bool `protobuf:"varint,2,opt,name=can_publish_video,json=canPublishVideo,proto3" json:"can_publish_video,omitempty"`
	CanScreenshare  bool `protobuf:"varint,3,opt,name=can_screenshare,json=canScreenshare,proto3" json:"can_screenshare,omitempty"`
}

func (x *CallGrants) Reset() {
	*x = CallGrants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallGrants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallGrants) ProtoMessage() {}

func (x *CallGrants) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallGrants.ProtoReflect.Descriptor instead.
func (*CallGrants) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{21}
}

func (x *CallGrants) GetCanPublishAudio() bool {
	if x != nil {
		return x.CanPublishAudio
	}
	return false
}

func (x *CallGrants) GetCanPublishVideo() bool {
	if x != nil {
		return x.CanPublishVideo
	}
	return false
}

func (x *CallGrants) GetCanScreenshare() bool {
	if x != nil {
		return x.CanScreenshare
	}
	return false
}

type InputDevices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableDevices []string `protobuf:"bytes,1,rep,name=available_devices,json=availableDevices,proto3" json:"available_devices,omitempty"`
	CurrentDevice    string   `protobuf:"bytes,2,opt,name=current_device,json=currentDevice,proto3" json:"current_device,omitempty"`
	IsPermitted      bool     `protobuf:"varint,3,opt,name=is_permitted,json=isPermitted,proto3" json:"is_permitted,omitempty"`
}

func (x *InputDevices) Reset() {
	*x = InputDevices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDevices) ProtoMessage() {}

func (x *InputDevices) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDevices.ProtoReflect.Descriptor instead.
func (*InputDevices) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{22}
}

func (x *InputDevices) GetAvailableDevices() []string {
	if x != nil {
		return x.AvailableDevices
	}
	return nil
}

func (x *InputDevices) GetCurrentDevice() string {
	if x != nil {
		return x.CurrentDevice
	}
	return ""
}

func (x *InputDevices) GetIsPermitted() bool {
	if x != nil {
		return x.IsPermitted
	}
	return false
}

type AndroidState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermalState     AndroidThermalState `protobuf:"varint,1,opt,name=thermal_state,json=thermalState,proto3,enum=stream.video.sfu.models.AndroidThermalState" json:"thermal_state,omitempty"`
	IsPowerSaverMode bool                `protobuf:"varint,2,opt,name=is_power_saver_mode,json=isPowerSaverMode,proto3" json:"is_power_saver_mode,omitempty"`
}

func (x *AndroidState) Reset() {
	*x = AndroidState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidState) ProtoMessage() {}

func (x *AndroidState) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidState.ProtoReflect.Descriptor instead.
func (*AndroidState) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{23}
}

func (x *AndroidState) GetThermalState() AndroidThermalState {
	if x != nil {
		return x.ThermalState
	}
	return AndroidThermalState_ANDROID_THERMAL_STATE_UNSPECIFIED
}

func (x *AndroidState) GetIsPowerSaverMode() bool {
	if x != nil {
		return x.IsPowerSaverMode
	}
	return false
}

type AppleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermalState AppleThermalState `protobuf:"varint,1,opt,name=thermal_state,json=thermalState,proto3,enum=stream.video.sfu.models.AppleThermalState" json:"thermal_state,omitempty"`
	// https://developer.apple.com/documentation/foundation/processinfo/1617047-islowpowermodeenabled
	IsLowPowerModeEnabled bool `protobuf:"varint,2,opt,name=is_low_power_mode_enabled,json=isLowPowerModeEnabled,proto3" json:"is_low_power_mode_enabled,omitempty"`
}

func (x *AppleState) Reset() {
	*x = AppleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleState) ProtoMessage() {}

func (x *AppleState) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleState.ProtoReflect.Descriptor instead.
func (*AppleState) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{24}
}

func (x *AppleState) GetThermalState() AppleThermalState {
	if x != nil {
		return x.ThermalState
	}
	return AppleThermalState_APPLE_THERMAL_STATE_UNSPECIFIED
}

func (x *AppleState) GetIsLowPowerModeEnabled() bool {
	if x != nil {
		return x.IsLowPowerModeEnabled
	}
	return false
}

// PerformanceStats represents the encoding/decoding statistics for a track.
type PerformanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the type of the track (e.g., video, audio, screen share)
	TrackType TrackType `protobuf:"varint,1,opt,name=track_type,json=trackType,proto3,enum=stream.video.sfu.models.TrackType" json:"track_type,omitempty"`
	// the codec used for the track
	Codec *Codec `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	// the average encode/decode time in ms
	AvgFrameTimeMs float32 `protobuf:"fixed32,3,opt,name=avg_frame_time_ms,json=avgFrameTimeMs,proto3" json:"avg_frame_time_ms,omitempty"`
	// the average fps for the track
	AvgFps float32 `protobuf:"fixed32,4,opt,name=avg_fps,json=avgFps,proto3" json:"avg_fps,omitempty"`
	// the track dimensions
	VideoDimension *VideoDimension `protobuf:"bytes,5,opt,name=video_dimension,json=videoDimension,proto3" json:"video_dimension,omitempty"`
	// the target bitrate for the track, only for published tracks
	TargetBitrate int32 `protobuf:"varint,6,opt,name=target_bitrate,json=targetBitrate,proto3" json:"target_bitrate,omitempty"`
}

func (x *PerformanceStats) Reset() {
	*x = PerformanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceStats) ProtoMessage() {}

func (x *PerformanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceStats.ProtoReflect.Descriptor instead.
func (*PerformanceStats) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{25}
}

func (x *PerformanceStats) GetTrackType() TrackType {
	if x != nil {
		return x.TrackType
	}
	return TrackType_TRACK_TYPE_UNSPECIFIED
}

func (x *PerformanceStats) GetCodec() *Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *PerformanceStats) GetAvgFrameTimeMs() float32 {
	if x != nil {
		return x.AvgFrameTimeMs
	}
	return 0
}

func (x *PerformanceStats) GetAvgFps() float32 {
	if x != nil {
		return x.AvgFps
	}
	return 0
}

func (x *PerformanceStats) GetVideoDimension() *VideoDimension {
	if x != nil {
		return x.VideoDimension
	}
	return nil
}

func (x *PerformanceStats) GetTargetBitrate() int32 {
	if x != nil {
		return x.TargetBitrate
	}
	return 0
}

var File_video_sfu_models_models_proto protoreflect.FileDescriptor

var file_video_sfu_models_models_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x02, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x52, 0x04,
	0x70, 0x69, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x03,
	0x50, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xff, 0x04, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x59, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x74, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a,
	0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66,
	0x70, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x73, 0x22, 0xfb, 0x03, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61,
	0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6d, 0x74, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x6d, 0x74, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x49, 0x43, 0x45, 0x54, 0x72, 0x69,
	0x63, 0x6b, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x64, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x64, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x53, 0x64, 0x6b, 0x52, 0x03, 0x73, 0x64, 0x6b, 0x12, 0x2b, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x7d, 0x0a, 0x03, 0x53,
	0x64, 0x6b, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x64, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x56, 0x0a, 0x02, 0x4f, 0x53,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x37, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x0b,
	0x52, 0x54, 0x4d, 0x50, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x36, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x61, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x61, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x0c, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a,
	0x0d, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f,
	0x0a, 0x0d, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67, 0x46, 0x70, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x2a, 0x49, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x01, 0x2a,
	0x93, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x4f, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x4f, 0x4f,
	0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x2a, 0x93,
	0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x10, 0x04, 0x2a, 0xcd, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x57, 0x45, 0x42, 0x52, 0x54, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49,
	0x50, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x54, 0x4d, 0x50,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e,
	0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x50, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x50, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x52, 0x54, 0x53, 0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53,
	0x52, 0x54, 0x10, 0x05, 0x2a, 0xa7, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x30,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x42, 0x49, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x42, 0x49, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01,
	0x12, 0x2c, 0x0a, 0x28, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x42, 0x49, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x2a, 0xea,
	0x06, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x64,
	0x12, 0x26, 0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x5f, 0x4d, 0x49,
	0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x10, 0x66, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x67, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x68, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc8, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50,
	0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0xc9, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4d,
	0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0xca, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x47,
	0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0xcb, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50,
	0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e,
	0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0xcd, 0x01, 0x12, 0x27, 0x0a, 0x22,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x4f,
	0x53, 0x54, 0x10, 0xce, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0xac, 0x02, 0x12, 0x2e, 0x0a, 0x29, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49,
	0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x10, 0xad, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x90, 0x03,
	0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x91,
	0x03, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x93, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x10, 0xad, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x21,
	0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x46, 0x55,
	0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xd8,
	0x04, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x46, 0x55, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0xbc, 0x05, 0x2a, 0xea, 0x01, 0x0a, 0x07,
	0x53, 0x64, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x44, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x44, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x44, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4e, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x44, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x44, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4f,
	0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x44, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4c, 0x55, 0x54, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x44, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x44, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x44, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x44, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x56, 0x41,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x09, 0x2a, 0xbb, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41,
	0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x0c, 0x47, 0x6f, 0x41, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x4f, 0x5f, 0x41, 0x57, 0x41,
	0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x4f, 0x5f, 0x41, 0x57, 0x41,
	0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x4f, 0x5f, 0x41,
	0x57, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x2a, 0xb6, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0xf1, 0x01, 0x0a, 0x1a, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c,
	0x0a, 0x28, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27,
	0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x45, 0x42,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x27, 0x0a, 0x23, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59,
	0x5f, 0x52, 0x45, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x45, 0x42,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x04, 0x2a, 0xb0, 0x02, 0x0a, 0x13, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x48,
	0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x48,
	0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54,
	0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4e, 0x44, 0x52, 0x4f,
	0x49, 0x44, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4e, 0x44,
	0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x48,
	0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x2a, 0xba, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x52,
	0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x52, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x4d,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x04, 0x2a, 0x63, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x01, 0x42, 0x65, 0x42, 0x0b, 0x53, 0x66, 0x75, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0xaa, 0x02, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x66, 0x75, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_sfu_models_models_proto_rawDescOnce sync.Once
	file_video_sfu_models_models_proto_rawDescData = file_video_sfu_models_models_proto_rawDesc
)

func file_video_sfu_models_models_proto_rawDescGZIP() []byte {
	file_video_sfu_models_models_proto_rawDescOnce.Do(func() {
		file_video_sfu_models_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_sfu_models_models_proto_rawDescData)
	})
	return file_video_sfu_models_models_proto_rawDescData
}

var file_video_sfu_models_models_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_video_sfu_models_models_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_video_sfu_models_models_proto_goTypes = []interface{}{
	(PeerType)(0),                   // 0: stream.video.sfu.models.PeerType
	(ConnectionQuality)(0),          // 1: stream.video.sfu.models.ConnectionQuality
	(VideoQuality)(0),               // 2: stream.video.sfu.models.VideoQuality
	(TrackType)(0),                  // 3: stream.video.sfu.models.TrackType
	(ParticipantSource)(0),          // 4: stream.video.sfu.models.ParticipantSource
	(AudioBitrateProfile)(0),        // 5: stream.video.sfu.models.AudioBitrateProfile
	(ErrorCode)(0),                  // 6: stream.video.sfu.models.ErrorCode
	(SdkType)(0),                    // 7: stream.video.sfu.models.SdkType
	(TrackUnpublishReason)(0),       // 8: stream.video.sfu.models.TrackUnpublishReason
	(GoAwayReason)(0),               // 9: stream.video.sfu.models.GoAwayReason
	(CallEndedReason)(0),            // 10: stream.video.sfu.models.CallEndedReason
	(WebsocketReconnectStrategy)(0), // 11: stream.video.sfu.models.WebsocketReconnectStrategy
	(AndroidThermalState)(0),        // 12: stream.video.sfu.models.AndroidThermalState
	(AppleThermalState)(0),          // 13: stream.video.sfu.models.AppleThermalState
	(ClientCapability)(0),           // 14: stream.video.sfu.models.ClientCapability
	(*CallState)(nil),               // 15: stream.video.sfu.models.CallState
	(*ParticipantCount)(nil),        // 16: stream.video.sfu.models.ParticipantCount
	(*Pin)(nil),                     // 17: stream.video.sfu.models.Pin
	(*Participant)(nil),             // 18: stream.video.sfu.models.Participant
	(*StreamQuality)(nil),           // 19: stream.video.sfu.models.StreamQuality
	(*VideoDimension)(nil),          // 20: stream.video.sfu.models.VideoDimension
	(*VideoLayer)(nil),              // 21: stream.video.sfu.models.VideoLayer
	(*SubscribeOption)(nil),         // 22: stream.video.sfu.models.SubscribeOption
	(*PublishOption)(nil),           // 23: stream.video.sfu.models.PublishOption
	(*Codec)(nil),                   // 24: stream.video.sfu.models.Codec
	(*ICETrickle)(nil),              // 25: stream.video.sfu.models.ICETrickle
	(*AudioBitrate)(nil),            // 26: stream.video.sfu.models.AudioBitrate
	(*TrackInfo)(nil),               // 27: stream.video.sfu.models.TrackInfo
	(*Error)(nil),                   // 28: stream.video.sfu.models.Error
	(*ClientDetails)(nil),           // 29: stream.video.sfu.models.ClientDetails
	(*Sdk)(nil),                     // 30: stream.video.sfu.models.Sdk
	(*OS)(nil),                      // 31: stream.video.sfu.models.OS
	(*Browser)(nil),                 // 32: stream.video.sfu.models.Browser
	(*RTMPIngress)(nil),             // 33: stream.video.sfu.models.RTMPIngress
	(*Device)(nil),                  // 34: stream.video.sfu.models.Device
	(*Call)(nil),                    // 35: stream.video.sfu.models.Call
	(*CallGrants)(nil),              // 36: stream.video.sfu.models.CallGrants
	(*InputDevices)(nil),            // 37: stream.video.sfu.models.InputDevices
	(*AndroidState)(nil),            // 38: stream.video.sfu.models.AndroidState
	(*AppleState)(nil),              // 39: stream.video.sfu.models.AppleState
	(*PerformanceStats)(nil),        // 40: stream.video.sfu.models.PerformanceStats
	(*timestamppb.Timestamp)(nil),   // 41: google.protobuf.Timestamp
	(*structpb.Struct)(nil),         // 42: google.protobuf.Struct
}
var file_video_sfu_models_models_proto_depIdxs = []int32{
	18, // 0: stream.video.sfu.models.CallState.participants:type_name -> stream.video.sfu.models.Participant
	41, // 1: stream.video.sfu.models.CallState.started_at:type_name -> google.protobuf.Timestamp
	16, // 2: stream.video.sfu.models.CallState.participant_count:type_name -> stream.video.sfu.models.ParticipantCount
	17, // 3: stream.video.sfu.models.CallState.pins:type_name -> stream.video.sfu.models.Pin
	3,  // 4: stream.video.sfu.models.Participant.published_tracks:type_name -> stream.video.sfu.models.TrackType
	41, // 5: stream.video.sfu.models.Participant.joined_at:type_name -> google.protobuf.Timestamp
	1,  // 6: stream.video.sfu.models.Participant.connection_quality:type_name -> stream.video.sfu.models.ConnectionQuality
	42, // 7: stream.video.sfu.models.Participant.custom:type_name -> google.protobuf.Struct
	4,  // 8: stream.video.sfu.models.Participant.source:type_name -> stream.video.sfu.models.ParticipantSource
	2,  // 9: stream.video.sfu.models.StreamQuality.video_quality:type_name -> stream.video.sfu.models.VideoQuality
	20, // 10: stream.video.sfu.models.VideoLayer.video_dimension:type_name -> stream.video.sfu.models.VideoDimension
	2,  // 11: stream.video.sfu.models.VideoLayer.quality:type_name -> stream.video.sfu.models.VideoQuality
	3,  // 12: stream.video.sfu.models.SubscribeOption.track_type:type_name -> stream.video.sfu.models.TrackType
	24, // 13: stream.video.sfu.models.SubscribeOption.codecs:type_name -> stream.video.sfu.models.Codec
	3,  // 14: stream.video.sfu.models.PublishOption.track_type:type_name -> stream.video.sfu.models.TrackType
	24, // 15: stream.video.sfu.models.PublishOption.codec:type_name -> stream.video.sfu.models.Codec
	20, // 16: stream.video.sfu.models.PublishOption.video_dimension:type_name -> stream.video.sfu.models.VideoDimension
	26, // 17: stream.video.sfu.models.PublishOption.audio_bitrate_profiles:type_name -> stream.video.sfu.models.AudioBitrate
	0,  // 18: stream.video.sfu.models.ICETrickle.peer_type:type_name -> stream.video.sfu.models.PeerType
	5,  // 19: stream.video.sfu.models.AudioBitrate.profile:type_name -> stream.video.sfu.models.AudioBitrateProfile
	3,  // 20: stream.video.sfu.models.TrackInfo.track_type:type_name -> stream.video.sfu.models.TrackType
	21, // 21: stream.video.sfu.models.TrackInfo.layers:type_name -> stream.video.sfu.models.VideoLayer
	24, // 22: stream.video.sfu.models.TrackInfo.codec:type_name -> stream.video.sfu.models.Codec
	6,  // 23: stream.video.sfu.models.Error.code:type_name -> stream.video.sfu.models.ErrorCode
	30, // 24: stream.video.sfu.models.ClientDetails.sdk:type_name -> stream.video.sfu.models.Sdk
	31, // 25: stream.video.sfu.models.ClientDetails.os:type_name -> stream.video.sfu.models.OS
	32, // 26: stream.video.sfu.models.ClientDetails.browser:type_name -> stream.video.sfu.models.Browser
	34, // 27: stream.video.sfu.models.ClientDetails.device:type_name -> stream.video.sfu.models.Device
	7,  // 28: stream.video.sfu.models.Sdk.type:type_name -> stream.video.sfu.models.SdkType
	42, // 29: stream.video.sfu.models.Call.custom:type_name -> google.protobuf.Struct
	41, // 30: stream.video.sfu.models.Call.created_at:type_name -> google.protobuf.Timestamp
	41, // 31: stream.video.sfu.models.Call.updated_at:type_name -> google.protobuf.Timestamp
	12, // 32: stream.video.sfu.models.AndroidState.thermal_state:type_name -> stream.video.sfu.models.AndroidThermalState
	13, // 33: stream.video.sfu.models.AppleState.thermal_state:type_name -> stream.video.sfu.models.AppleThermalState
	3,  // 34: stream.video.sfu.models.PerformanceStats.track_type:type_name -> stream.video.sfu.models.TrackType
	24, // 35: stream.video.sfu.models.PerformanceStats.codec:type_name -> stream.video.sfu.models.Codec
	20, // 36: stream.video.sfu.models.PerformanceStats.video_dimension:type_name -> stream.video.sfu.models.VideoDimension
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_video_sfu_models_models_proto_init() }
func file_video_sfu_models_models_proto_init() {
	if File_video_sfu_models_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_sfu_models_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Codec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICETrickle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioBitrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sdk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Browser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTMPIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallGrants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputDevices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_sfu_models_models_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_sfu_models_models_proto_goTypes,
		DependencyIndexes: file_video_sfu_models_models_proto_depIdxs,
		EnumInfos:         file_video_sfu_models_models_proto_enumTypes,
		MessageInfos:      file_video_sfu_models_models_proto_msgTypes,
	}.Build()
	File_video_sfu_models_models_proto = out.File
	file_video_sfu_models_models_proto_rawDesc = nil
	file_video_sfu_models_models_proto_goTypes = nil
	file_video_sfu_models_models_proto_depIdxs = nil
}
