// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: video/sfu/models/models.proto

package sfu_models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerType int32

const (
	// todo fix me (marcelo)
	PeerType_PEER_TYPE_PUBLISHER_UNSPECIFIED PeerType = 0
	PeerType_PEER_TYPE_SUBSCRIBER            PeerType = 1
)

// Enum value maps for PeerType.
var (
	PeerType_name = map[int32]string{
		0: "PEER_TYPE_PUBLISHER_UNSPECIFIED",
		1: "PEER_TYPE_SUBSCRIBER",
	}
	PeerType_value = map[string]int32{
		"PEER_TYPE_PUBLISHER_UNSPECIFIED": 0,
		"PEER_TYPE_SUBSCRIBER":            1,
	}
)

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[0].Descriptor()
}

func (PeerType) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[0]
}

func (x PeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerType.Descriptor instead.
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{0}
}

type ConnectionQuality int32

const (
	ConnectionQuality_CONNECTION_QUALITY_UNSPECIFIED ConnectionQuality = 0
	ConnectionQuality_CONNECTION_QUALITY_POOR        ConnectionQuality = 1
	ConnectionQuality_CONNECTION_QUALITY_GOOD        ConnectionQuality = 2
	ConnectionQuality_CONNECTION_QUALITY_EXCELLENT   ConnectionQuality = 3
)

// Enum value maps for ConnectionQuality.
var (
	ConnectionQuality_name = map[int32]string{
		0: "CONNECTION_QUALITY_UNSPECIFIED",
		1: "CONNECTION_QUALITY_POOR",
		2: "CONNECTION_QUALITY_GOOD",
		3: "CONNECTION_QUALITY_EXCELLENT",
	}
	ConnectionQuality_value = map[string]int32{
		"CONNECTION_QUALITY_UNSPECIFIED": 0,
		"CONNECTION_QUALITY_POOR":        1,
		"CONNECTION_QUALITY_GOOD":        2,
		"CONNECTION_QUALITY_EXCELLENT":   3,
	}
)

func (x ConnectionQuality) Enum() *ConnectionQuality {
	p := new(ConnectionQuality)
	*p = x
	return p
}

func (x ConnectionQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[1].Descriptor()
}

func (ConnectionQuality) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[1]
}

func (x ConnectionQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionQuality.Descriptor instead.
func (ConnectionQuality) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{1}
}

type VideoQuality int32

const (
	VideoQuality_VIDEO_QUALITY_LOW_UNSPECIFIED VideoQuality = 0
	VideoQuality_VIDEO_QUALITY_MID             VideoQuality = 1
	VideoQuality_VIDEO_QUALITY_HIGH            VideoQuality = 2
	VideoQuality_VIDEO_QUALITY_OFF             VideoQuality = 3
)

// Enum value maps for VideoQuality.
var (
	VideoQuality_name = map[int32]string{
		0: "VIDEO_QUALITY_LOW_UNSPECIFIED",
		1: "VIDEO_QUALITY_MID",
		2: "VIDEO_QUALITY_HIGH",
		3: "VIDEO_QUALITY_OFF",
	}
	VideoQuality_value = map[string]int32{
		"VIDEO_QUALITY_LOW_UNSPECIFIED": 0,
		"VIDEO_QUALITY_MID":             1,
		"VIDEO_QUALITY_HIGH":            2,
		"VIDEO_QUALITY_OFF":             3,
	}
)

func (x VideoQuality) Enum() *VideoQuality {
	p := new(VideoQuality)
	*p = x
	return p
}

func (x VideoQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[2].Descriptor()
}

func (VideoQuality) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[2]
}

func (x VideoQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoQuality.Descriptor instead.
func (VideoQuality) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{2}
}

type TrackType int32

const (
	TrackType_TRACK_TYPE_UNSPECIFIED        TrackType = 0
	TrackType_TRACK_TYPE_AUDIO              TrackType = 1
	TrackType_TRACK_TYPE_VIDEO              TrackType = 2
	TrackType_TRACK_TYPE_SCREEN_SHARE       TrackType = 3
	TrackType_TRACK_TYPE_SCREEN_SHARE_AUDIO TrackType = 4
)

// Enum value maps for TrackType.
var (
	TrackType_name = map[int32]string{
		0: "TRACK_TYPE_UNSPECIFIED",
		1: "TRACK_TYPE_AUDIO",
		2: "TRACK_TYPE_VIDEO",
		3: "TRACK_TYPE_SCREEN_SHARE",
		4: "TRACK_TYPE_SCREEN_SHARE_AUDIO",
	}
	TrackType_value = map[string]int32{
		"TRACK_TYPE_UNSPECIFIED":        0,
		"TRACK_TYPE_AUDIO":              1,
		"TRACK_TYPE_VIDEO":              2,
		"TRACK_TYPE_SCREEN_SHARE":       3,
		"TRACK_TYPE_SCREEN_SHARE_AUDIO": 4,
	}
)

func (x TrackType) Enum() *TrackType {
	p := new(TrackType)
	*p = x
	return p
}

func (x TrackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[3].Descriptor()
}

func (TrackType) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[3]
}

func (x TrackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackType.Descriptor instead.
func (TrackType) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{3}
}

type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED                         ErrorCode = 0
	ErrorCode_ERROR_CODE_PUBLISH_TRACK_NOT_FOUND             ErrorCode = 100
	ErrorCode_ERROR_CODE_PUBLISH_TRACKS_MISMATCH             ErrorCode = 101
	ErrorCode_ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER          ErrorCode = 102
	ErrorCode_ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND ErrorCode = 103
	ErrorCode_ERROR_CODE_PARTICIPANT_NOT_FOUND               ErrorCode = 200
	ErrorCode_ERROR_CODE_CALL_NOT_FOUND                      ErrorCode = 300
	ErrorCode_ERROR_CODE_REQUEST_VALIDATION_FAILED           ErrorCode = 400
	ErrorCode_ERROR_CODE_UNAUTHENTICATED                     ErrorCode = 401
	ErrorCode_ERROR_CODE_PERMISSION_DENIED                   ErrorCode = 403
	ErrorCode_ERROR_CODE_TOO_MANY_REQUESTS                   ErrorCode = 429
	ErrorCode_ERROR_CODE_INTERNAL_SERVER_ERROR               ErrorCode = 500
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "ERROR_CODE_UNSPECIFIED",
		100: "ERROR_CODE_PUBLISH_TRACK_NOT_FOUND",
		101: "ERROR_CODE_PUBLISH_TRACKS_MISMATCH",
		102: "ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER",
		103: "ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND",
		200: "ERROR_CODE_PARTICIPANT_NOT_FOUND",
		300: "ERROR_CODE_CALL_NOT_FOUND",
		400: "ERROR_CODE_REQUEST_VALIDATION_FAILED",
		401: "ERROR_CODE_UNAUTHENTICATED",
		403: "ERROR_CODE_PERMISSION_DENIED",
		429: "ERROR_CODE_TOO_MANY_REQUESTS",
		500: "ERROR_CODE_INTERNAL_SERVER_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":                         0,
		"ERROR_CODE_PUBLISH_TRACK_NOT_FOUND":             100,
		"ERROR_CODE_PUBLISH_TRACKS_MISMATCH":             101,
		"ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER":          102,
		"ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND": 103,
		"ERROR_CODE_PARTICIPANT_NOT_FOUND":               200,
		"ERROR_CODE_CALL_NOT_FOUND":                      300,
		"ERROR_CODE_REQUEST_VALIDATION_FAILED":           400,
		"ERROR_CODE_UNAUTHENTICATED":                     401,
		"ERROR_CODE_PERMISSION_DENIED":                   403,
		"ERROR_CODE_TOO_MANY_REQUESTS":                   429,
		"ERROR_CODE_INTERNAL_SERVER_ERROR":               500,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_video_sfu_models_models_proto_enumTypes[4].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_video_sfu_models_models_proto_enumTypes[4]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{4}
}

type CallState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*Participant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *CallState) Reset() {
	*x = CallState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallState) ProtoMessage() {}

func (x *CallState) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallState.ProtoReflect.Descriptor instead.
func (*CallState) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{0}
}

func (x *CallState) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

// those who are online in the call
type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// map of track id to track type
	PublishedTracks   []TrackType            `protobuf:"varint,3,rep,packed,name=published_tracks,json=publishedTracks,proto3,enum=stream.video.sfu.models.TrackType" json:"published_tracks,omitempty"`
	JoinedAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	TrackLookupPrefix string                 `protobuf:"bytes,5,opt,name=track_lookup_prefix,json=trackLookupPrefix,proto3" json:"track_lookup_prefix,omitempty"`
	ConnectionQuality ConnectionQuality      `protobuf:"varint,6,opt,name=connection_quality,json=connectionQuality,proto3,enum=stream.video.sfu.models.ConnectionQuality" json:"connection_quality,omitempty"`
	IsSpeaking        bool                   `protobuf:"varint,7,opt,name=is_speaking,json=isSpeaking,proto3" json:"is_speaking,omitempty"`
	IsDominantSpeaker bool                   `protobuf:"varint,8,opt,name=is_dominant_speaker,json=isDominantSpeaker,proto3" json:"is_dominant_speaker,omitempty"`
	AudioLevel        float32                `protobuf:"fixed32,9,opt,name=audio_level,json=audioLevel,proto3" json:"audio_level,omitempty"`
	Name              string                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Image             string                 `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
	Custom            *structpb.Struct       `protobuf:"bytes,12,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{1}
}

func (x *Participant) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Participant) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Participant) GetPublishedTracks() []TrackType {
	if x != nil {
		return x.PublishedTracks
	}
	return nil
}

func (x *Participant) GetJoinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *Participant) GetTrackLookupPrefix() string {
	if x != nil {
		return x.TrackLookupPrefix
	}
	return ""
}

func (x *Participant) GetConnectionQuality() ConnectionQuality {
	if x != nil {
		return x.ConnectionQuality
	}
	return ConnectionQuality_CONNECTION_QUALITY_UNSPECIFIED
}

func (x *Participant) GetIsSpeaking() bool {
	if x != nil {
		return x.IsSpeaking
	}
	return false
}

func (x *Participant) GetIsDominantSpeaker() bool {
	if x != nil {
		return x.IsDominantSpeaker
	}
	return false
}

func (x *Participant) GetAudioLevel() float32 {
	if x != nil {
		return x.AudioLevel
	}
	return 0
}

func (x *Participant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Participant) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Participant) GetCustom() *structpb.Struct {
	if x != nil {
		return x.Custom
	}
	return nil
}

type StreamQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoQuality VideoQuality `protobuf:"varint,1,opt,name=video_quality,json=videoQuality,proto3,enum=stream.video.sfu.models.VideoQuality" json:"video_quality,omitempty"`
	UserId       string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StreamQuality) Reset() {
	*x = StreamQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamQuality) ProtoMessage() {}

func (x *StreamQuality) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamQuality.ProtoReflect.Descriptor instead.
func (*StreamQuality) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{2}
}

func (x *StreamQuality) GetVideoQuality() VideoQuality {
	if x != nil {
		return x.VideoQuality
	}
	return VideoQuality_VIDEO_QUALITY_LOW_UNSPECIFIED
}

func (x *StreamQuality) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type VideoDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *VideoDimension) Reset() {
	*x = VideoDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDimension) ProtoMessage() {}

func (x *VideoDimension) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDimension.ProtoReflect.Descriptor instead.
func (*VideoDimension) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{3}
}

func (x *VideoDimension) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoDimension) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type VideoLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for tracks with a single layer, this should be HIGH
	Rid            string          `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	VideoDimension *VideoDimension `protobuf:"bytes,2,opt,name=video_dimension,json=videoDimension,proto3" json:"video_dimension,omitempty"`
	// target bitrate, server will measure actual
	Bitrate uint32       `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Fps     uint32       `protobuf:"varint,5,opt,name=fps,proto3" json:"fps,omitempty"`
	Quality VideoQuality `protobuf:"varint,6,opt,name=quality,proto3,enum=stream.video.sfu.models.VideoQuality" json:"quality,omitempty"`
}

func (x *VideoLayer) Reset() {
	*x = VideoLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoLayer) ProtoMessage() {}

func (x *VideoLayer) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoLayer.ProtoReflect.Descriptor instead.
func (*VideoLayer) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{4}
}

func (x *VideoLayer) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *VideoLayer) GetVideoDimension() *VideoDimension {
	if x != nil {
		return x.VideoDimension
	}
	return nil
}

func (x *VideoLayer) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VideoLayer) GetFps() uint32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *VideoLayer) GetQuality() VideoQuality {
	if x != nil {
		return x.Quality
	}
	return VideoQuality_VIDEO_QUALITY_LOW_UNSPECIFIED
}

type Codec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadType        uint32   `protobuf:"varint,1,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FmtpLine           string   `protobuf:"bytes,3,opt,name=fmtp_line,json=fmtpLine,proto3" json:"fmtp_line,omitempty"`
	ClockRate          uint32   `protobuf:"varint,4,opt,name=clock_rate,json=clockRate,proto3" json:"clock_rate,omitempty"`
	EncodingParameters string   `protobuf:"bytes,5,opt,name=encoding_parameters,json=encodingParameters,proto3" json:"encoding_parameters,omitempty"`
	Feedbacks          []string `protobuf:"bytes,6,rep,name=feedbacks,proto3" json:"feedbacks,omitempty"`
}

func (x *Codec) Reset() {
	*x = Codec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Codec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Codec) ProtoMessage() {}

func (x *Codec) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Codec.ProtoReflect.Descriptor instead.
func (*Codec) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{5}
}

func (x *Codec) GetPayloadType() uint32 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *Codec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Codec) GetFmtpLine() string {
	if x != nil {
		return x.FmtpLine
	}
	return ""
}

func (x *Codec) GetClockRate() uint32 {
	if x != nil {
		return x.ClockRate
	}
	return 0
}

func (x *Codec) GetEncodingParameters() string {
	if x != nil {
		return x.EncodingParameters
	}
	return ""
}

func (x *Codec) GetFeedbacks() []string {
	if x != nil {
		return x.Feedbacks
	}
	return nil
}

type ICETrickle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerType     PeerType `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=stream.video.sfu.models.PeerType" json:"peer_type,omitempty"`
	IceCandidate string   `protobuf:"bytes,2,opt,name=ice_candidate,json=iceCandidate,proto3" json:"ice_candidate,omitempty"`
	SessionId    string   `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *ICETrickle) Reset() {
	*x = ICETrickle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICETrickle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICETrickle) ProtoMessage() {}

func (x *ICETrickle) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICETrickle.ProtoReflect.Descriptor instead.
func (*ICETrickle) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{6}
}

func (x *ICETrickle) GetPeerType() PeerType {
	if x != nil {
		return x.PeerType
	}
	return PeerType_PEER_TYPE_PUBLISHER_UNSPECIFIED
}

func (x *ICETrickle) GetIceCandidate() string {
	if x != nil {
		return x.IceCandidate
	}
	return ""
}

func (x *ICETrickle) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type TrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId   string        `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	TrackType TrackType     `protobuf:"varint,2,opt,name=track_type,json=trackType,proto3,enum=stream.video.sfu.models.TrackType" json:"track_type,omitempty"`
	Layers    []*VideoLayer `protobuf:"bytes,5,rep,name=layers,proto3" json:"layers,omitempty"`
	Mid       string        `protobuf:"bytes,6,opt,name=mid,proto3" json:"mid,omitempty"`
	// for audio tracks
	Dtx    bool `protobuf:"varint,7,opt,name=dtx,proto3" json:"dtx,omitempty"`
	Stereo bool `protobuf:"varint,8,opt,name=stereo,proto3" json:"stereo,omitempty"`
	Red    bool `protobuf:"varint,9,opt,name=red,proto3" json:"red,omitempty"`
}

func (x *TrackInfo) Reset() {
	*x = TrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackInfo) ProtoMessage() {}

func (x *TrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackInfo.ProtoReflect.Descriptor instead.
func (*TrackInfo) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{7}
}

func (x *TrackInfo) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *TrackInfo) GetTrackType() TrackType {
	if x != nil {
		return x.TrackType
	}
	return TrackType_TRACK_TYPE_UNSPECIFIED
}

func (x *TrackInfo) GetLayers() []*VideoLayer {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *TrackInfo) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *TrackInfo) GetDtx() bool {
	if x != nil {
		return x.Dtx
	}
	return false
}

func (x *TrackInfo) GetStereo() bool {
	if x != nil {
		return x.Stereo
	}
	return false
}

func (x *TrackInfo) GetRed() bool {
	if x != nil {
		return x.Red
	}
	return false
}

// todo remove this
type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the call type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// the call id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// the id of the user that created this call
	CreatedByUserId string `protobuf:"bytes,3,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// the id of the current host for this call
	HostUserId string                 `protobuf:"bytes,4,opt,name=host_user_id,json=hostUserId,proto3" json:"host_user_id,omitempty"`
	Custom     *structpb.Struct       `protobuf:"bytes,5,opt,name=custom,proto3" json:"custom,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{8}
}

func (x *Call) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Call) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Call) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *Call) GetHostUserId() string {
	if x != nil {
		return x.HostUserId
	}
	return ""
}

func (x *Call) GetCustom() *structpb.Struct {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *Call) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Call) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=stream.video.sfu.models.ErrorCode" json:"code,omitempty"`
	Message     string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ShouldRetry bool      `protobuf:"varint,3,opt,name=should_retry,json=shouldRetry,proto3" json:"should_retry,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{9}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetShouldRetry() bool {
	if x != nil {
		return x.ShouldRetry
	}
	return false
}

type ClientDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Os      string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Browser string `protobuf:"bytes,3,opt,name=browser,proto3" json:"browser,omitempty"`
}

func (x *ClientDetails) Reset() {
	*x = ClientDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_models_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDetails) ProtoMessage() {}

func (x *ClientDetails) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_models_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDetails.ProtoReflect.Descriptor instead.
func (*ClientDetails) Descriptor() ([]byte, []int) {
	return file_video_sfu_models_models_proto_rawDescGZIP(), []int{10}
}

func (x *ClientDetails) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ClientDetails) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *ClientDetails) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

var File_video_sfu_models_models_proto protoreflect.FileDescriptor

var file_video_sfu_models_models_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xa5,
	0x04, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x59,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xdd, 0x01, 0x0a,
	0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x50, 0x0a,
	0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xc9, 0x01, 0x0a,
	0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6d, 0x74, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6d, 0x74, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x49, 0x43, 0x45,
	0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70,
	0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x74, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72,
	0x65, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7c, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2a, 0x49, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45,
	0x52, 0x10, 0x01, 0x2a, 0x93, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x0c, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x03, 0x2a, 0x93, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x04, 0x2a, 0xd6, 0x03, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x66, 0x12, 0x32, 0x0a,
	0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x67, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc8, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xac, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x90, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x91, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0xad, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4,
	0x03, 0x42, 0x31, 0x42, 0x0b, 0x53, 0x66, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x56, 0x31,
	0x50, 0x01, 0x5a, 0x0a, 0x73, 0x66, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xaa, 0x02,
	0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x66, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_sfu_models_models_proto_rawDescOnce sync.Once
	file_video_sfu_models_models_proto_rawDescData = file_video_sfu_models_models_proto_rawDesc
)

func file_video_sfu_models_models_proto_rawDescGZIP() []byte {
	file_video_sfu_models_models_proto_rawDescOnce.Do(func() {
		file_video_sfu_models_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_sfu_models_models_proto_rawDescData)
	})
	return file_video_sfu_models_models_proto_rawDescData
}

var file_video_sfu_models_models_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_video_sfu_models_models_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_video_sfu_models_models_proto_goTypes = []interface{}{
	(PeerType)(0),                 // 0: stream.video.sfu.models.PeerType
	(ConnectionQuality)(0),        // 1: stream.video.sfu.models.ConnectionQuality
	(VideoQuality)(0),             // 2: stream.video.sfu.models.VideoQuality
	(TrackType)(0),                // 3: stream.video.sfu.models.TrackType
	(ErrorCode)(0),                // 4: stream.video.sfu.models.ErrorCode
	(*CallState)(nil),             // 5: stream.video.sfu.models.CallState
	(*Participant)(nil),           // 6: stream.video.sfu.models.Participant
	(*StreamQuality)(nil),         // 7: stream.video.sfu.models.StreamQuality
	(*VideoDimension)(nil),        // 8: stream.video.sfu.models.VideoDimension
	(*VideoLayer)(nil),            // 9: stream.video.sfu.models.VideoLayer
	(*Codec)(nil),                 // 10: stream.video.sfu.models.Codec
	(*ICETrickle)(nil),            // 11: stream.video.sfu.models.ICETrickle
	(*TrackInfo)(nil),             // 12: stream.video.sfu.models.TrackInfo
	(*Call)(nil),                  // 13: stream.video.sfu.models.Call
	(*Error)(nil),                 // 14: stream.video.sfu.models.Error
	(*ClientDetails)(nil),         // 15: stream.video.sfu.models.ClientDetails
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 17: google.protobuf.Struct
}
var file_video_sfu_models_models_proto_depIdxs = []int32{
	6,  // 0: stream.video.sfu.models.CallState.participants:type_name -> stream.video.sfu.models.Participant
	3,  // 1: stream.video.sfu.models.Participant.published_tracks:type_name -> stream.video.sfu.models.TrackType
	16, // 2: stream.video.sfu.models.Participant.joined_at:type_name -> google.protobuf.Timestamp
	1,  // 3: stream.video.sfu.models.Participant.connection_quality:type_name -> stream.video.sfu.models.ConnectionQuality
	17, // 4: stream.video.sfu.models.Participant.custom:type_name -> google.protobuf.Struct
	2,  // 5: stream.video.sfu.models.StreamQuality.video_quality:type_name -> stream.video.sfu.models.VideoQuality
	8,  // 6: stream.video.sfu.models.VideoLayer.video_dimension:type_name -> stream.video.sfu.models.VideoDimension
	2,  // 7: stream.video.sfu.models.VideoLayer.quality:type_name -> stream.video.sfu.models.VideoQuality
	0,  // 8: stream.video.sfu.models.ICETrickle.peer_type:type_name -> stream.video.sfu.models.PeerType
	3,  // 9: stream.video.sfu.models.TrackInfo.track_type:type_name -> stream.video.sfu.models.TrackType
	9,  // 10: stream.video.sfu.models.TrackInfo.layers:type_name -> stream.video.sfu.models.VideoLayer
	17, // 11: stream.video.sfu.models.Call.custom:type_name -> google.protobuf.Struct
	16, // 12: stream.video.sfu.models.Call.created_at:type_name -> google.protobuf.Timestamp
	16, // 13: stream.video.sfu.models.Call.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 14: stream.video.sfu.models.Error.code:type_name -> stream.video.sfu.models.ErrorCode
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_video_sfu_models_models_proto_init() }
func file_video_sfu_models_models_proto_init() {
	if File_video_sfu_models_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_sfu_models_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Codec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICETrickle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_models_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_sfu_models_models_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_sfu_models_models_proto_goTypes,
		DependencyIndexes: file_video_sfu_models_models_proto_depIdxs,
		EnumInfos:         file_video_sfu_models_models_proto_enumTypes,
		MessageInfos:      file_video_sfu_models_models_proto_msgTypes,
	}.Build()
	File_video_sfu_models_models_proto = out.File
	file_video_sfu_models_models_proto_rawDesc = nil
	file_video_sfu_models_models_proto_goTypes = nil
	file_video_sfu_models_models_proto_depIdxs = nil
}
