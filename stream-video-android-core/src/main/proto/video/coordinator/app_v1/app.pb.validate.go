// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/coordinator/app_v1/app.proto

package app_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetWebhook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGeofences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Geofences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Geofences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  fmt.Sprintf("Geofences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on WebhookSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WebhookSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebhookSettingsMultiError, or nil if none found.
func (m *WebhookSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebhookSettingsValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebhookSettingsValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebhookSettingsValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSqs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebhookSettingsValidationError{
					field:  "Sqs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebhookSettingsValidationError{
					field:  "Sqs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSqs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebhookSettingsValidationError{
				field:  "Sqs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebhookSettingsMultiError(errors)
	}

	return nil
}

// WebhookSettingsMultiError is an error wrapping multiple validation errors
// returned by WebhookSettings.ValidateAll() if the designated constraints
// aren't met.
type WebhookSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookSettingsMultiError) AllErrors() []error { return m }

// WebhookSettingsValidationError is the validation error returned by
// WebhookSettings.Validate if the designated constraints aren't met.
type WebhookSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookSettingsValidationError) ErrorName() string { return "WebhookSettingsValidationError" }

// Error satisfies the builtin error interface
func (e WebhookSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookSettingsValidationError{}

// Validate checks the field values on HttpWebhook with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HttpWebhook) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpWebhook with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HttpWebhookMultiError, or
// nil if none found.
func (m *HttpWebhook) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpWebhook) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return HttpWebhookMultiError(errors)
	}

	return nil
}

// HttpWebhookMultiError is an error wrapping multiple validation errors
// returned by HttpWebhook.ValidateAll() if the designated constraints aren't met.
type HttpWebhookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpWebhookMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpWebhookMultiError) AllErrors() []error { return m }

// HttpWebhookValidationError is the validation error returned by
// HttpWebhook.Validate if the designated constraints aren't met.
type HttpWebhookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpWebhookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpWebhookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpWebhookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpWebhookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpWebhookValidationError) ErrorName() string { return "HttpWebhookValidationError" }

// Error satisfies the builtin error interface
func (e HttpWebhookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpWebhook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpWebhookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpWebhookValidationError{}

// Validate checks the field values on SqsWebhook with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SqsWebhook) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SqsWebhook with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SqsWebhookMultiError, or
// nil if none found.
func (m *SqsWebhook) ValidateAll() error {
	return m.validate(true)
}

func (m *SqsWebhook) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Key

	// no validation rules for Secret

	if len(errors) > 0 {
		return SqsWebhookMultiError(errors)
	}

	return nil
}

// SqsWebhookMultiError is an error wrapping multiple validation errors
// returned by SqsWebhook.ValidateAll() if the designated constraints aren't met.
type SqsWebhookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SqsWebhookMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SqsWebhookMultiError) AllErrors() []error { return m }

// SqsWebhookValidationError is the validation error returned by
// SqsWebhook.Validate if the designated constraints aren't met.
type SqsWebhookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SqsWebhookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SqsWebhookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SqsWebhookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SqsWebhookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SqsWebhookValidationError) ErrorName() string { return "SqsWebhookValidationError" }

// Error satisfies the builtin error interface
func (e SqsWebhookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSqsWebhook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SqsWebhookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SqsWebhookValidationError{}
